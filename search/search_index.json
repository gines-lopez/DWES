{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Desarrollo Web en Entorno Servidor","text":"<p>Estos apuntes desarrollan los materiales did\u00e1cticos del m\u00f3dulo de Desarrollo Web en Entorno Servidor (DWES). Dicho m\u00f3dulo se desarrolla en el segundo curso del Ciclo Superior de Desarrollo de Aplicaciones Web (DAW), cuyas ense\u00f1anzas m\u00ednimas se definen en el RD 686/2010, el cual fue modificado por el RD 405/2023, y se concreta el curr\u00edculo en la Orden 50/2012 de 25 de septiembre.</p> <p>Informaci\u00f3n del m\u00f3dulo</p> <p>Cabe destacar las siguientes caracter\u00edsticas del m\u00f3dulo DWES:</p> <ul> <li>En la modalidad presencial la duraci\u00f3n del m\u00f3dulo es de 160 horas lectivas, a raz\u00f3n de 8 horas semanales.</li> <li>Se ha planificado bas\u00e1ndose en 4 sesiones lectivas por semana, con 2 horas de duraci\u00f3n cada una de ellas.</li> </ul>"},{"location":"index.html#competencias","title":"Competencias","text":"<p>El presente m\u00f3dulo contribuye a las siguiente competencias profesionales, personales y sociales:</p> Competencias profesionales c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web. d. Gestionar bases de datos, interpretando su dise\u00f1o l\u00f3gico y verificando integridad, consistencia, seguridad y accesibilidad de los datos. f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones. g. Desarrollar interfaces en aplicaciones web de acuerdo con un manual de estilo, utilizando lenguajes de marcas y est\u00e1ndares web. h. Desarrollar componentes multimedia para su integraci\u00f3n en aplicaciones web, empleando herramientas espec\u00edficas y siguiendo las especificaciones establecidas. j. Desarrollar e integrar componentes software en el entorno del servidor web, empleando herramientas y lenguajes espec\u00edficos, para cumplir las especificaciones de la aplicaci\u00f3n. k. Desarrollar servicios para integrar sus funciones en otras aplicaciones web, asegurando su funcionalidad. l. Integrar servicios y contenidos distribuidos en aplicaciones web, asegurando su funcionalidad. m. Completar planes de pruebas verificando el funcionamiento de los componentes software desarrollados, seg\u00fan las especificaciones. n. Elaborar y mantener la documentaci\u00f3n de los procesos de desarrollo, utilizando herramientas de generaci\u00f3n de documentaci\u00f3n y control de versiones. \u00f1. Desplegar y distribuir aplicaciones web en distintos \u00e1mbitos de implantaci\u00f3n, verificando su comportamiento y realizando modificaciones. Competencias personales y sociales q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo."},{"location":"index.html#mapa-general-de-la-programacion-didactica","title":"Mapa General de la Programaci\u00f3n Did\u00e1ctica","text":"<p>A modo de resumen de la Programaci\u00f3n did\u00e1ctica (PD) de DWES, se muestra la secuenciaci\u00f3n de las Unidades de trabajo planificadas y los Resultados de aprendizaje (RAs) tratados en cada una de dichas unidades.</p> Nombre del m\u00f3dulo profesional Curso Horas Desarrollo Web en Entorno Servidor 2\u00ba 160 UUTT RA 1 RA 2 RA 3 RA 4 RA 5 RA 6 RA 7 RA 8 RA 9 Relevancia temporal Relevancia porcentual Primera Evaluaci\u00f3n UT 01 Arquitectura Web y herramientas de programaci\u00f3n 4 4 2,5% UT 02 PHP 12 12 24 15% UT 03 POO 8 8 16 10% UT 04  Programaci\u00f3n web 8 12 20 12,5% UT 05  Herramientas programaci\u00f3n web 8 8 5% Segunda Evaluaci\u00f3n UT 06  Acceso a Datos 8 16 24 15% UT 07  Proyecto I Estructura 4 8 8 20 12,5% UT 08  Proyecto II L\u00f3gica de negocio 4 8 8 20 12,5% UT 09  Proyecto III Servicios Rest 12 12 10% UT 10 Proyecto IV Servicios Rest avanzados 12 12 10% Resultados de Aprendizaje RA 1 Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. 12 8% RA 2 Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. 12 8% RA 3 Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. 20 12% RA 4 Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. 12 8% RA 5 Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. 20 12% RA 6 Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. 24 15% RA 7 Desarrolla servicios Web analizando su funcionamiento e implantando la estructura de sus componentes. 24 15% RA 8 Genera p\u00e1ginas Web din\u00e1micas analizando y utilizando tecnolog\u00edas del servidor Web que a\u00f1adan c\u00f3digo al lenguaje de marcas. 20 12% RA 9 Desarrolla aplicaciones Web h\u00edbridas seleccionando y utilizando librer\u00edas de c\u00f3digo y repositorios heterog\u00e9neos de informaci\u00f3n. 16 10%"},{"location":"evaluacion.html","title":"Evaluaci\u00f3n","text":"<p>En la siguiente p\u00e1gina se especifica la manera en la que se eval\u00faa al alumno. </p> <p>Evaluaci\u00f3n</p> <p>El objetivo de la evaluaci\u00f3n del proceso de aprendizaje del alumnado es conocer si ha alcanzado, para este m\u00f3dulo profesional, el/los resultado/s de aprendizaje seg\u00fan los diferentes criterios de evaluaci\u00f3n. La evaluaci\u00f3n del proceso de aprendizaje de la unidad de trabajo ser\u00e1 continua, formativa, integradora y criterial.</p> <p>A lo largo de este apartado se enunciar\u00e1n una serie de conceptos que permitir\u00e1n la explicaci\u00f3n de la manera de evaluaci\u00f3n del presente m\u00f3dulo.</p>"},{"location":"evaluacion.html#resultados-de-aprendizaje","title":"Resultados  de Aprendizaje","text":"<p>Resultado de Aprendizaje (RA)</p> <p>Los resultados de aprendizaje son conocimientos, destrezas, habilidades y competencias que esperamos que el alumno adquiera. </p> <p>Es importante conocer los RAs ya que la evaluaci\u00f3n de la formaci\u00f3n profesional se basa en la valoraci\u00f3n dichos resultados de aprendizaje. </p>"},{"location":"evaluacion.html#aportacion-a-la-calificacion-de-los-ras","title":"Aportaci\u00f3n a la calificaci\u00f3n de los RAs","text":"Resultado de Aprendizaje % de la calificaci\u00f3n RA 01: Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. 8% RA 02: Escribe sentencias ejecutables por un servidor web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. 8% RA 03: Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. 13% RA 04: Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. 8% RA 05: Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. 13% RA 06: Desarrolla aplicaciones web de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. 15% RA 07: Desarrolla servicios web reutilizables y accesibles mediante protocolos web, verificando su funcionamiento. 15% RA 08: Genera p\u00e1ginas web din\u00e1micas analizando y utilizando tecnolog\u00edas y frameworks del servidor web que a\u00f1adan c\u00f3digo al lenguaje de marcas. 13% RA 09: Desarrolla aplicaciones web h\u00edbridas seleccionando y utilizando tecnolog\u00edas, frameworks servidor y repositorios heterog\u00e9neos de informaci\u00f3n. 10%"},{"location":"evaluacion.html#procedimiento-de-evaluacion","title":"Procedimiento de Evaluaci\u00f3n","text":"<p>La calificaci\u00f3n de cada RA se obtendr\u00e1 de la media ponderada de las actividades formativas trabajadas. Para ello se utilizan los siguientes procedimientos de evaluaci\u00f3n:</p> Instrumento de evaluaci\u00f3n Puntuaci\u00f3n IE1. Actividades de la Unidad (AU). Actividades te\u00f3rico-practicas que ser\u00e1n evaluadas con el IC1. 3 puntos IE2. Pr\u00e1cticas/Trabajos individuales o colaborativas (PT). Pr\u00e1cticas de investigaci\u00f3n evaluables con el IC2 o IC3 10 puntos IE3. Defensa de proyectos (DP). Mediante sesiones de evaluaci\u00f3n orales en las que el alumnado deber\u00e1 exponer el proyecto que ser\u00e1 evaluado con el IC4. 30 puntos IE4. Prueba de conocimiento (PC).Test: 20 preguntas sobre los conceptos de la unidad. Se evaluar\u00e1 con el IC5.  10 puntos IE5. Prueba de conocimiento (PC). Ejercicios pr\u00e1cticos: Ejercicio sobre las actividades realizadas a lo largo del m\u00f3dulo. Se evaluar\u00e1 con el IC2.  20 puntos Instrumento de calificaci\u00f3n  Valores IC1: Escala de valores. Dise\u00f1ada para las actividades diarias. <ol> <li>0: No entregada o copiada.</li> <li>1: Entregado con soluci\u00f3n err\u00f3nea o incompleta.</li> <li>2: Entregado y soluci\u00f3n aceptable, aunque con alg\u00fan apartado incompleto.</li> <li>3: Entregado y soluci\u00f3n correcta.</li> </ol> IC2: R\u00fabrica actividad individual. Dise\u00f1ada para las actividades m\u00e1s complejas Propia de la actividad IC3: R\u00fabrica actividad colaborativa. Dise\u00f1ada para las actividades en grupo Propia de la actividad IC4: R\u00fabrica defensa de exposici\u00f3n. Dise\u00f1ada para las exposiciones en clase como en v\u00eddeo Propia de la actividad IC5: Escala para test. Dise\u00f1ada para test de evaluaci\u00f3n <ol> <li>Correcta: 0,5</li> <li>Err\u00f3nea: 0,25</li> </ol>"},{"location":"evaluacion.html#calificacion","title":"Calificaci\u00f3n","text":"<p>La evaluaci\u00f3n es un proceso continuo y formativo basado en la calificaci\u00f3n de competencias a trav\u00e9s de los resultados de aprendizaje. En el caso de DWES se realiza la media ponderada simple de las calificaciones de cada RA.</p> <p>Importante</p> <p>LA CALIFICACI\u00d3N FINAL DEL M\u00d3DULO se obtendr\u00e1 de la media ponderada de las calificaciones de cada RA. Durante las evaluaciones, \u00e9sta ser\u00e1 la ponderaci\u00f3n de los RAs visto hasta ese momento del curso.</p>"},{"location":"evaluacion.html#evaluaciones-ordinaria-y-extraordinaria","title":"Evaluaciones Ordinaria y Extraordinaria","text":"<p>En el caso de no superar alg\u00fan resultado de aprendizaje durante la evaluaci\u00f3n continua:</p> <p>Importante</p> <ul> <li>En primera instancia se recupera el RA en el examen de convocatoria final Ordinaria.</li> <li>En segunda instancia si todav\u00eda no se ha superado el RA en la Ordinaria se debe aprobar en examen final de la convocatoria Extraordinaria.</li> </ul>"},{"location":"metodologia.html","title":"Metodolog\u00eda","text":""},{"location":"metodologia.html#objetivos-didacticos","title":"Objetivos Did\u00e1cticos","text":"<p>A lo largo del curso, se te proporciona contenidos y diversas actividades, dise\u00f1adas para facilitar el proceso. Este aprendizaje se enriquece con clases magistrales y la combinaci\u00f3n de trabajo individual y en equipo.</p> <p>A continuaci\u00f3n, se detallan una serie de Objetivos Did\u00e1cticos que est\u00e1n dise\u00f1ados para proporcionar una base s\u00f3lida en el desarrollo web en el lado del servidor, preparando aal alumnado para los desaf\u00edos actuales y futuros en el campo del desarrollo de aplicaciones web:</p> <ul> <li>Comprender los Fundamentos de la Programaci\u00f3n en el Lado del Servidor: Los estudiantes aprender\u00e1n los principios b\u00e1sicos de la programaci\u00f3n del lado del servidor, incluyendo la gesti\u00f3n de solicitudes y respuestas, manipulaci\u00f3n de datos y la interacci\u00f3n con bases de datos.</li> <li> <p>Dominar Lenguajes de Programaci\u00f3n del Servidor: Adquirir habilidades avanzadas en al menos un lenguaje de programaci\u00f3n del lado del servidor como PHP, entendiendo su sintaxis, caracter\u00edsticas y mejores pr\u00e1cticas.</p> </li> <li> <p>Gestionar Datos necesarios para una aplicaci\u00f3n: Desarrollar la capacidad para crear, manipular y mantener bases de datos relacionales y no relacionales, entendiendo conceptos como modelos de datos, SQL, y la integraci\u00f3n de bases de datos en aplicaciones web.</p> </li> <li> <p>Implementar Aplicaciones Web Seguras: Aprender a identificar y protegerse contra vulnerabilidades comunes en el desarrollo web, como inyecciones SQL, implementando pr\u00e1cticas de seguridad robustas.</p> </li> <li> <p>Desarrollar Aplicaciones Web Din\u00e1micas y Escalables: Ense\u00f1ar a los estudiantes a construir aplicaciones web que no solo sean funcionales y est\u00e9ticamente agradables, sino tambi\u00e9n eficientes, escalables y adaptativas a diferentes entornos y dispositivos.</p> </li> </ul> <p>Para lograrlos, se hace uso de varias metodolog\u00edas para lograr que la experiencia de ense\u00f1anza-aprendizaje del alumnado sea lo m\u00e1s \u00f3ptima posible:</p> <ul> <li>Flipped Classroom: se har\u00e1 uso de esta metodolog\u00eda en las sesiones que se requiera que el alumnado acuda a clase con conocimientos relacionados con lo que se trabaja en esa sesi\u00f3n.</li> <li>Aprendizaje Basado en Proyectos (ABP): se emplea esta metodolog\u00eda para que el alumnado trabaje de una manera lo m\u00e1s cercana al entorno profesional.</li> <li>Aprendizaje Colaborativo basado en Retos (ACbR): en la parte final del m\u00f3dulo, se propone el trabajo colaborativo y en retos para desarrollar un proyecto a base de peque\u00f1os retos que se proponen al alumnado.</li> </ul>"},{"location":"metodologia.html#situacion-de-aprendizaje","title":"Situaci\u00f3n de Aprendizaje","text":"<p>Las situaciones de aprendizaje se convierten en un recurso poderoso para fusionar los logros educativos de diversas disciplinas a trav\u00e9s de actividades y tareas con sentido y relevancia, promoviendo la resoluci\u00f3n creativa y colaborativa de problemas. Esto fortalece aspectos como la autoestima, la autonom\u00eda, la reflexi\u00f3n y la responsabilidad.</p>"},{"location":"metodologia.html#tabla-resumen","title":"Tabla resumen","text":"<p>En la siguiente tabla se muestran los datos identificativos de la situaci\u00f3n de aprendizaje de DWES</p> DATOS IDENTIFICATIVOS T\u00edtulo LA PR\u00d3XIMA GRAN REVOLUCI\u00d3N DEL ECOMMERCE Ciclo Desarrollo de Aplicaciones Web M\u00f3dulo Desarrollo Web en Entorno Servidor Vinculaci\u00f3n Desarrollo Web en Entorno, Dise\u00f1o de Interfaces, Programaci\u00f3n y Base de Datos Descripci\u00f3n En esta Situaci\u00f3n de Aprendizaje de DWES, tienes ante ti el gran reto de crear la pr\u00f3xima gran herramienta del comercio electr\u00f3nico. Para tal prop\u00f3sito, \"Docentes Asociados S.A.\", necesita que alcances los resultados de aprendizaje y competencias que se establecen para el m\u00f3dulo de Desarrollo Web en Entorno Servidor Metodolog\u00eda ABP y ACbR"},{"location":"metodologia.html#tipologia-de-las-acciones-del-proceso-ensenanza-aprendizaje","title":"Tipolog\u00eda de las acciones del proceso ense\u00f1anza-aprendizaje","text":""},{"location":"metodologia.html#actividades-de-ensenanza-aprendizaje-aea","title":"Actividades de Ense\u00f1anza-Aprendizaje (AEA)","text":"<ul> <li>Objetivo: Facilitar el proceso donde los estudiantes adquieren nuevos conocimientos y habilidades.</li> <li>Caracter\u00edsticas:<ul> <li>Constituyen la base del proceso educativo en el aula.</li> <li>Incluyen una mezcla de explicaci\u00f3n directa, demostraci\u00f3n y pr\u00e1ctica supervisada.</li> </ul> </li> </ul>"},{"location":"metodologia.html#actividades-de-refuerzo-ar","title":"Actividades de Refuerzo (AR)","text":"<ul> <li>Objetivo: Ayudar a los estudiantes a consolidar y reafirmar los conocimientos y habilidades que ya han sido introducidos.</li> <li>Caracter\u00edsticas:<ul> <li>Se dise\u00f1an para estudiantes que necesitan apoyo adicional para alcanzar los objetivos de aprendizaje b\u00e1sicos.</li> <li>Suelen ser m\u00e1s guiadas y estructuradas para asegurar la comprensi\u00f3n.</li> </ul> </li> </ul>"},{"location":"metodologia.html#actividades-de-profundizacion-ap","title":"Actividades de Profundizaci\u00f3n (AP)","text":"<ul> <li>Objetivo: Permitir a los estudiantes que han alcanzado los objetivos b\u00e1sicos explorar temas en mayor profundidad.</li> <li>Caracter\u00edsticas:<ul> <li>Dirigidas a estudiantes que buscan retos adicionales m\u00e1s all\u00e1 del curr\u00edculo est\u00e1ndar.</li> <li>Fomentan habilidades de pensamiento cr\u00edtico, an\u00e1lisis y s\u00edntesis.</li> </ul> </li> </ul>"},{"location":"metodologia.html#actividades-de-la-situacion-de-aprendizaje-sa","title":"Actividades de la Situaci\u00f3n de Aprendizaje (SA)","text":"<ul> <li>Objetivo: Integrar el conocimiento y las habilidades de los estudiantes en un contexto pr\u00e1ctico o de la vida real.</li> <li>Caracter\u00edsticas:<ul> <li>Dise\u00f1adas para evaluar la capacidad del estudiante de aplicar lo aprendido en situaciones nuevas o desconocidas.</li> <li>A menudo interdisciplinarias, requieren que los estudiantes utilicen m\u00faltiples habilidades y \u00e1reas de conocimiento.</li> </ul> </li> </ul>"},{"location":"includes/abbreviations.html","title":"Abbreviations","text":""},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html","title":"Modelo Cliente/servidor","text":"<p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p> <p> </p> Modelo Cliente-Servidor. <p>Hoy en d\u00eda, es frecuente que uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes. En las aplicaciones web, el cliente es el navegador web. El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html#pagina-web-dinamica","title":"P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <ul> <li>Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</li> <li>Utilizar servicios REST de terceros invocados desde JS.</li> </ul> <p> </p> Web est\u00e1tica vs Web din\u00e1mica. <p>Las tecnolog\u00edas empleadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp"},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html#single-page-application-spa","title":"Single Page Application (SPA)","text":"<p>A d\u00eda de hoy, gran parte del desarrollo web est\u00e1 en plena transici\u00f3n de una arquitectura web cliente-servidor cl\u00e1sica donde el cliente realiza una llamada al backend, por una arquitectura SPA donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunic\u00e1ndose mediante JSON).</p> <p> </p> Arquitectura tradicional vs SPA."},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html","title":"Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html#tier","title":"Tier","text":"<p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> <p>Cluster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html#layer","title":"Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n. Es la capa donde la aplicaci\u00f3n se muestra al usuario. B\u00e1sicamente es la GUI (Graphical User Interface, Interfaz Gr\u00e1fica de Usuario). En el caso de una aplicaci\u00f3n web ser\u00eda el c\u00f3digo HTML que se carga directamente en el navegador web. En cualquier caso, se ejecuta directamente en el equipo del cliente.</li> <li>Negocio / Aplicaci\u00f3n / Proceso. Es la capa intermedia donde se lleva a cabo toda la l\u00f3gica de la aplicaci\u00f3n. Siempre se ejecutar\u00e1 en el lado servidor. Esta capa, tras realizar todos los c\u00e1lculos y/o operaciones sobre los datos, genera el c\u00f3digo HTML que ser\u00e1 presentado al usuario en la capa siguiente.</li> <li>Datos / Persistencia. Es la capa que almacena los datos. B\u00e1sicamente, en condiciones normales, hace referencia al propio SGBD que es el encargado de almacenar los datos. Dependiendo de la arquitectura de la aplicaci\u00f3n, esta capa y la de negocio se pueden encontrar f\u00edsicamente en el mismo equipo, aunque tambi\u00e9n es posible que se tengan que separar por cuestiones de rendimiento. La capa de datos sirve todas la informaci\u00f3n necesaria a la capa de negocio para llevar a cabo sus operaciones.</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> <p> </p> Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas."},{"location":"uutt/01_Arquitectura/013_MCV.html","title":"Modelo Vista Controlador (MVC)","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.</p>"},{"location":"uutt/01_Arquitectura/013_MCV.html#actividades","title":"Actividades","text":"<ul> <li>AC101 (AEA). (RA1 / CE1a CE1e CE1g / IC1 / 1p) Como primer paso para desarrollar el proyecto que se te ha encargado, el director de proyectos o project manager te solicita que investigues los tres frameworks de PHP m\u00e1s utilizados en la actualidad. Es importante que realices una comparaci\u00f3n entre ellos para facilitar la toma de decisiones.</li> </ul>"},{"location":"uutt/01_Arquitectura/014_Decisiones.html","title":"Decisiones de dise\u00f1o","text":"<p>A la hora de desarrollar cualquier proyecto web debemos realizarnos una serie de preguntas como son:</p> <ul> <li>\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?</li> <li>\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?</li> <li>\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?</li> <li>\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?</li> <li>\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?</li> <li>\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?</li> </ul> <p>Una vez que las hemos respondido, estaremos listo para comenzar con \u00e9l.</p> <p> </p> Decisiones de dise\u00f1o."},{"location":"uutt/01_Arquitectura/015_Herramientas.html","title":"Herramientas","text":""},{"location":"uutt/01_Arquitectura/015_Herramientas.html#servidor-web","title":"Servidor Web","text":"<p>Un servidor web es un software que forma parte del servidor y tiene como misi\u00f3n principal devolver informaci\u00f3n ((HTML, CSS, JS, JSON, im\u00e1genes, etc...)) cuando recibe peticiones  HTTP (GET, POST, DELETE, ...) por parte de los usuarios.</p> <p>El producto m\u00e1s implantando es Apache Web Server, creado en 1995.</p> <ul> <li>Software libre y multiplataforma</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx. Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>Para saber m\u00e1s...</p> <p>Comparativa servidores web</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#servidor-de-aplicaciones","title":"Servidor de Aplicaciones","text":"<ul> <li>Software que ofrece servicios adicionales a los de un servidor web:<ul> <li>Clustering</li> <li>Balanceo de carga</li> <li>Tolerancia a fallos</li> </ul> </li> <li>Tomcat es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java.<ul> <li>Contiende un contenedor Web Java que interpreta Servlets y JSP.</li> </ul> </li> </ul> <p>Info</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#lenguajes-en-el-servidor","title":"Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones empresariales. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas.</p> <p> </p> JavaEE."},{"location":"uutt/01_Arquitectura/015_Herramientas.html#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente en la versi\u00f3n 8.X . Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code> y <code>?&gt;</code><ul> <li>Para generar c\u00f3digo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code></li> </ul> </li> <li>Multitud de librer\u00edas y frameworks:<ul> <li>Laravel, Symfony, Codeigniter, Zend</li> </ul> </li> </ul> <p>Su documentaci\u00f3n es bastante completa</p> <p>El siguiente mapa mental muestra un resumen de sus elementos:</p> <p> </p> PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#actividades","title":"Actividades","text":"<ul> <li>PR101 (AR). (RA1 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Desde el departamento de proyectos nos solicitan que investigues las tecnolog\u00edas empleadas en cliente y servidor necesarias para el desarrollo de la aplicaci\u00f3n encargada por la empresa \"Docentes Asociados S.A.\". Para ello no dudes en consultar cuales son las que usan tus webs de referencia.</li> </ul>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html","title":"Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A lo largo del curso vamos a utilizar la versi\u00f3n 8.X de PHP.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#xampp","title":"XAMPP","text":"<p>XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP o MAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>la \u00faltima P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>XAMPP en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#docker","title":"Docker","text":"<p>Docker es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Para ello es necesario tener instalado Docker Desktop en nuestros entornos de desarrollo (el cual ya incluye en nucleo de Docker y la herramienta docker compose).</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar PHP <code>8.X</code>. Respecto a Docker, para escribir los apuntes hemos utilizado la version <code>24</code> y la version <code>2.23.2</code> de docker compose. Finalmente, la versi\u00f3n de Docker Desktop que hemos utilizado es la <code>4.25.2</code>.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#plantilla-servidor-web-php","title":"Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arraque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos a rellenar el archivo <code>docker-compose.yaml</code> con:</p> Apache y PHP <pre><code>  # Services\n  services:\n    # Apache + PHP\n    apache_php:\n      image: php:8-apache\n      # Preparamos un volumen para almacenar nuestro c\u00f3digo\n      volumes:\n        - ./src/:/var/www/html\n      expose:\n        - 80\n      ports:\n        - 80:80\n</code></pre> Nginx y PHP <pre><code>  # Services\n  services:\n    nginx:\n      image: nginx:1.19\n      ports:\n        - 80:80\n      volumes:\n        - ./src:/var/www/php\n        - ./.docker/nginx/conf.d:/etc/nginx/conf.d # cargamos la configuraci\u00f3n de un fichero externo\n      depends_on:\n        - php   # enlazamos nginx con php\n    php:\n      image: php:8.0-fpm\n      working_dir: /var/www/php\n      volumes:\n        - ./src:/var/www/php\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente. Para facilitar la puesta en marcha, ten\u00e9is la plantilla de Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o Nginx/PHP disponible para su descarga.</p> <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp\n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./\n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash\n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando</li> <li><code>docker ps -a</code>: Ver todos los contenedores</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas</li> </ul> <p>Otra forma m\u00e1s sencilla para lanzar de nuevo los contenedores y gestionarlos una vez creados es utilizar el interfaz gr\u00e1fico que ofrece Docker Desktop.</p> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetas para todo el stack de desarrollo. En posteriores sesiones utilizaremos tanto Devilbox como Laradock</p> <p>Pero quiero saber c\u00f3mo funciona...</p> <p>En el m\u00f3dulo de Despliegue de Aplicaciones Web estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#entorno-de-desarrollo","title":"Entorno de desarrollo","text":"<p>En este curso vamos a emplear Visual Studio Code como entorno de desarrollo (IDE). Existen otras alternativas, siendo PhpStorm la m\u00e1s conocida pero siendo de pago. Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP Intelephense</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo.</p> <p> </p> Docker en VSCode."},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#hola-mundo","title":"Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como <code>index.php</code>, al acceder a <code>http://localhost</code> autom\u00e1ticamente cargar\u00e1 el resultado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC102 (AEA). (RA1 / CE1c CE1e / IC1 / 3p) El departamento de servidores ha contratado un servidor web para desplegar la aplicaci\u00f3n. El DevOps a cargo de tu proyecto te solicita que configures tu servidor PHP local de trabajo. No olvides que debes mostrar el proceso y las principales caracter\u00edsticas.</p> </li> <li> <p>PR102 (AP). (RA1 / CE1c CE1e / IC1 / 3p) Como parte de la documentaci\u00f3n que debes generar para el proyecto que te han solicitado, muestra y comenta las principales variables que aparecen en el fichero php.ini del servidor que has configurado para trabajar en local.</p> </li> </ul>"},{"location":"uutt/01_Arquitectura/017_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Curso: Introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea</li> <li>Art\u00edculo: Arquitecturas Web y su evoluci\u00f3n</li> <li>Web: Desarrollo Web en Entorno Servidor, por Aitor Medrano</li> </ul>"},{"location":"uutt/01_Arquitectura/017_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Art\u00edculo: Full stack developer: \u00bfcu\u00e1les son sus funciones y qu\u00e9 formaci\u00f3n necesito?</li> </ul>"},{"location":"uutt/01_Arquitectura/018_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 define una arquitectura web?<ol> <li>El dise\u00f1o visual de una p\u00e1gina web.</li> <li>La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</li> <li>El tipo de contenido multimedia utilizado.</li> <li>La velocidad de carga de la p\u00e1gina web\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</p> <ol> <li>En una arquitectura cliente-servidor, \u00bfqu\u00e9 papel suele desempe\u00f1ar el cliente?<ol> <li>Servidor de base de datos.</li> <li>Balanceador de carga.</li> <li>Navegador web.</li> <li>Servidor de aplicaciones\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Navegador web.</p> <ol> <li>\u00bfQu\u00e9 se necesita para generar una p\u00e1gina web din\u00e1mica?<ol> <li>Solo HTML y CSS.</li> <li>Lenguaje de servidor y/o servicios REST.</li> <li>\u00danicamente JavaScript.</li> <li>Conexi\u00f3n a una red privada virtual (VPN)\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Lenguaje de servidor y/o servicios REST.</p> <ol> <li>\u00bfQu\u00e9 perfiles de desarrollo se asocian con la generaci\u00f3n de p\u00e1ginas din\u00e1micas?<ol> <li>Analista de datos y cient\u00edfico de datos.</li> <li>Dise\u00f1ador gr\u00e1fico y desarrollador de juegos.</li> <li>Front-end/cliente y Back-end/servidor.</li> <li>Gestor de redes y administrador de sistemas\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Front-end/cliente y Back-end/servidor.</p> <ol> <li>\u00bfQu\u00e9 representa el \"Modelo\" en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC)?<ol> <li>La interfaz de usuario.</li> <li>La l\u00f3gica de negocio y gesti\u00f3n de eventos.</li> <li>La informaci\u00f3n y gesti\u00f3n de accesos a esta.</li> <li>El componente que gestiona las comunicaciones y eventos\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. La informaci\u00f3n y gesti\u00f3n de accesos a esta.</p>"},{"location":"uutt/01_Arquitectura/019_PruebaEspecifica.html","title":"Prueba espec\u00edfica","text":"<ol> <li>(RA1 - 2p) \u00bfCu\u00e1les son los tres frameworks de PHP m\u00e1s utilizados? Realiza una tabla comparativa de sus ventajas e inconvenientes.</li> <li>(RA1 - 2p) Realiza una tabla en la que se aprecien las siguientes tecnolog\u00edas clasificadas como cliente o servidor: react, PHP, Node.js, Java, Javascript, vue.js, Python, HTML, CSS, ruby. </li> <li>(RA1 - 2p) \u00bfCu\u00e1les son las principales variables que aparecen en el fichero php.ini?</li> <li> <p>(RA1 - 4p) Realiza el siguiente test:</p> <ol> <li> <p>\u00bfQu\u00e9 define una arquitectura web?</p> <ol> <li>El dise\u00f1o visual de una p\u00e1gina web.</li> <li>La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</li> <li>El tipo de contenido multimedia utilizado.</li> <li>La velocidad de carga de la p\u00e1gina web\u200b</li> </ol> </li> <li> <p>En una arquitectura cliente-servidor, \u00bfqu\u00e9 papel suele desempe\u00f1ar el cliente?</p> <ol> <li>Servidor de base de datos.</li> <li>Balanceador de carga.</li> <li>Navegador web.</li> <li>Servidor de aplicaciones\u200b</li> </ol> </li> <li> <p>\u00bfQu\u00e9 se necesita para generar una p\u00e1gina web din\u00e1mica?</p> <ol> <li>Solo HTML y CSS.</li> <li>Lenguaje de servidor y/o servicios REST.</li> <li>\u00danicamente JavaScript.</li> <li>Conexi\u00f3n a una red privada virtual (VPN)\u200b</li> </ol> </li> <li> <p>\u00bfQu\u00e9 perfiles de desarrollo se asocian con la generaci\u00f3n de p\u00e1ginas din\u00e1micas?</p> <ol> <li>Analista de datos y cient\u00edfico de datos.</li> <li>Dise\u00f1ador gr\u00e1fico y desarrollador de juegos.</li> <li>Front-end/cliente y Back-end/servidor.</li> <li>Gestor de redes y administrador de sistemas\u200b</li> </ol> </li> <li> <p>\u00bfQu\u00e9 representa el \"Modelo\" en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC)?</p> <ol> <li>La interfaz de usuario.</li> <li>La l\u00f3gica de negocio y gesti\u00f3n de eventos.</li> <li>La informaci\u00f3n y gesti\u00f3n de accesos a esta.</li> <li>El componente que gestiona las comunicaciones y eventos\u200b</li> </ol> </li> </ol> </li> </ol>"},{"location":"uutt/01_Arquitectura/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul>"},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/01_Arquitectura/ResumenUD.html","title":"Resumen UD","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad Did\u00e1ctica:</p>  RESUMEN UNIDAD DID\u00c1CTICA <p>Unidad Did\u00e1ctica</p> <p>UD1.- Arquitectura Web y herramientas de programaci\u00f3n..</p> <p>Horas</p> <p>2 Sesiones - 4 Horas</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <p>Competencias Personales y Sociales. Transversales</p> <p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor.</li> <li>OD3: Configurar entorno de trabajo en local</li> </ul> </p> <p>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</p> <p>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</p> <p>Contenidos Espec\u00edficos</p> <p>Materiales y Recursos</p> <p> <ul> <li>CES 1. Diferencias entre cliente y servidor</li> <li>CES 2. Arquitectura de una web din\u00e1mica</li> <li>CES 3. Modelo Vista Controlador (MVC)</li> <li>CES 4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES 5. Configuraci\u00f3n entorno local</li> </ul> </p> <p>Apuntes aportados por el profesorado.</p> <p>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</p> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p> <ul> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas.</li> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul> <p> <ul> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</li> </ul> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas.</li> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> <li>CE1f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE4 e IE5.</li> </ul> </p> <p> <ul> <li>IC2 e IC5.</li> </ul> </p>"},{"location":"uutt/02_PHP/0210_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 significa PHP?<ol> <li>Personal Home Page</li> <li>Private Home Protocol</li> <li>Personal Hypertext Processor</li> <li>Hypertext Preprocessor</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. Hypertext Preprocessor.</p> <ol> <li>\u00bfQu\u00e9 archivo PHP es com\u00fanmente utilizado como el punto de entrada principal en muchos proyectos PHP?<ol> <li>connect.php</li> <li>start.php</li> <li>index.php</li> <li>main.php</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. index.php.</p> <ol> <li>\u00bfCu\u00e1l de los siguientes es un superglobal en PHP que se utiliza para recoger datos del formulario enviado mediante el m\u00e9todo POST?<ol> <li>$_SERVER$</li> <li>$_GET$</li> <li>$_POST$</li> <li>$_REQUEST$</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. $_POST$.</p> <ol> <li>\u00bfQu\u00e9 funci\u00f3n se usa para insertar contenido de un archivo en un archivo PHP?<ol> <li>get_file_contents()</li> <li>include()</li> <li>file_get_contents()</li> <li>require()</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. include().</p> <ol> <li>\u00bfCu\u00e1l es el prop\u00f3sito de la funci\u00f3n echo en PHP?<ol> <li>Guardar datos en una variable</li> <li>Imprimir datos en la salida</li> <li>Leer datos de una base de datos</li> <li>Modificar datos en un archivo</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Imprimir datos en la salida.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html","title":"El lenguaje PHP","text":"<p>Una p\u00e1gina PHP es una p\u00e1gina web normal en la que utilizamos la extensi\u00f3n <code>.php</code> en lugar de <code>.htm</code> o <code>.html</code>.</p> <p>En una p\u00e1gina <code>.php</code> se pueden insertar bloques de c\u00f3digo escrito en lenguaje PHP. Estos bloques de c\u00f3digo reciben el nombre de scripts. Un script PHP se limita anteponiendo los s\u00edmbolos <code>&lt;?php</code> a la primera instrucci\u00f3n y escribiendo despu\u00e9s de la \u00faltima instrucci\u00f3n los s\u00edmbolos <code>?&gt;</code>.</p> <pre><code>&lt;?php\n    phpinfo();\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#curiosidades","title":"Curiosidades","text":"<ul> <li>Acr\u00f3nimo de Personal Home Page</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante mod_php)</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>La \u00faltima versi\u00f3n es la 8.3.3.</li> </ul> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#codigo-embebido","title":"C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>, mientras que las sentencias se separan mediante <code>;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- Muestra una frase con HTML --&gt;\n        Hola mundo&lt;br&gt;\n        &lt;!-- Muestra una frase con PHP --&gt;\n        &lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>S\u00f3lo etiquetas de apertura</p> <p>Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#generando-contenido","title":"Generando contenido","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo expresi\u00f3n;</code></li> <li><code>print (expresi\u00f3n);</code></li> <li><code>&lt;?= expresi\u00f3n ?&gt;</code></li> </ul> <p>Las que vamos a utilizar son <code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y <code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Echo y print&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n        &lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n        &lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\") ?&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#comentarios","title":"Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> <pre><code>&lt;?php\n    // Este es un comentario de una sola l\u00ednea\n    /*\n    Este es\n    un comentario\n    que ocupa\n    varias l\u00edneas\n    */ \n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#errores","title":"Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> <pre><code>Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11\n Stack trace:\n #0 {main}\n    thrown in C:\\xampp\\htdocs\\202echo.php on line 11\n</code></pre> <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#actividades","title":"Actividades","text":"<ul> <li>AC201 (AEA). (RA2 / CE2a CE2c CE2d / IC1 / 3p) - El Supervisor T\u00e9cnico (CTO) te solicita una prueba en PHP para saber si puedes seguir las mejores pr\u00e1cticas de desarrollo. Para ello te solicita que muestres 3 frases, cada una en un p\u00e1rrafo utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea.</li> </ul>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html","title":"Variables, datos y operadores","text":""},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#variables","title":"Variables","text":"<p>Para definir su valor se utilizar\u00e1 una expresi\u00f3n del tipo:</p> <p><pre><code> $variable = valor;\n</code></pre> A la hora de definir una variable se han de tener una serie de consideraciones</p> <ul> <li>El nombre ha de comenzar con $ seguido de una letra.</li> <li>Se distingue May\u00fasculas/Min\u00fasculas.</li> <li>No es necesario definir el tipo.</li> <li>Si valor es un texto, ha de ir entre comillas.</li> <li>Nos podemos referir a su valor desde cualquier parte del script, salvo que sea una variable definida en una funci\u00f3n. En ese caso s\u00f3lo tiene sentido en el interior de la funci\u00f3n.</li> <li>Una variable definida en una funci\u00f3n no puede utilizarse en el script (toma valor cero o \"\").</li> </ul> <p>Variable global</p> <p>Excepci\u00f3n a lo anterior. La funci\u00f3n puede utilizar valores de variables externas si se ha incluido en la funci\u00f3n la orden <code>global nombrevariable;</code>, se busca el valor de la variable en el resto del script.</p> <p>Variable Superglobal</p> <p>Existe otro tipo Variable Superglobal, se puede acceder a su valor desde cualquier punto sin utilizar la orden global.</p> <p>Variable est\u00e1tica</p> <p>Si definimos una variable como est\u00e1tica dentro de una funci\u00f3n, cuando salimos de su \u00e1mbito conserva el valor que tenga en el momento de salir y la l\u00ednea que le da valor inicial la primera vez que se ejecuta no volver\u00e1 actuar cuando se ejecute la funci\u00f3n hasta que actualicemos la p\u00e1gina. Para definir la variable $a como est\u00e1tica y con un valor inicial utilizaremos la orden (<code>static $a = 3;</code>), al salir de la funci\u00f3n $a conservar\u00e1 el \u00faltimo valor que se haya asignado hasta que se actualice la p\u00e1gina</p> <pre><code>&lt;?php\n    $nombre = \"Gin\u00e9s\";\n    $nombreCompleto = \"Gin\u00e9s L\u00f3pez\";\n    $numero = 123;\n    $numero2 = 456;\n    $pi = 3.14;\n    $suerte = true;\n    $sinValor;\n\n    echo $sinValor;\n?&gt;\n</code></pre> <p>Tipos</p> <p>Aunque a priori no hay tipos de datos, internamente PHP trabaja con cuatro tipos escalares: boolean, integer, float y string y cuatro tipos compuestos: array, object, callable e iterable. Existe un tipo especial para null (m\u00e1s informaci\u00f3n en http://php.net/manual/es/language.types.null.php).</p>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#tipos-de-variables","title":"Tipos de variables","text":"<p>En PHP no es necesario definir el tipo. Seg\u00fan sea el valor almacenado se adapta el tipo. Hay tres tipos</p> <ul> <li>Integer: Enteros (+/- 231)</li> <li>Double: Coma flotante</li> <li>String: Cadenas</li> </ul> <p>Para realizar conversiones de datos o si queremos trabajar con tipos de datos, tenemos las siguientes funciones:</p> <ul> <li><code>floatval</code>, <code>intval</code>, <code>strval</code>: devuelve una variable del tipo de la funci\u00f3n indicada</li> <li><code>settype</code>: fuerza la conversi\u00f3n</li> <li><code>gettype</code>: obtiene el tipo</li> <li><code>is_int</code>, <code>is_float</code>, <code>is_string</code>, <code>is_array</code>, <code>is_object</code>: devuelve un booleano a partir del tipo recibido</li> </ul> <pre><code>&lt;?php\n$uno = 1;\nvar_dump(is_int($uno)); // true\n$unofloat = floatval($uno);\nsettype($uno, \"string\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_string($uno)); // true\nsettype($uno, \"float\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_float($uno)); // true\nvar_dump(is_int(intval($uno))); // true\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#constantes","title":"Constantes","text":"<p>Son variables cuyo valor no var\u00edan. Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE; // PHP &gt; 5.3</code></li> </ul> <pre><code>&lt;?php\ndefine(\"PI\", 3.1416);\nconst IVA = 0.21;\n\necho PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n</code></pre> <ul> <li>Se declaran siempre en MAY\u00daSCULAS</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php</li> </ul>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#operadores","title":"Operadores","text":""},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#arimeticos","title":"Arim\u00e9ticos","text":"Ejemplo Nombre Resultado <code>-$a</code> Negaci\u00f3n Opuesto de <code>$a</code>. <code>$a + $b</code> Suma Suma de <code>$a</code> y <code>$b</code>. <code>$a - $b</code> Resta Diferencia de <code>$a</code> y <code>$b</code>. <code>$a * $b</code> Multiplicaci\u00f3n Producto de <code>$a</code> y <code>$b</code>. <code>$a / $b</code> Divisi\u00f3n Cociente de <code>$a</code> y <code>$b</code>. <code>$a % $b</code> M\u00f3dulo / Resto Resto de <code>$a</code> dividido por <code>$b</code>. <code>$a ** $b</code> Potencia Resultado de <code>$a</code> elevado a <code>$b</code>. PHP &gt;= 5.6. <p>En el caso de cadenas, si queremos concatenarlas, se utiliza el operador <code>.</code>:</p> <pre><code>&lt;?php\n$x = 33;\n$y = 11;\n$z = $x + $y;\necho \"La suma de 33 y 11 es \".44.\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".(33 + 11).\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".$z.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p>Realmente, en vez de concatenar cadenas con variables, podemos imprimirlas directamente ya que se expanden autom\u00e1ticamente: <pre><code>&lt;?php\necho \"La suma de $x y $y es $z &lt;br /&gt;\";\n?&gt;\n</code></pre></p> <p>En ocasiones, necesitamos rodear el nombre de la variable entre llaves para poder unir m\u00e1s texto al resultado:</p> <pre><code>&lt;?php\n$color = \"rojo\";\necho \"El plural de $color el ${color}s\";\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos algunas funciones para el tratamiento de cadenas.</p>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#comparacion","title":"Comparaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a == $b</code> Igual <code>true</code> si <code>$a</code> es igual a <code>$b</code> tras de la conversi\u00f3n de tipos. <code>$a === $b</code> Id\u00e9ntico, Comparaci\u00f3n estricta <code>true</code> si <code>$a</code> es igual a <code>$b</code>, y son del mismo tipo de dato. <code>$a != $b</code>, <code>$a &lt;&gt; $b</code> Diferente <code>true</code> si <code>$a</code> no es igual a <code>$b</code> despu\u00e9s de la conversi\u00f3n de tipos. <code>$a !== $b</code> No id\u00e9ntico <code>true</code> si <code>$a</code> no es igual a <code>$b</code>, o si no son del mismo tipo. <code>$a &lt; $b</code> Menor que <code>true</code> si <code>$a</code> es estrictamente menor que <code>$b</code>. <code>$a &gt; $b</code> Mayor que <code>true</code> si <code>$a</code> es estrictamente mayor que <code>$b</code>. <code>$a &lt;= $b</code> Menor o igual que <code>true</code> si <code>$a</code> es menor o igual que <code>$b</code>. <code>$a &gt;= $b</code> Mayor o igual que <code>true</code> si <code>$a</code> es mayor o igual que <code>$b</code>. <code>$a &lt;=&gt; $b</code> Nave espacial Devuelve <code>-1</code>, <code>0</code> o <code>1</code> cuando <code>$a</code> es respectivamente menor, igual, o mayor que <code>$b</code>. PHP &gt;= 7. <code>$a ?? $b ?? $c</code> Fusi\u00f3n de null El primer operando de izquierda a derecha que exista y no sea <code>null</code>. <code>null</code> si no hay valores definidos y no son <code>null</code>. PHP &gt;= 7."},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#logicos","title":"L\u00f3gicos","text":"Ejemplo Nombre Resultado <code>$a and $b</code>, <code>$a &amp;&amp; $b</code> And (y) <code>true</code> si tanto <code>$a</code> como <code>$b</code> son <code>true</code>. <code>$a or $b</code>, <code>$a || $b</code> Or (o inclusivo) <code>true</code> si cualquiera de <code>$a</code> o <code>$b</code> es <code>true</code>. <code>$a xor $b</code> Xor (o exclusivo) <code>true</code> si <code>$a</code> o <code>$b</code> es <code>true</code>, pero no ambos. <code>!$a</code> Not (no) <code>true</code> si <code>$a</code> no es <code>true</code>."},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#asignacion","title":"Asignaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a = $b</code> Asignaci\u00f3n Asigna a <code>$a</code> el valor de <code>$b</code> <code>$a += $b</code> Asignaci\u00f3n de la suma Le suma a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a + $b</code> <code>$a -= $b</code> Asignaci\u00f3n de la resta Le resta a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a - $b</code> <code>$a *= $b</code> Asignaci\u00f3n del producto Asigna a <code>$a</code> el producto de <code>$a</code> por <code>$b</code>. Equivalente a <code>$a = $a * $b</code> <code>$a /= $b</code> Asignaci\u00f3n de la divisi\u00f3n Asigna a <code>$a</code> el conciente de <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a / $b</code> <code>$a %= $b</code> Asignaci\u00f3n del resto Asigna a <code>$a</code> el resto de dividir <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a % $b</code> <code>$a .= $b</code> Concatenaci\u00f3n Concatena a <code>$a</code> la cadena <code>$b</code>. Equivalente a <code>$a = $a . $b</code> <code>$a++</code> Incremento Incrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a + 1</code> <code>$a--</code> Decremento Decrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a - 1</code> <p>Prioridad de los operadores</p> <p>Recuerda la prioridad. Primero los par\u00e9ntesis, luego la negaci\u00f3n (<code>!</code>), productos/divisiones, sumas/restas, comparaciones, l\u00f3gicos y por \u00faltimo se realiza la asignaci\u00f3n. M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.operators.precedence.php</p>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC202 (AEA). (RA2 / CE2d CE2g / IC1 / 3p) - Siguiendo con la prueba t\u00e9cnica iniciada en la actividad anterior (AC201), ahora se te solicita que escribas un programa que utilice las variables <code>$x</code> y <code>$y</code>. As\u00edgnales los valores 33 y 999 respectivamente. A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n. </p> </li> <li> <p>AC203 (AEA). (RA2 / CE2c CE2d CE2g / IC1 / 3p) -  Siguiendo con la prueba t\u00e9cnica, escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla.</p> </li> <li> <p>AC204 (AP). (RA2 / CE2d CE2g / IC1 / 3p) -  A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. </p> <p>Por ejemplo, al introducir 139 debe mostrar:</p> <pre><code>1 billete de 100\n0 billete de 50\n1 billete de 20\n1 billete de 10\n1 billete de 5\n2 moneda de 2\n</code></pre> <p>Tip</p> <p>Puedes forzar a realizar la divisi\u00f3n entera mediante la funci\u00f3n <code>intdiv($dividendo, $divisor)</code> o pasar un n\u00famero flotante a entero puedes usar la funci\u00f3n <code>intval()</code>.</p> </li> <li> <p>AC205 (AR). (RA2 / CE2c CE2d CE2g / IC1 / 3p) - Se te solicita un programa para la gesti\u00f3n de la puntuaci\u00f3n de un test. Para ello, a partir de un numero, muestra por pantalla si el n\u00famero es positivo, negativo o cero.</p> </li> <li> <p>AC206 (AR). (RA2 / CE2c CE2d CE2g / IC1 / 3p) - La empresa necesita que escribas un programa que funcione similar a un reloj, de manera que a partir de los valores de hora, minuto y segundo muestre la hora dentro de un segundo. Tras las 23:59:59 ser\u00e1n las 0:0:0.</p> </li> </ul>"},{"location":"uutt/02_PHP/023_EstructurasControl.html","title":"Estructuras de control","text":"<p>A la hora de trasladar problemas a c\u00f3digo, se necesita una serie de estructuras que nos permiten programar nuestro c\u00f3digo para que se comporte de la manera que se desea. Es por ello que se dividen en dos grandes bloques:</p> <ul> <li>Estructuras de condici\u00f3n.</li> <li>Estructuras de repetici\u00f3n</li> </ul>"},{"location":"uutt/02_PHP/023_EstructurasControl.html#condicion","title":"Condici\u00f3n","text":"<p>La condici\u00f3n simple se realiza mediante la instrucci\u00f3n <code>if</code>. Entre par\u00e9ntesis se pone la condici\u00f3n que se eval\u00faa a <code>true</code> o <code>false</code>. Si no se ponen llaves, en vez de abrir un bloque, se ejecutar\u00e1 s\u00f3lo la siguiente instrucci\u00f3n.</p> <p>Siempre llaves</p> <p>Es recomendable poner llaves siempre aunque en el momento de codificar s\u00f3lo haya una \u00fanica instrucci\u00f3n. De este modo, se queda preparado para a\u00f1adir m\u00e1s contenido en el futuro sin provocar bugs.</p> <pre><code>&lt;?php\n$hora = 8; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Suena el despertador.\";\n}\necho \"&lt;br&gt;\";\nif ($hora === 8)\n    echo \"Suena el despertador.\";\n?&gt;\n</code></pre> <p>Las condiciones compuesta mediante <code>if-else</code>:</p> <pre><code>&lt;?php\n$hora = 17; // La hora en formato de 24 horas\nif ($hora &lt;= 12) {\n    echo \"Son las \" . $hora . \" de la ma\u00f1ana\";\n} else {\n    echo \"Son las \" . ($hora - 12) . \" de la tarde\";\n}\n?&gt;\n</code></pre> <p>Las condiciones anidadas mediante <code>if-else if-else</code>:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Es la hora de desayunar.\";\n} else if ($hora === 14) {\n    echo \"Es la hora de la comida.\";\n} else if ($hora === 21) {\n    echo \"Es la hora de la cena.\";\n} else {\n    echo \"Ahora no toca comer.\";\n}\n?&gt;\n</code></pre> <p>La sentencia <code>switch</code> tambi\u00e9n permite trabajar con condiciones m\u00faltiples:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nswitch ($hora) {\n    case 9:\n        echo \"Es la hora de desayunar.\";\n        break;\n    case 14:\n        echo \"Es la hora de la comida.\";\n        break;\n    case 21:\n        echo \"Es la hora de la cena.\";\n        break;\n    default:\n        echo \"Ahora no toca comer\";\n}\n?&gt;\n</code></pre> <p>No olvides el <code>break</code></p> <p>Un error muy com\u00fan es olvidar la instrucci\u00f3n <code>break</code> tras cada caso. Si no lo ponemos, ejecutar\u00e1 el siguiente caso autom\u00e1ticamente.</p> <p>Finalmente, tambi\u00e9n tenemos el operador ternario <code>condici\u00f3n ? valorTrue : valorFalse</code>:</p> <pre><code>&lt;?php\n$hora = 14;\n$formato = ($hora &gt; 12) ? 24 : 12;\necho \"El formato es de $formato horas\"\n?&gt;\n</code></pre> <p>Si queremos comprobar si una variable tiene valor y si no darle un valor determinado, usaremos el operador <code>?:</code> (se conoce como el operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator) con la sintaxis <code>expresi\u00f3n ?: valorSiVacio</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET['nombre'] ?: \"desconocido\"\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/023_EstructurasControl.html#repeticion","title":"Repetici\u00f3n","text":"<p>Mediante la instrucci\u00f3n <code>while</code>:</p> <pre><code>&lt;?php\n$i = 1;\nwhile ($i &lt;= 10) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n    $i++;\n}\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>do-while</code>:</p> <pre><code>&lt;?php\ndo {\n    $dado = rand(1, 6);\n    // rand() devuelve un valor aleatorio \n    echo \"Tirando el dado... \";\n    echo \"ha salido un \" . $dado . \".\";\n    echo \"&lt;br&gt;\";\n} while ($dado != 5);\necho \"\u00a1Bien! Saco una ficha de casa.\";\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>for</code>:</p> <pre><code>&lt;?php\n// Bucle ascendente\nfor ($i = 1; $i &lt;= 10; $i++) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n\n// Bucle descendente\nfor ($i = 10; $i &gt;= 0; $i--) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos el bucle <code>foreach</code> para recorrer arrays.</p> <p>PHP, del mismo modo que Java y C, permite romper los bucles mediante la instrucci\u00f3n <code>break</code>. A su vez, <code>continue</code> permite saltar a la siguiente iteraci\u00f3n.</p> <p>Si puedes, evita <code>break</code> y <code>continue</code></p> <p>Personalmente, no me gusta su uso. Prefiero el uso de variables flag para controlar la salida de los bucles. Por ejemplo:</p> <pre><code>&lt;?php\n$salir = false;\nfor ($i = 1; $i &lt;= 10 &amp;&amp; !$salir; $i++) {\n  if ($i === 5) {\n    echo \"Salgo cuando i=5\";\n    $salir = true;\n  }\n}\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/023_EstructurasControl.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC207 (AEA). (RA2 / CE2d CE2e CE2g CE2h / IC1 / 3p) - Se te solicita un programa que muestre los n\u00fameros pares del 0 al 50 (dentro de una lista desordenada). Una vez realizado, refactoriza para que funcione con inicio y fin.</p> </li> <li> <p>AC208 (AR). (RA2 / CE2d CE2e CE2g CE2h / IC1 / 3p) - Para asegurarse que dominas las matem\u00e1ticas, tu CTO, te solicita un programa que sume los n\u00fameros del 1 al 10. Una vez realizado, refactoriza para que funcione con inicio y fin.</p> </li> <li> <p>AC209 (AP). (RA2 / CE2d CE2e CE2g CE2h / IC1 / 3p) - Seguimos en la prueba del dominio de las matem\u00e1ticas. A partir de una base y exponente, mediante la acumulaci\u00f3n de productos, calcula la potencia utilizando la instrucci\u00f3n for. Reescribe el ejercicio anterior haciendo uso s\u00f3lo de while. Reescribe el ejercicio anterior haciendo uso s\u00f3lo de do-while.</p> </li> </ul>"},{"location":"uutt/02_PHP/024_Arrays.html","title":"Arrays","text":"<p>Para almacenar datos compuestos, podemos utilizar tanto arrays sencillos como arrays asociativos (similares a un mapa). En realidad todos los arrays son mapas ordenados compuestos de pares clave-valor.</p> <p>Cuidado con mezclar tipos</p> <p>Como el tipado es din\u00e1mico, nuestros arrays pueden contenedor datos de diferentes tipos. No se recomienda mezclar los tipos.</p> <p>Del mismo modo que Java, se definen mediante corchetes, son 0-index, y se puede asignar un valor a un posici\u00f3n determinada:</p> <pre><code>&lt;?php\n$frutas = array(\"naranja\", \"pera\", \"manzana\");\n\n$frutas2 = [\"naranja\", \"pera\", \"manzana\"];\n\n$frutas3 = [];\n$frutas3[0] = \"naranja\";\n$frutas3[1] = \"pera\";\n$frutas3[] = \"manzana\"; // lo a\u00f1ade al final\n</code></pre> <p>Podemos obtener el tama\u00f1o del array mediante la funci\u00f3n <code>count(array)</code>. Para recorrer el array haremos uso de un bucle <code>for</code>:</p> <pre><code>&lt;?php\n$tam = count($frutas); // tama\u00f1o del array\n\nfor ($i=0; $i&lt;count($frutas); $i++) {\n    echo \"Elemento $i: $frutas[$i] &lt;br /&gt;\";\n}\n</code></pre> <p>Otra forma de recorrer los arrays, incluso m\u00e1s elegante, es hacer uso de <code>foreach</code>. Su sintaxis es <code>foreach (array as elemento)</code>:</p> <pre><code>&lt;?php\n// Mediante foreach no necesitamos saber el tama\u00f1o del array\nforeach ($frutas as $fruta) {\n    echo \"$fruta &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"uutt/02_PHP/024_Arrays.html#arrays-asociativos","title":"Arrays asociativos","text":"<p>Cada elemento es un par clave-valor. En vez de acceder por la posici\u00f3n, lo hacemos mediante una clave. As\u00ed pues, para cada clave se almacena un valor.</p> <p>A la hora de recorrer este tipo de arrays, mediante <code>foreach</code> separamos cada elemento en una pareja <code>clave =&gt; valor</code>:</p> <pre><code>&lt;?php\n$capitales = [\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\"];\n$capitalFrancia = $capitales[\"Francia\"]; // se accede al elemento por la clave, no la posici\u00f3n\n\n$capitales[\"Alemania\"] = \"Berl\u00edn\"; // a\u00f1adimos un elemento\n\necho \"La capital de Francia es $capitalFrancia &lt;br /&gt;\";\necho \"La capital de Francia es {$capitales[\"Francia\"]} &lt;br /&gt;\";\n\n$capitales[] = \"Madrid\"; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1No asignar valores sin clave!!!\n\nforeach ($capitales as $valor) { // si recorremos un array asociativo, mostraremos los valores\n    echo \"$valor &lt;br /&gt;\";\n}\n\nforeach ($capitales as $pais =&gt; $ciudad) { // separamos cada elemento en clave =&gt; valor\n    echo \"$pais : $ciudad &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"uutt/02_PHP/024_Arrays.html#operaciones","title":"Operaciones","text":"<p>Las operaciones m\u00e1s importantes que podemos realizar con arrays son:</p> <ul> <li><code>print_r($array)</code>: muestra el contenido de todo el <code>$array</code>. Si queremos mostrar el contenido con un formato determinado, hemos de recorrer el array con <code>foreach</code>.</li> <li><code>var_dump($mixed)</code>: muestra el contenido del elemento recibido. Muestra m\u00e1s informaci\u00f3n que <code>print_r</code>.</li> <li><code>$elem = array_pop($array)</code>: elimina el \u00faltimo <code>$elemento</code></li> <li><code>array_push($array, $elem)</code>: a\u00f1ade un <code>$elemento</code> al final</li> <li><code>$booleano = in_array($elem, $array)</code>: averigua si <code>$elem</code> est\u00e1 en el <code>$array</code></li> </ul> PHP <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\n\narray_push($frutas, \"pi\u00f1a\");\nprint_r($frutas);\n\n$ultFruta = array_pop($frutas);\nif (in_array(\"pi\u00f1a\", $frutas)) {\n    echo \"&lt;p&gt;Queda pi\u00f1a&lt;/p&gt;\";\n} else {\n    echo \"&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\";\n}\nprint_r($frutas);\n</code></pre> Consola <pre><code>Array\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n  [3] =&gt; pi\u00f1a\n)\n&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\nArray\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n)\n</code></pre> <ul> <li><code>$claves = array_keys($array)</code>: devuelve las claves del <code>$array</code> asociativo</li> <li><code>$tam = count($array)</code>: devuelve el tama\u00f1o de <code>$array</code></li> <li><code>sort($array)</code>: ordena los elementos del <code>$array</code></li> <li><code>isset($array[elemento])</code>: indica si existe/tiene valor elemento dentro del array</li> <li><code>unset($array[elemento])</code>: elimina el elemento del array (deja un hueco)</li> </ul> PHP <pre><code>&lt;?php\n$capitales = array(\"Italia\" =&gt; \"Roma\",\n\"Francia\" =&gt; \"Paris\",\n\"Portugal\" =&gt; \"Lisboa\");\n\n$paises = array_keys($capitales);\nprint_r($paises);\nsort($paises);\nprint_r($paises);\n\nunset($capitales[\"Francia\"]);\nprint_r($capitales);\n</code></pre> Consola <pre><code>Array\n(\n  [0] =&gt; Italia\n  [1] =&gt; Francia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [0] =&gt; Francia\n  [1] =&gt; Italia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [Italia] =&gt; Roma\n  [Portugal] =&gt; Lisboa\n)\n</code></pre> <p>Al asignar un array a otro se realiza una copia. Cuidado con esta operaci\u00f3n que puede consumir muchos recursos.</p> PHP <pre><code>&lt;?php\n$nombres = [\"Juan\", \"Ana\", \"Pedro\", \"Laura\"];\n$copia = $nombres;\nsort($nombres);\nprint_r($nombres);\nprint_r($copia);\n</code></pre> Consola <pre><code>Array\n(\n    [0] =&gt; Ana\n    [1] =&gt; Juan\n    [2] =&gt; Laura\n    [3] =&gt; Pedro\n)\nArray\n(\n    [0] =&gt; Juan\n    [1] =&gt; Ana\n    [2] =&gt; Pedro\n    [3] =&gt; Laura\n)\n</code></pre> <p>Existen much\u00edsimas m\u00e1s funciones para trabajar con arrays. Puedes consultar roda la informaci\u00f3n en la documentaci\u00f3n oficial.</p> <p>Art\u00edculos para profundizar en las operaciones con arrays</p> <ul> <li>Un art\u00edculo muy completo (en ingl\u00e9s) de C\u00f3mo trabajar con arrays en PHP de la manera correcta.  </li> <li>Otro art\u00edculo recomendable (en ingl\u00e9s) es C\u00f3mo ordenar arrays en PHP.</li> </ul>"},{"location":"uutt/02_PHP/024_Arrays.html#arrays-bidimensionales","title":"Arrays bidimensionales","text":"<p>Consiste en un array de arrays, ya sean arrays secuenciales o asociativos. Puede haber N dimensiones.</p> <pre><code>&lt;?php\n$persona[\"nombre\"] = \"Bruce Wayne\";\n$persona[\"telefonos\"] = [\"966 123 456\", \"636 636 636\"]; // array de arrays ordinarios\n$persona[\"profesion\"] = [\"dia\" =&gt; \"fil\u00e1ntropo\", \"noche\" =&gt; \"caballero oscuro\"]; // array de arrays asociativos\n\necho $persona['nombre'].\" por la noche trabaja de \".$persona['profesion']['noche'];\n</code></pre> <p>Combinando los arrays asociativos en varias dimensiones podemos almacenar la informaci\u00f3n como si fuera una tabla:</p> <pre><code>&lt;?php\n$menu1 = [\"Plato1\" =&gt; \"Macarrones con queso\", \"Plato2\" =&gt; \"Pescado asado\", \"Bebida\" =&gt; \"Coca-Cola\", \"Postre\" =&gt; \"Helado de vainilla\"];\n$menu2 = [\"Plato1\" =&gt; \"Sopa\", \"Plato2\" =&gt; \"Lomo con patatas\", \"Bebida\" =&gt; \"Agua\", \"Postre\" =&gt; \"Arroz con leche\"];\n$menus = [$menu1, $menu2]; // creamos un array a partir de arrays asociativos\n\nforeach ($menus as $menudeldia) {\n  echo \"Men\u00fa del d\u00eda&lt;br/&gt;\";\n\n  foreach ($menudeldia as $platos =&gt; $comida) {\n    echo \"$platos: $comida &lt;br/&gt;\";\n  }\n}\n\n// Para acceder a un elemento concreto se anidan los corchetes\n$postre0 = $menus[0][\"Postre\"];\n</code></pre> <p>Aunque pueda parecer una buena idea crear este tipo de estructuras, es mejor utilizar objetos conjuntamente con arrays (posiblemente arrays de otros objetos) para crear estructuras complejas que permitan modelar mejor los problemas.</p>"},{"location":"uutt/02_PHP/024_Arrays.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC210 (AEA). (RA3 / CE3a CE3b CE3c CE3g / IC1 / 3p) - Rellena un array con 50 n\u00fameros aleatorios comprendidos entre el 0 y el 99, y luego mu\u00e9stralo en una lista desordenada. Para crear un n\u00famero aleatorio, utiliza la funci\u00f3n rand(inicio, fin)</p> </li> <li> <p>AC211 (AP). (RA3 / CE3a CE3b CE3c CE3e CE3g / IC1 / 3p) - En la oficinas de Docentes Asociados S.A. necesitan hacer uso de una bola que les ayude a tomar decisiones, la famosa Bola 8 m\u00e1gica. Para ello, prepara un formulario con un caja de texto que realice a una pregunta al usuario. A partir del anterior, crea un programa que muestre la pregunta recibida y genere una respuesta de manera aleatoria entre un conjunto de respuestas predefinidas, almacenadas en un array: Si, no, quiz\u00e1s, claro que s\u00ed, por supuesto que no, no lo tengo claro, seguro, yo dir\u00eda que s\u00ed, ni de co\u00f1a, etc...</p> </li> <li> <p>AC212 (AP). (RA3 / CE3a CE3b CE3c CE3g / IC1 / 3p) - Te solicitan aumentar la complejidad de AC204. Para ello, tu CTO, te solicita que lo vuelvas a realizar pero haciendo uso de arrays y un bucle. Almacena el resultado en un array asociativo. Muestra el resultado en una lista desordenada \u00fanicamente con las cantidades que tienen alg\u00fan valor.</p> </li> <li> <p>AC213 (AR). (RA3 / CE3a CE3b CE3c CE3g / IC1 / 3p) - Rellena un array bidimensional de 6 filas por 9 columnas con n\u00fameros aleatorios comprendidos entre 100 y 999 (ambos incluidos). Todos los n\u00fameros deben ser distintos, es decir, no se puede repetir ninguno. Muestra a continuaci\u00f3n por pantalla el contenido del array de tal forma que:</p> <ul> <li>La columna del m\u00e1ximo debe aparecer en azul.</li> <li>La fila del m\u00ednimo debe aparecer en verde</li> <li>El resto de nu\u0301meros deben aparecer en negro.</li> </ul> </li> </ul>"},{"location":"uutt/02_PHP/025_Funciones.html","title":"Programaci\u00f3n Modular (Funciones)","text":"<p>Al no declararse los tipos de datos, los par\u00e1metros de las funciones no tienen tipo ni se indica el tipo de dato que devuelven. El paso de par\u00e1metros se realiza por valor, es decir, se realiza una copia de la variable.</p> <pre><code>&lt;?php\nfunction nombreFuncion($par1, $par2, ...) {\n  // c\u00f3digo\n  return $valor;\n}\n\n$resultado = nombreFuncion($arg1, $arg2, \u2026);\n?&gt;\n</code></pre> <p>Por ejemplo:</p> <pre><code>&lt;?php\nfunction diaSemana() {\n    $semana = [ \"lunes\", \"martes\", \"mi\u00e9rcoles\",\n        \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\" ];\n    $dia = $semana[rand(0, 6)];\n    return $dia;\n}\n\n$diaCine = diaSemana();\necho \"El pr\u00f3ximo $diaCine voy al cine.\";\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#parametros","title":"Par\u00e1metros","text":""},{"location":"uutt/02_PHP/025_Funciones.html#parametros-por-referencia","title":"Par\u00e1metros por referencia","text":"<p>Si queremos pasar un par\u00e1metro por referencia, en la declaraci\u00f3n de la funci\u00f3n, indicaremos los par\u00e1metros mediante el operador <code>&amp;</code> para indicar la direcci\u00f3n de memoria de la variable.</p> <pre><code>&lt;?php\nfunction duplicarPorValor($argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\nfunction duplicarPorReferencia(&amp;$argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\n\n$numero1 = 5;\necho \"Antes de llamar: $numero1.&lt;br&gt;\";\nduplicarPorValor($numero1);\necho \"Despu\u00e9s de llamar: $numero1.&lt;br&gt;\";\necho \"&lt;br&gt;\";\n\n$numero2 = 7;\necho \"Antes de llamar: $numero2.&lt;br&gt;\";\nduplicarPorReferencia($numero2);\necho \"Despu\u00e9s de llamar: $numero2.&lt;br&gt;\";\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#parametros-por-defecto-opcionales","title":"Par\u00e1metros por defecto / opcionales","text":"<p>Permiten asignar valores en la declaraci\u00f3n, y posteriormente, dejar el argumento en blanco.</p> <pre><code>&lt;?php\nfunction obtenerCapital($pais = \"todos\") {\n    $capitales = array(\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\");\n\n    if ($pais == \"todos\") {\n        return array_values($capitales);\n    } else {\n        return $capitales[$pais];\n    }\n}\n\nprint_r(obtenerCapital());\necho \"&lt;br/&gt;\";\necho obtenerCapital(\"Francia\");\n</code></pre> <p>En el caso de convivir con otro tipo de par\u00e1metros, los par\u00e1metros que tienen el valor asignado por defecto siempre se colocan al final.</p> <pre><code>&lt;?php\nfunction saluda($nombre, $prefijo = \"Sr\") {\n    echo \"Hola \".$prefijo.\" \".$nombre;\n}\n\nsaluda(\"Gin\u00e9s\", \"Mr\");\nsaluda(\"L\u00f3pez\");\nsaluda(\"Lola\", \"Srta\");\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#parametros-variables","title":"Par\u00e1metros variables","text":"<p>Podemos tener funciones donde en la declaraci\u00f3n no indiquemos la cantidad de datos de entrada.</p> <ul> <li><code>$arrayArgs = func_get_args();</code> --&gt; Obtiene un array con los par\u00e1metros</li> <li><code>$cantidad = func_num_args();</code> --&gt; Obtiene la cantidad de par\u00e1metros recibidos</li> <li><code>$valor = func_get_arg(numArgumento);</code> --&gt; Obtiene el par\u00e1metro que ocupa la posici\u00f3n <code>numArgumento</code>.</li> </ul> <p>Estas funciones no se pueden pasar como par\u00e1metro a otra funci\u00f3n (como funciones variable, que veremos m\u00e1s adelante). Para ello, debemos guardar previamente la funci\u00f3n en una variable.</p> <pre><code>&lt;?php\nfunction sumaParametros() {\n    if (func_num_args() == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        for ($i = 0; $i &lt; func_num_args(); $i++) {\n            $suma += func_get_arg($i);\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametros(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>Desde PHP 5.6, se puede utilizar el operador <code>...</code> (variadics) el cual \"disfraza\" los par\u00e1metros como un array:</p> <pre><code>&lt;?php\nfunction sumaParametrosMejor(...$numeros) {\n    if (count($numeros) == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        foreach ($numeros as $num) {\n            $suma += $num;\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametrosMejor(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>M\u00e1s usos de <code>...</code></p> <p>Tambi\u00e9n se puede utilizar para dividir un array en variables separadas para proporcionar argumentos</p> <pre><code>&lt;?php\nfunction suma($a, $b) {\n    return $a + $b;\n}\n\necho suma(...[1, 5]).\"&lt;br /&gt;\";\n\n$a = [1, 5];\necho suma(...$a);\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#argumentos-con-nombre","title":"Argumentos con nombre","text":"<p>Desde PHP 8.0 podemos pasar los argumentos con el nombre (adem\u00e1s de por posici\u00f3n, como hemos hecho hasta ahora). Los argumentos con nombre se pasan poniendo el nombre como prefijo del par\u00e1metros separado por dos puntos: <code>$resultado = funcion( arg1 : valor1, arg2 : valor2);</code></p> <p>Esta caracter\u00edstica complementa los parametros opcionales permitiendonos saltar su valor:</p> <pre><code>&lt;?php\nfunction funcionArgumentosNombre($a, $b = 2, $c = 4) {\n\u00a0\u00a0echo \"$a $b $c\";\n}\nfuncionArgumentosNombre(c: 3, a: 1); // \"1 2 3\"\n</code></pre> <p>Tanto los par\u00e1metros opcionales como los obligatorios pueden tener nombre, pero lo argumentos con nombre se tienen que poner despu\u00e9s de los que no lo tienen.</p> <pre><code>&lt;?php\nfuncionArgumentosNombre(1, c: 3); // \"1 2 3\"\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#funciones-tipadas","title":"Funciones tipadas","text":"<p>Desde PHP7 en las funciones, tanto los par\u00e1metro como su devoluci\u00f3n, permiten la definici\u00f3n de tipos. Esto se conoce como strict_types (tipificaci\u00f3n estricta) y hay que definirlo en la primera l\u00ednea de cada archivo <code>.php</code> para que el propio interprete PHP compruebe los tipos y lance errores si los tipos son incorrectos, mediante la sentencia</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n</code></pre> <p>As\u00ed pues, vamos a  definir los tipos de los par\u00e1metros y de los valores devueltos mediante los tipos: <code>int</code>, <code>float</code>, <code>string</code>, <code>bool</code>, <code>object</code> y <code>array</code>.</p> <p>Si una funci\u00f3n no devuelve nada se indica mediante el tipo <code>void</code>.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\n$num = 33;\necho suma(10, 30);\necho suma(10, $num);\necho suma(\"10\", 30); // error por tipificaci\u00f3n estricta, sino dar\u00eda 40\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#alcance-o-scope","title":"Alcance o scope","text":"<p>Las variables definidas fuera de las funciones tienen alcance global: accesibles desde cualquier funci\u00f3n. Los par\u00e1metros de una funci\u00f3n y las variables declaradas dentro de una funci\u00f3n (se conocen como variables locales) s\u00f3lo son accesibles desde dentro de la misma funci\u00f3n \u2192 alcance de funci\u00f3n.</p> <p>En caso de conflicto, tienen prioridad las variables locales. Para evitar el conflicto, dentro de la funci\u00f3n, podemos declarar la variable como <code>global</code>.</p> Alcance local <pre><code>&lt;?php\nfunction miCiudad() {\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de la funci\u00f3n: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de la funci\u00f3n: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> Alcance global <pre><code>&lt;?php\nfunction miCiudad() {\n    global $ciudad;\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de llamar: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de llamar: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <p>No globales</p> <p>Por favor, hay que evitar el uso de variables globales dentro de las funciones. En el caso de necesitarlas, es mejor pasarlas como par\u00e1metro a las funciones.</p>"},{"location":"uutt/02_PHP/025_Funciones.html#funciones-variable","title":"Funciones variable","text":"<ul> <li>Permite asignar una funci\u00f3n a una variable.</li> <li>Nombre de la funci\u00f3n entre comillas.</li> <li>Si una variable va seguida de par\u00e9ntesis, PHP buscar\u00e1 una funci\u00f3n con su valor.</li> </ul> <pre><code>&lt;?php\n$miFuncionSuma = \"suma\";\necho $miFuncionSuma(3,4); // invoca a la funci\u00f3n suma\n?&gt;\n</code></pre> <p>Funciones an\u00f3nimas</p> <p>PHP permite la definici\u00f3n y uso de funciones an\u00f3nimas, es decir, funciones que no tienen nombre, y se utilizan principalmente para gestionar los callbacks. Este tipo de funciones se utiliza mucho en Javascript para gestionar los eventos y promesas.</p> <pre><code>&lt;?php\n$anonima = function() {\n    echo \"Hola\";\n};\n$anonima();\n\n$anonimaConParametro = function($nombre) {\n    echo \"Hola \".$nombre;\n};\n$anonimaConParametro(\"Gin\u00e9s\");\n\n// Uso de variables externas a la funci\u00f3n an\u00f3nima --&gt; `use`\n$mensaje = \"Hola\";\n$miClosure = function() use ($mensaje) {\n    echo $mensaje;\n};\n$miClosure();\n\n// Uso de par\u00e1metros\n$holaPHP = function($arg) use ($mensaje) {\n    echo $mensaje.\" \".$arg;\n};\n$holaPHP(\"PHP\");\n?&gt;\n</code></pre> <p>Desde PHP 7.4 se han introducido las funciones flecha (arrow functions) para simplificar su definici\u00f3n y uso.</p> <p>Ten\u00e9is m\u00e1s informaci\u00f3n sobre funciones an\u00f3nimas y flecha en el siguiente art\u00edculo (en ingl\u00e9s): Funciones an\u00f3nimas y flecha en PHP</p>"},{"location":"uutt/02_PHP/025_Funciones.html#biblioteca-de-funciones","title":"Biblioteca de funciones","text":"<p>Podemos agrupar un conjunto de funciones en un archivo, para permitir su reutilizaci\u00f3n. Posteriormente, se incluye con:</p> <ul> <li><code>include(archivo);</code> / <code>include_once(archivo);</code></li> <li><code>require(archivo);</code> / <code>require_once(archivo);</code></li> </ul> <p>Si no encuentra el archivo, <code>require</code> lanza un error fatal, <code>include</code> lo ignora Las funciones <code>_once</code> s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</p> <p>Por ejemplo, colocamos las funciones en el archivo <code>biblioteca.php</code>:</p> <pre><code>&lt;?php\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\nfunction resta(int $a, int $b) : int {\n    return $a - $b;\n}\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo:</p> <pre><code>&lt;?php \ninclude_once(\"biblioteca.php\");\necho suma(10,20);\necho resta(40,20);\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#plantillas-mediante-include","title":"Plantillas mediante <code>include</code>","text":"<p>Mediante el uso de la instrucci\u00f3n <code>include</code> tambi\u00e9n podemos separar fragmentos de c\u00f3digo PHP/HTML que queramos reutilizar en nuestros sitios web y crear un sistema muy sencillo de plantillas. Por ejemplo, vamos a separar una p\u00e1gina en tres partes, primero la parte superior en <code>encabezado.php</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;&lt;?= $titulo ?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n</code></pre> <p>La parte de abajo, por ejemplo, solo va a contener HTML y la colocamos en <code>pie.html</code>: <pre><code>&lt;footer&gt;Gin\u00e9s L\u00f3pez&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Y luego nos centramos \u00fanicamente en el contenido que cambia en <code>pagina.php</code>:</p> <pre><code>&lt;?php\n$titulo = \"P\u00e1gina con includes\";\ninclude(\"encabezado.php\");\n?&gt;\n&lt;h1&gt;&lt;?= $titulo ?&gt;&lt;/h1&gt;\n&lt;?php\ninclude(\"pie.html\");\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC214 (AEA). (RA3 / CE3a CE3b CE3d CE3g / IC1 / 3p) - Tu CTO te recomienda que empieces a generar tu propia librer\u00eda de funciones. Para ello te propone que generes las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que averig\u00fce si un n\u00famero es par: <code>esPar(int $num): bool</code></li> <li>Una funci\u00f3n que devuelva un array de tama\u00f1o $tam con n\u00fameros aleatorios comprendido entre <code>$min</code> y <code>$max</code> : <code>arrayAleatorio(int $tam, int $min, int $max) : array</code></li> <li>Una funci\u00f3n que reciba un $array por referencia y devuelva la cantidad de n\u00fameros pares que hay almacenados: <code>arrayPares(array &amp;$array): int</code></li> </ul> </li> <li> <p>AC215 (AEA). (RA3 / CE3a CE3b CE3d CE3g / IC1 / 3p) - Has de seguir aumentando tu librer\u00eda, para ello te solicitan las siguientes funciones:</p> <ul> <li><code>digitos(int $num): int</code> \u2192 devuelve la cantidad de d\u00edgitos de un n\u00famero.</li> <li><code>digitoN(int $num, int $pos): int</code> \u2192 devuelve el d\u00edgito que ocupa, empezando por la izquierda, la posici\u00f3n <code>$pos</code>.</li> <li><code>quitaPorDetras(int $num, int $cant): int</code> \u2192 le quita por detr\u00e1s (derecha) <code>$cant</code> d\u00edgitos.</li> <li><code>quitaPorDelante(int $num, int $cant): int</code> \u2192 le quita por delante (izquierda) <code>$cant</code> d\u00edgitos.</li> </ul> </li> <li> <p>PR201 (AR). (RA3 / CE3a CE3b CE3d CE3g / IC1 / 3p) - Desde Docentes Asociados S.A necesitan ver algo de l\u00f3gica de un proceso de compra. Para ello, a partir de una cantidad de productos, leer el nombre y coste de la cantidad de productos indicados. Tras leer los datos del tiquet de compra, enumera en una tabla los productos, con su precio en euros y pesetas, y finalmente, en una \u00faltima fila, totalizar en ambas monedas.</p> </li> <li> <p>PR202 (AP). (RA2 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Siguiendo con la actividad anterior, crea una plantilla mediante includes:</p> <ul> <li>El encabezado (Supermercado Asociado en h1) </li> <li>El pie (Tu supermercado de confianza) </li> <li>Un fichero, que incluya el encabezado y el pie, que nos prepare la compra.</li> <li>Un fichero, que incluya el encabezado y el pie, que nos imprima el ticket de la compra.</li> </ul> </li> <li> <p>PR203 (AP). (RA2 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Se te solicita generar un sistema de acceso sencillo para el instituto. Para ello has de codificar el siguiente programa:</p> <ul> <li>login.php: el formulario de entrada, que solicita el usuario y contrase\u00f1a.</li> <li>compruebaLogin.php: recibe los datos y comprueba si son correctos (los usuarios se guardan en un array asociativo) pasando el control mediante el uso de include a:<ul> <li>ok.php: El usuario introducido es correcto</li> <li>ko.php: El usuario es incorrecto. Informar si ambos est\u00e1n mal o solo la contrase\u00f1a. Volver a mostrar el formulario de acceso.</li> </ul> </li> </ul> </li> </ul>"},{"location":"uutt/02_PHP/026_Strings.html","title":"Strings","text":"<p>Ya hemos visto que se pueden crear con comillas simples (<code>''</code>, sin interpretaci\u00f3n) o comillas dobles (<code>\"\"</code>, interpretan el contenido y las secuencias de escape <code>\\n</code>, <code>\\t</code>, <code>\\$</code>, <code>{</code>, \u2026 - magic quotes)</p> <pre><code>&lt;?php\n\"Me llamo $nombre\"\n\"Son 30 {$moneda}s\"\n?&gt;\n</code></pre> <p>Se acceden a los caracteres como si fuera un array.</p> <pre><code>&lt;?php\n$cadena = \u201cYo soy Batman\u201d;\n$ygriega = $cadena[0];\n?&gt;\n</code></pre> <p>Adem\u00e1s de <code>echo</code>, podemos mostrar las cadenas mediante la funci\u00f3n <code>printf</code>. Esta funci\u00f3n viene heredada del lenguaje C, y en la cadena se indica el tipo de dato a formatear y genera una salida formateada. Si quiero guardar el resultado en una variable, podemos utilizar <code>sprintf</code>.</p> <pre><code>&lt;?php\n$num = 33;\n$nombre = \"Larry Bird\";\nprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num); // %d -&gt; n\u00famero decimal, %s -&gt; string\n$frase = sprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num);\necho $frase\n?&gt;\n</code></pre> <p>Ten\u00e9is muchos m\u00e1s ejemplos en https://www.w3schools.com/php/func_string_printf.asp</p>"},{"location":"uutt/02_PHP/026_Strings.html#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":"<p>Todas las funciones se pueden consultar en https://www.php.net/manual/es/ref.strings.php</p> <p>Las m\u00e1s importantes son:</p> <ul> <li><code>strlen</code>: obtiene la longitud de una cadena y devuelve un n\u00famero entero</li> <li><code>substr</code>: devuelve una subcadena de la cadena original</li> <li><code>str_replace</code>: reemplaza caracteres en una cadena</li> <li><code>strtolower</code> y <code>strtoupper</code>: Transforman una cadena de caracteres en la misma cadena en min\u00fasculas o may\u00fasculas respectivamente.</li> </ul> <pre><code>&lt;?php\n$cadena = \"El caballero oscuro\";\n$tam = strlen($cadena);\necho \"La longitud de '$cadena' es: $tam &lt;br /&gt;\";\n\n$oscuro = substr($cadena, 13); // desde 13 al final\n$caba = substr($cadena, 3, 4); // desde 3, 4 letras\n$katman = str_replace(\"c\", \"k\", $cadena);\necho \"$oscuro $caba ahora es $katman\";\n\necho \"Grande \".strtoupper($cadena);\n?&gt;\n</code></pre> <p>Si queremos trabajar con caracteres ASCII de forma individual, son \u00fatiles las funciones:</p> <ul> <li><code>chr</code>: obtiene el car\u00e1cter a partir de un ASCII</li> <li><code>ord</code>: obtiene el ASCII de un car\u00e1cter</li> </ul> <pre><code>&lt;?php\nfunction despues(string $letra): string {\n    $asciiLetra = ord($letra);\n    return chr($asciiLetra + 1);\n}\n\necho despues(\"B\");\n?&gt;\n</code></pre> <p>Si queremos limpiar cadenas, tenemos las funciones:</p> <ul> <li><code>trim</code>: elimina los espacios al principio y al final</li> <li><code>ltrim</code> / <code>rtrim</code> o <code>chop</code>: Elimina los espacios iniciales / finales de una cadena.</li> <li><code>str_pad</code>: rellena la cadenas hasta una longitud especificada y con el car\u00e1cter o caracteres especificados.</li> </ul> <pre><code>&lt;?php\n$cadena = \" Programando en PHP \";\n$limpia = trim($cadena); // \"Programando en PHP\"\n\n$sucia = str_pad($limpia, 23, \".\"); // \"Programando en PHP.....\"\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/026_Strings.html#comparando-y-buscando","title":"Comparando y buscando","text":"<p>La comparaci\u00f3n de cadenas puede ser con conversi\u00f3n de tipos mediante <code>==</code> o estricta con <code>===</code>. Tambi\u00e9n funcionan los operadores <code>&lt;</code> y <code>&gt;</code> si ambas son cadenas. Al comparar cadenas con valores numericos podemos utilizar:</p> <ul> <li><code>strcmp</code>: 0 iguales, &lt;0 si <code>a&lt;b</code> o &gt;0 si <code>a&gt;b</code></li> <li><code>strcasecmp</code>: las pasa a min\u00fasculas y compara</li> <li><code>strncmp</code> / <code>strncasecmp</code>: compara los N primeros caracteres</li> <li><code>strnatcmp</code>: comparaciones naturales</li> </ul> <pre><code>&lt;?php\n$frase1 = \"Alfa\";\n$frase2 = \"Alfa\";\n$frase3 = \"Beta\";\n$frase4 = \"Alfa5\";\n$frase5 = \"Alfa10\";\n\nvar_dump( $frase1 == $frase2 ); // true\nvar_dump( $frase1 === $frase2 ); // true\nvar_dump( strcmp($frase1, $frase2) ); // 0\nvar_dump( strncmp($frase1, $frase5, 3) ); // 0\nvar_dump( $frase2 &lt; $frase3 ); // true\nvar_dump( strcmp($frase2, $frase3) ); // -1\nvar_dump( $frase4 &lt; $frase5 ); // false\nvar_dump( strcmp($frase4, $frase5) ); // 4 \u2192 f4 &gt; f5\nvar_dump( strnatcmp($frase4, $frase5) ); // -1 \u2192 f4 &lt; f5\n?&gt;\n</code></pre> <p>Si lo que queremos es buscar dentro de una cadena, tenemos:</p> <ul> <li><code>strpos</code> / <code>strrpos</code>: busca en una cadena y devuelve la posici\u00f3n de la primera/\u00faltima ocurrencia.</li> <li><code>strstr</code> / <code>strchr (alias)</code>: busca una cadena y devuelve la subcadena a partir de donde la ha encontrado</li> <li><code>stristr</code>: ignora las may\u00fasculas</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$pos1 = strpos($frase, \",\"); // encuentra la primera coma\n$pos2 = strrpos($frase, \",\"); // encuentra la \u00faltima coma\n$trasComa = strstr($frase, \",\"); // \", eso dicen, a veces\"\n?&gt;\n</code></pre> <p>Si queremos averiguar que contiene las cadenas, tenemos un conojunto de funciones de comprobaciones de tipo, se conocen como las funciones ctype que devuelven un booleano:</p> <ul> <li><code>ctype_alpha</code> \u2192 letras</li> <li><code>ctype_alnum</code> \u2192 alfanum\u00e9ricos</li> <li><code>ctype_digit</code> \u2192 d\u00edgitos</li> <li><code>ctype_punct</code> \u2192 caracteres de puntuaci\u00f3n, sin espacios</li> <li><code>ctype_space</code> \u2192 son espacios, tabulador, salto de l\u00ednea</li> </ul> <pre><code>&lt;?php\n$prueba1 = \"hola\";\n$prueba2 = \"hola33\";\n$prueba3 = \"33\";\n$prueba4 = \",.()[]\";\n$prueba5 = \" ,.()[]\";\n\necho ctype_alpha($prueba1).\"&lt;br&gt;\"; // true\necho ctype_alnum($prueba2).\"&lt;br&gt;\"; // true\necho ctype_digit($prueba3).\"&lt;br&gt;\"; // true\necho ctype_punct($prueba4).\"&lt;br&gt;\"; // true\necho ctype_space($prueba5).\"&lt;br&gt;\"; // false\necho ctype_space($prueba5[0]).\"&lt;br&gt;\"; // true\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/026_Strings.html#trabajando-con-subcadenas","title":"Trabajando con subcadenas","text":"<p>Si queremos romper las cadenas en trozos, tenemos:</p> <ul> <li><code>explode</code>: convierte en array la cadena mediante un separador.</li> <li><code>implode</code> / <code>join</code>: pasa un array a cadena con un separador</li> <li><code>str_split</code> / <code>chunk_split</code>: pasa una cadena a una array/cadena cada X caracteres</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$partes = explode(\",\", $frase);\n\n$ciudades = [\"Elche\", \"Aspe\", \"Alicante\"];\n$cadenaCiudades = implode(\"&gt;\", $ciudades);\n\n$partes3cadena = chunk_split($frase, 3);\n// Qui \n// en \n// bus \n// ca \n// ...\n$partes3array = str_split($frase, 3);\n// [\"Qui\", \"en \", \"bus\", \"ca \", \"enc\", \u2026] \n?&gt;\n</code></pre> <p>Si queremos trabajar con tokens:</p> <ul> <li><code>strtok(cadena, separador)</code></li> <li>y dentro del bucle: <code>strtok(separador)</code></li> </ul> <p>Finalmente, para separarla en base al formato:</p> <ul> <li><code>sscanf</code>: al rev\u00e9s que <code>sprintf</code>, crea un array a partir de la cadena y el patr\u00f3n.</li> </ul> <p>Finalmente, otras operaciones que podemos realizar para trabajar con subcadenas son:</p> <ul> <li><code>substr_count</code>: n\u00famero de veces que aparece la subcadena dentro de la cadena</li> <li><code>substr_replace</code>: reemplaza parte de la cadena a partir de su posici\u00f3n, y opcionalmente, longitud</li> </ul> <pre><code>&lt;?php\n$batman = \"Bruce Wayne es Batman\";\n$empresa = substr($batman, 6, 5); // Wayne\n$bes = substr_count($batman, \"B\"); // 2\n// Bruce Wayne es camarero\n$camarero1 = substr_replace($batman, \"camarero\", 15);\n$camarero2 = substr_replace($batman, \"camarero\", -6); // quita 6 desde el final\n// Bruno es Batman\n$bruno = substr_replace($batman, \"Bruno\", 0, 11);\n?&gt;\n</code></pre> <p>Tambi\u00e9n disponemos de una serie de funciones que facilitan las codificaciones desde y hacia HTML:</p> <ul> <li><code>htmlentities</code>: convierte a entidades HTML, por ejemplo, <code>\u00e1</code> por <code>&amp;aacute;</code>,  <code>\u00f1</code> por <code>&amp;ntilde;</code>, <code>&lt;</code> por <code>&amp;lt;</code>, etc..</li> <li><code>htmlspecialchars</code>: idem pero solo con los caracteres especiales (<code>&amp;</code>, <code>\"</code>, <code>'</code>, <code>&lt;</code>, <code>&gt;</code>, ...)</li> <li><code>striptags</code>: elimina etiquetas HTML.</li> <li><code>nl2br</code>: cambia saltos de l\u00ednea por <code>&lt;br /&gt;</code>.</li> <li><code>rawurlencode</code> / <code>rawurldecode</code>: codifica/decodifica una URL (espacios, ...).</li> </ul> <p>Estas funciones las utilizaremos en la unidad 4.- Programaci\u00f3n Web.</p>"},{"location":"uutt/02_PHP/027_OperacionesMatematicas.html","title":"Operaciones Matem\u00e1ticas","text":"<p>Disponemos tanto de constantes como funciones ya definidas para trabajar con operaciones matem\u00e1ticas: https://www.php.net/manual/es/ref.math.php</p> <ul> <li>Constantes ya definidas<ul> <li><code>M_PI</code>, <code>M_E</code>, <code>M_EULER</code>, <code>M_LN2</code>, <code>M_LOG2E</code></li> <li><code>PHP_INT_MAX</code>, <code>PHP_FLOAT_MAX</code></li> </ul> </li> <li>Funciones de c\u00e1lculo<ul> <li><code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>decbin</code>, <code>bindec</code>, <code>decoct</code>, <code>dechex</code>, <code>base_convert</code>, <code>max</code>, <code>min</code></li> </ul> </li> <li>Funciones trigonom\u00e9tricas<ul> <li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>deg2rad</code>, <code>rad2deg</code></li> </ul> </li> <li>Funciones para trabajar con n\u00fameros aleatorios<ul> <li><code>rand</code>, <code>mt_rand</code> (m\u00e1s r\u00e1pida)</li> </ul> </li> </ul> <p>Aunque la mayor\u00eda de ellas son muy espec\u00edficas de problemas matem\u00e1ticos / estad\u00edsticos, es muy com\u00fan que tengamos que redondear y/o formatear los c\u00e1lculos antes de mostrarlos al usuario.</p> <p>Mediante la funci\u00f3n <code>number_format(numero, cantidadDecimales, separadorDecimales, separadorMiles)</code> podermos pasar n\u00fameros a cadena con decimales y/o separadores de decimales y/o de miles.</p> <pre><code>&lt;?php\n$nf = 1234.5678;\necho number_format($nf, 2); // 1,234.57\necho number_format($nf, 2, \"M\", \"#\"); // 1#234M57\n?&gt;\n</code></pre> <p>Para redondear, tenemos <code>abs</code> para el valor absoluto y <code>round</code> para redondear, <code>ceil</code> para aproximaci\u00f3n por exceso y <code>floor</code> por defecto.</p> <pre><code>&lt;?php\n$num = 7.7;\n$siete = floor($num);\n$ocho = ceil($num);\n\n$otro = 4.49;\n$cuatro = round($otro);\n$cuatrocinco = round($otro, 1);\n$cinco = round($cuatrocinco);\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/027_OperacionesMatematicas.html#actividades","title":"Actividades","text":"<ul> <li>AC216 (AEA). (RA3 / CE3a CE3b CE3d / IC1 / 3p) - Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo ax\u00b2 + bx + c = 0. Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n dependiendo del valor del discriminante b\u00b2-4ac.</li> </ul>"},{"location":"uutt/02_PHP/028_Formularios.html","title":"Formularios","text":"<p>Los datos se env\u00edan via URL con el formato <code>var1=valor1&amp;var2=valor2\u2026</code>. Por ejemplo: <code>ejemplo.php?nombre=Bruce+apellido1=Wayne</code></p> <p>Se divide en dos pasos:</p> <ol> <li>Generar un formulario con <code>action='archivo.php' method='GET'</code></li> <li>En el archivo <code>.php</code> leer los datos con <code>$_GET['nombreVar']</code></li> </ol> <p>Vamos a separar siempre que podamos el c\u00f3digo HTML del de PHP. Por ejemplo, el formulario lo colocamos en <code>saluda.html</code>:</p> <pre><code>&lt;form action=\"saluda.php\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt; \n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"submit\" value=\"enviar\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Y recogemos los datos en <code>saluda.php</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET[\"nombre\"];\n$apellido1 = $_GET[\"apellido1\"];\n\necho \"Hola $nombre $apellido1\";\n?&gt;\n</code></pre> <p>Si lo quisi\u00e9ramos realizar todo en un \u00fanico archivo (lo cual no es recomendable), podemos hacerlo as\u00ed:</p> <pre><code>&lt;form action=\"\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;input type=\"submit\" value=\"enviar\"&gt;\n&lt;/form&gt;\n&lt;p&gt;\n    &lt;?php\n    if(isset($_GET['nombre'])) {\n        $nombre = $_GET[\"nombre\"];\n        $apellido1 = $_GET[\"apellido1\"];\n\n        echo \"Hola $nombre $apellido1\";\n    }\n    ?&gt;\n&lt;/p&gt;\n</code></pre> <p>El trabajo con formularios lo estudiaremos en profundidad en la unidad 4, y veremos que adem\u00e1s de <code>GET</code>, podemos enviar los datos con <code>POST</code>.</p>"},{"location":"uutt/02_PHP/028_Formularios.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC217 (AEA). (RA3 / CE3a CE3b CE3d CE3e CE3f / IC1 / 3p) - Es hora de revisar tu c\u00f3digo del pasado, para ello retoma la actividad AC203.Ahora, has de generar dos documentos: en el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo.</p> </li> <li> <p>AC218 (AR). (RA3 / CE3a CE3b CE3d CE3e CE3f / IC1 / 3p) - Tu supervisor necesita ver que vas dominando el manejo de formularios, para ello te encarga que generes un programa que tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 67 a\u00f1os. En este caso, no hace falta que previamente crees un formulario.</p> <p>Tip</p> <p><code>$anyoActual = date(\"Y\");</code></p> </li> </ul>"},{"location":"uutt/02_PHP/029_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Manual de PHP</li> <li>Documento: PHP en 2020, por Jes\u00fas Amieiro</li> <li>Web: Apuntes de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia</li> <li>Web: Gu\u00eda de Estilo - PSR</li> <li>Manual: PHP - La manera correcta</li> <li>Web: Desarrollo Web en Entorno Servidor, por Aitor Medrano</li> </ul>"},{"location":"uutt/02_PHP/029_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Novedades de PHP 8.1</li> </ul>"},{"location":"uutt/02_PHP/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/02_PHP/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<p>RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>b. Se han identificado las principales tecnolog\u00edas asociadas.</li> <li>c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>e. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>f. Se han utilizado directivas para modificar el comportamiento predeterminado.</li> <li>g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>h. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ul> <p>RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas.</li> <li>b. Se han utilizado mecanismos para mantener el estado de las aplicaciones web.</li> <li>c. Se han utilizado mecanismos para almacenar informaci\u00f3n en el cliente web y para recuperar su contenido.</li> <li>d. Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios.</li> <li>e. Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.</li> <li>f. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul>"},{"location":"uutt/02_PHP/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 02 01 16/09/2024 <p>Lenguaje Web</p> <ul> <li>El lenguaje PHP</li> </ul> <ul> <li>AC201. Muestra tres frases utilizando PHP.</li> </ul> 02 17/09/2024 <p>Variables, datos y operadores</p> <ul> <li>Variables</li> <li>Constantes</li> <li>Operadores</li> </ul> <ul> <li>AC202. Uso de variables para operaciones b\u00e1sicas.</li> <li>AC203. Almacenar datos personales y mostrar tabla conj ellos.</li> <li>AC204. Desglose de cantidad en billetes y monedas.</li> </ul> 03 18/09/2024 <p>Estructuras de control</p> <ul> <li>Condici\u00f3n</li> <li>Repetici\u00f3n</li> </ul> <ul> <li>AC205. Positivos o negativos</li> <li>AC206. Reloj</li> <li>AC207. N\u00fameros pares en un intervalo.</li> <li>AC208. Suma de n\u00fameros en un intervalo.</li> <li>AC209. Potencias usando estructuras de control</li> </ul> 04 19/09/2024 <p>Arrays</p> <ul> <li>Introducci\u00f3n</li> <li>Arrays Asociativos</li> </ul> <ul> <li>AC210. Rellenar un array en un intervalo</li> <li>AC211. Bola 8 m\u00e1gica</li> </ul> 05 23/09/2024 <p>Arrays</p> <ul> <li>Operaciones</li> <li>Arrays bidimensionales</li> </ul> <ul> <li>AC212. Refactorizar AC204 con arrays y bucles</li> <li>AC213. Manejo de array bidimensional</li> </ul> 06 24/09/2024 <p>Programaci\u00f3n modular</p> <ul> <li>Par\u00e1metros</li> <li>Funciones tipadas</li> <li>Alcance o scope</li> </ul> <ul> <li>AC214. Inicio de librer\u00eda de funciones.</li> <li>AC215. Continuaci\u00f3n de librer\u00eda de funciones.</li> </ul> 07 25/09/2024 <p>Arquitectura web</p> <ul> <li>Funciones variables</li> <li>Biblioteca de funciones</li> <li>Plantillas mediante include</li> </ul> <ul> <li>PR201. Ticket de supermercado.</li> <li>PR202. Ticket de supermercado con include.</li> </ul> 08 26/09/2024 <p>Strings</p> <ul> <li>Definici\u00f3n</li> <li>Operaciones b\u00e1sicas</li> <li>Comparando y buscando</li> <li>Subcadenas</li> </ul> <ul> <li>PR203. Acceso para instituto.</li> </ul> 09 30/09/2024 <p>Operaciones matem\u00e1ticas</p> <ul> <li>Constantes matem\u00e1ticas</li> <li>Funciones</li> </ul> <ul> <li>AC216. Resoluci\u00f3n ecuaci\u00f3n segundo grado</li> </ul> 10 01/10/2024 <p>Formularios</p> <ul> <li>Manejo de formularios</li> </ul> <ul> <li>AC217. Refactorizar AC203 con el uso de formularios.</li> </ul> 11 02/10/2024 <ul> <li>Autoevaluaci\u00f3n</li> </ul> <ul> <li>AC218. C\u00e1lculo edad de jubilaci\u00f3n.</li> </ul> 12 03/10/2024 <p>Prueba de conocimiento</p> <ul> <li>Test</li> </ul> <p>Prueba de conocimiento</p> <ul> <li>Pr\u00e1ctico</li> </ul>"},{"location":"uutt/02_PHP/ResumenUD.html","title":"Resumen UD","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad Did\u00e1ctica:</p>  RESUMEN UNIDAD DID\u00c1CTICA <p>Unidad Did\u00e1ctica</p> <p>UD2.- PHP.</p> <p>Horas</p> <p>12 Sesiones - 24 Horas</p> <p>Resultados de Aprendizaje</p> <p>RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</p> <p>RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>Preconocimiento</p> <p>Conocimientos del m\u00f3dulo de Programaci\u00f3n de 1\u00ba.</p> <p>Objetivos Did\u00e1cticos</p> <p>Competencias Personales y Sociales. Transversales</p> <p> <ul> <li>OD1: Integraci\u00f3n de etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>OD2: Escribir sentencias simples.</li> <li>OD3: Dise\u00f1ar programas simples.</li> </ul> </p> <p>f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones.</p> <p>n. Elaborar y mantener la documentaci\u00f3n de los procesos de desarrollo, utilizando herramientas de generaci\u00f3n de documentaci\u00f3n y control de versiones.</p> <p>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</p> <p>Contenidos Espec\u00edficos</p> <p>Materiales y Recursos</p> <p> <ul> <li>CES 1. Estructura de un programa en PHP.</li> <li>CES 2. Tipos de variable.</li> <li>CES 3. Estructuras de control.</li> <li>CES 4. Programaci\u00f3n modular.</li> <li>CES 5. Arquitectura web.</li> </ul> </p> <p>Apuntes aportados por el profesorado.</p> <p>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</p> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC201. Muestra tres frases utilizando PHP.</p> <p> <ul> <li>CE2a. Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>CE2c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC202. Uso de variables para operaciones b\u00e1sicas.</p> <p> <ul> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC203. Almacenar datos personales y mostrar tabla con ellos.</p> <p> <ul> <li>CE2c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC207. N\u00fameros pares en un intervalo.</p> <p> <ul> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2e. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>CE2h. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC210. Rellenar un array en un intervalo.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC214. Inicio de librer\u00eda de funciones.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC215. Continuaci\u00f3n de librer\u00eda de funciones.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC216. Resoluci\u00f3n ecuaci\u00f3n segundo grado.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han creado y utilizado funciones.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC217. Refactorizar AC203 con el uso de formularios..</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>CE3e.  Se han creado y utilizado funciones.</li> <li>CE3f.  Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC218. C\u00e1lculo edad de jubilaci\u00f3n.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>CE3e.  Se han creado y utilizado funciones.</li> <li>CE3f.  Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC205. Positivos o negativos</p> <p> <ul> <li>CE2c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC206. Reloj</p> <p> <ul> <li>CE2c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC208. Suma de n\u00fameros en un intervalo.</p> <p> <ul> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2e. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>CE2h. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC213. Manejo de array bidimensional</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR201. Ticket de supermercado.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC204. Desglose de cantidad en billetes y monedas.</p> <p> <ul> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC209. Potencias usando estructuras de control</p> <p> <ul> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2e. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>CE2h. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC211. Bola 8 m\u00e1gica</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3e. Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC212. Refactorizar AC204 con arrays y bucles</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR202. Ticket de supermercado con include.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR203. Acceso para instituto.</p> <p> <ul> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3d.  Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</li> </ul> <p> <ul> <li>CE2a. Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>CE2b. Se han identificado las principales tecnolog\u00edas asociadas.</li> <li>CE2c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>CE2d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>CE2e. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>CE2f. Se han utilizado directivas para modificar el comportamiento predeterminado.</li> <li>CE2g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>CE2h. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> <li>CE3a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3e. Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>CE3f. Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE4 e IE5.</li> </ul> </p> <p> <ul> <li>IC2 e IC5.</li> </ul> </p>"},{"location":"uutt/03_PHPPOO/0310_GestionErrores.html","title":"Gesti\u00f3n de Errores","text":"<p>PHP clasifica los errores que ocurren en diferentes niveles. Cada nivel se identifica con una constante. Por ejemplo:</p> <ul> <li><code>E_ERROR</code>: errores fatales, no recuperables. Se interrumpe el script.</li> <li><code>E_WARNING</code>: advertencias en tiempo de ejecuci\u00f3n. El script no se interrumpe.</li> <li><code>E_NOTICE</code>: avisos en tiempo de ejecuci\u00f3n.  </li> </ul> <p>Pod\u00e9is comprobar el listado completo de constantes de https://www.php.net/manual/es/errorfunc.constants.php</p> <p>Para la configuraci\u00f3n de los errores podemos hacerlo de dos formas:</p> <ul> <li>A nivel de <code>php.ini</code>:<ul> <li><code>error_reporting</code>: indica los niveles de errores a notificar<ul> <li><code>error_reporting = E_ALL &amp; ~E_NOTICE</code> -&gt; Todos los errores menos los avisos en tiempo de ejecuci\u00f3n.</li> </ul> </li> <li><code>display_errors</code>: indica si mostrar o no los errores por pantalla. En entornos de producci\u00f3n es com\u00fan ponerlo a <code>off</code></li> </ul> </li> <li>mediante c\u00f3digo con las siguientes funciones:<ul> <li><code>error_reporting(codigo)</code> -&gt; Controla qu\u00e9 errores notificar</li> <li><code>set_error_handler(nombreManejador)</code> -&gt; Indica que funci\u00f3n se invocar\u00e1 cada vez que se encuentre un error. El manejador recibe como par\u00e1metros el nivel del error y el mensaje</li> </ul> </li> </ul> <p>A continuaci\u00f3n tenemos un ejemplo mediante c\u00f3digo:</p> Funciones para la gesti\u00f3n de errores <pre><code>&lt;?php\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE\u00a0&amp;\u00a0~E_WARNING);\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE);\nset_error_handler(\"miManejadorErrores\");\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\nrestore_error_handler();\u00a0//\u00a0vuelve\u00a0al\u00a0anterior\n\nfunction\u00a0miManejadorErrores($nivel,\u00a0$mensaje)\u00a0{\n    switch($nivel)\u00a0{\n        case\u00a0E_WARNING:\n            echo\u00a0\"&lt;strong&gt;Warning&lt;/strong&gt;:\u00a0$mensaje.&lt;br/&gt;\";\n            break;\n        default:\n            echo\u00a0\"Error\u00a0de\u00a0tipo\u00a0no\u00a0especificado:\u00a0$mensaje.&lt;br/&gt;\";\n    }\n}\n</code></pre> Consola <pre><code>Error de tipo no especificado: Undefined variable: dividendo.\nError de tipo no especificado: Undefined variable: divisor.\nError de tipo Warning: Division by zero.\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html","title":"Excepciones","text":"<p>La gesti\u00f3n de excepciones forma parte desde PHP 5. Su funcionamiento es similar a Java, haciendo uso de un bloque <code>try / catch / finally</code>. Si detectamos una situaci\u00f3n an\u00f3mala y queremos lanzar una excepci\u00f3n, deberemos realizar <code>throw new Exception</code> (adjuntando el mensaje que lo ha provocado).</p> <pre><code>&lt;?php\ntry\u00a0{\n    if\u00a0($divisor\u00a0==\u00a00) {\n        throw\u00a0new\u00a0Exception(\"Divisi\u00f3n\u00a0por\u00a0cero.\");\n    }\n    $resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n    echo\u00a0\"Se\u00a0ha\u00a0producido\u00a0el\u00a0siguiente\u00a0error:\u00a0\".$e-&gt;getMessage();\n}\n</code></pre> <p>La clase <code>Exception</code> es la clase padre de todas las excepciones. Su constructor recibe <code>mensaje[,codigoError][,excepcionPrevia]</code>.</p> <p>A partir de un objeto <code>Exception</code>, podemos acceder a los m\u00e9todos <code>getMessage()</code>y <code>getCode()</code> para obtener el mensaje y el c\u00f3digo de error de la excepci\u00f3n capturada.</p> <p>El propio lenguaje ofrece un conjunto de excepciones ya definidas, las cuales podemos capturar (y lanzar desde PHP 7). Se recomienda su consulta en la documentaci\u00f3n oficial.</p>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#creando-excepciones","title":"Creando excepciones","text":"<p>Para crear una excepci\u00f3n, la forma m\u00e1s corta es crear una clase que \u00fanicamente herede de <code>Exception</code>.</p> <pre><code>&lt;?php\nclass\u00a0HolaExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre> <p>Si queremos, y es recomendable dependiendo de los requisitos, podemos sobrecargar los m\u00e9todos m\u00e1gicos, por ejemplo, sobrecargando el constructor y llamando al constructor del padre, o rescribir el m\u00e9todo <code>__toString</code> para cambiar su mensaje:</p> <pre><code>&lt;?php\nclass\u00a0MiExcepcion\u00a0extends\u00a0Exception\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct($msj,\u00a0$codigo\u00a0=\u00a00,\u00a0Exception\u00a0$previa\u00a0=\u00a0null)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0c\u00f3digo\u00a0propio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent::__construct($msj,\u00a0$codigo,\u00a0$previa);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__CLASS__\u00a0.\u00a0\":\u00a0[{$this-&gt;code}]:\u00a0{$this-&gt;message}\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0miFuncion()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Una\u00a0funci\u00f3n\u00a0personalizada\u00a0para\u00a0este\u00a0tipo\u00a0de\u00a0excepci\u00f3n\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n</code></pre> <p>Si definimos una excepci\u00f3n de aplicaci\u00f3n dentro de un namespace, cuando referenciemos a <code>Exception</code>, deberemos referenciarla mediante su nombre totalmente cualificado (<code>\\Exception</code>), o utilizando <code>use</code>:</p> Mediante nombre totalmente cualificado <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0\\Exception\u00a0{}\n</code></pre> Mediante <code>use</code> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nuse Exception;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#excepciones-multiples","title":"Excepciones m\u00faltiples","text":"<p>Se pueden usar excepciones m\u00faltiples para comprobar diferentes condiciones. A la hora de capturarlas, se hace de m\u00e1s espec\u00edfica a m\u00e1s general.</p> <pre><code>&lt;?php\n$email\u00a0=\u00a0\"ejemplo@ejemplo.com\";\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0si\u00a0el\u00a0email\u00a0es\u00a0v\u00e1lido\n\u00a0\u00a0\u00a0\u00a0if(filter_var($email,\u00a0FILTER_VALIDATE_EMAIL)\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0MiExcepcion($email);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0la\u00a0palabra\u00a0ejemplo\u00a0en\u00a0la\u00a0direcci\u00f3n\u00a0email\n\u00a0\u00a0\u00a0\u00a0if(strpos($email,\u00a0\"ejemplo\")\u00a0!==\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0Exception(\"$email\u00a0es\u00a0un\u00a0email\u00a0de\u00a0ejemplo no v\u00e1lido\");\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0catch\u00a0(MiExcepcion\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;miFuncion();\n}\u00a0catch(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Si en el mismo <code>catch</code> queremos capturar varias excepciones, hemos de utilizar el operador <code>|</code>:</p> <pre><code>&lt;?php\nclass\u00a0MainException\u00a0extends\u00a0Exception\u00a0{}\nclass\u00a0SubException\u00a0extends\u00a0MainException\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0SubException(\"Lanzada\u00a0SubException\");\n}\u00a0catch\u00a0(MainException\u00a0|\u00a0SubException\u00a0$e\u00a0)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0Exception\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Desde PHP 7, existe el tipo <code>Throwable</code>, el cual es un interfaz que implementan tanto los errores como las excepciones, y nos permite capturar los dos tipos a la vez:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0tu\u00a0codigo\n}\u00a0catch\u00a0(Throwable\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Forma\u00a0de\u00a0capturar\u00a0errores\u00a0y\u00a0excepciones\u00a0a\u00a0la\u00a0vez';\n}\n</code></pre> <p>Si s\u00f3lo queremos capturar los errores fatales, podemos hacer uso de la clase <code>Error</code>:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Genera\u00a0una\u00a0notificaci\u00f3n\u00a0que\u00a0no\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$variableNoAsignada;\n\u00a0\u00a0\u00a0\u00a0//\u00a0Error\u00a0fatal\u00a0que\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0funcionQueNoExiste();\n}\u00a0catch\u00a0(Error\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0capturado:\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#relanzar-excepciones","title":"Relanzar excepciones","text":"<p>En las aplicaciones reales, es muy com\u00fan capturar una excepci\u00f3n de sistema y lanzar una de aplicaci\u00f3n que hemos definido nostros. Tambi\u00e9n podemos lanzar las excepciones sin necesidad de estar dentro de un <code>try/catch</code>.</p> <pre><code>&lt;?php\nclass\u00a0AppException\u00a0extends\u00a0Exception\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0C\u00f3digo\u00a0de\u00a0negocio\u00a0que\u00a0falla\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0AppException(\"AppException:\u00a0\".$e-&gt;getMessage(), $e-&gt;getCode(),\u00a0$e);\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#actividades","title":"Actividades","text":"<ul> <li>PR304 (SA). (RA3 RA4 / CE3b CE3c CE3d CE3g CE4g / IC1 / 3p) - El CTO del proyecto te insta a que implementes un control de excepciones \u00f3ptimo en todo lo que llevas desarrollado hasta ahora.</li> </ul>"},{"location":"uutt/03_PHPPOO/0312_SPL.html","title":"SPL","text":"<p>Standard PHP Library es el conjunto de funciones y utilidades que ofrece PHP, como:</p> <ul> <li>Estructuras de datos<ul> <li>Pila, cola, cola de prioridad, lista doblemente enlazada, etc... </li> </ul> </li> <li>Conjunto de iteradores dise\u00f1ados para recorrer estructuras agregadas<ul> <li>arrays, resultados de bases de datos, \u00e1rboles XML, listados de directorios, etc.</li> </ul> </li> </ul> <p>Pod\u00e9is consultar la documentaci\u00f3n en https://www.php.net/manual/es/book.spl.php.</p> <p>Tambi\u00e9n define un conjunto de excepciones que podemos utilizar para que las lancen nuestras aplicaciones:</p> <ul> <li><code>LogicException</code> (<code>extends Exception</code>)<ul> <li><code>BadFunctionCallException</code></li> <li><code>BadMethodCallException</code></li> <li><code>DomainException</code></li> <li><code>InvalidArgumentException</code></li> <li><code>LengthException</code></li> <li><code>OutOfRangeException</code></li> </ul> </li> <li><code>RuntimeException</code> (<code>extends Exception</code>)<ul> <li><code>OutOfBoundsException</code></li> <li><code>OverflowException</code></li> <li><code>RangeException</code></li> <li><code>UnderflowException</code></li> <li><code>UnexpectedValueException</code></li> </ul> </li> </ul> <p>Tambi\u00e9n pod\u00e9is consultar la documentaci\u00f3n de estas excepciones en https://www.php.net/manual/es/spl.exceptions.php.</p>"},{"location":"uutt/03_PHPPOO/0313_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Manual de PHP</li> <li>Manual: Manual de OO en PHP - www.desarrolloweb.com</li> </ul>"},{"location":"uutt/03_PHPPOO/0313_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Tutorial de la librer\u00eda SPL  por Diego L\u00e1zaro</li> </ul>"},{"location":"uutt/03_PHPPOO/0314_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 palabra clave se utiliza en PHP para definir una clase?<ol> <li>class</li> <li>object</li> <li>model</li> <li>struct</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. class.</p> <ol> <li>\u00bfC\u00f3mo se crea una instancia de una clase en PHP?<ol> <li>$objeto = new Clase();</li> <li>$objeto = create Clase();</li> <li>$objeto = construct Clase();</li> <li>$objeto = initiate Clase();</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. $objeto = new Clase();.</p> <ol> <li>\u00bfCu\u00e1l de las siguientes es una caracter\u00edstica de la POO en PHP?<ol> <li>Reutilizaci\u00f3n del c\u00f3digo</li> <li>No permite la herencia</li> <li>Solo admite funciones</li> <li>No soporta encapsulamiento</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. Reutilizaci\u00f3n del c\u00f3digo.</p> <ol> <li>\u00bfQu\u00e9 palabra clave se utiliza para acceder a m\u00e9todos o propiedades de la misma clase en PHP?<ol> <li>self</li> <li>this</li> <li>me</li> <li>own</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. this.</p> <ol> <li>\u00bfQu\u00e9 concepto de POO se refiere a la capacidad de una subclase de heredar los m\u00e9todos y propiedades de una superclase en PHP?<ol> <li>Encapsulamiento</li> <li>Abstracci\u00f3n</li> <li>Polimorfismo</li> <li>Herencia</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. Herencia</p>"},{"location":"uutt/03_PHPPOO/031_ClasesObjetos.html","title":"Clases y Objetos","text":"<p>PHP sigue un paradigma de programaci\u00f3n orientada a objetos (POO) basada en clases.</p> <p>Un clase es un plantilla que define las propiedades y m\u00e9todos para poder crear objetos. De este manera, un objeto es una instancia de una clase.</p> <p>Tanto las propiedades como los m\u00e9todos se definen con una visibilidad (quien puede acceder)</p> <ul> <li>Privado - <code>private</code>:  S\u00f3lo puede acceder la propia clase.</li> <li>Protegido - <code>protected</code>: S\u00f3lo puede acceder la propia clase o sus descendientes.</li> <li>P\u00fablico - <code>public</code>: Puede acceder cualquier otra clase.</li> </ul> <p>Para declarar una clase, se utiliza la palabra clave <code>class</code> seguido del nombre de la clase. Para instanciar un objeto a partir de la clase, se utiliza <code>new</code>:</p> <pre><code>&lt;?php\nclass NombreClase {\n// propiedades\n// y m\u00e9todos\n}\n\n$ob = new NombreClase();\n</code></pre> <p>Clases con may\u00fascula</p> <p>Todas las clases empiezan por letra may\u00fascula.</p> <p>Una vez que hemos creado un objeto, se utiliza el operador <code>-&gt;</code> para acceder a una propiedad o un m\u00e9todo:</p> <pre><code>$objeto-&gt;propiedad;\n$objeto-&gt;m\u00e9todo(par\u00e1metros);\n</code></pre> <p>Si desde dentro de la clase, queremos acceder a una propiedad o m\u00e9todo de la misma clase, utilizaremos la referencia <code>$this</code>;</p> <pre><code>$this-&gt;propiedad;\n$this-&gt;m\u00e9todo(par\u00e1metros);  \n</code></pre> <p>As\u00ed pues, como ejemplo, codificar\u00edamos una persona en el fichero <code>Persona.php</code> como:</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0setNombre(string $nom)\u00a0{\n        $this-&gt;nombre=$nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n        echo\u00a0$this-&gt;nombre;\n        echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$gines\u00a0=\u00a0new\u00a0Persona(); // creamos un objeto\n$gines-&gt;setNombre(\"Gin\u00e9s L\u00f3pez\");\n$gines-&gt;imprimir();\n</code></pre> <p>Aunque se pueden declarar varias clases en el mismo archivo, es una mala pr\u00e1ctica. As\u00ed pues, cada fichero contendr\u00e1 una sola clase, y se nombrar\u00e1 con el nombre de la clase.</p>"},{"location":"uutt/03_PHPPOO/032_Encapsulacion.html","title":"Encapsulaci\u00f3n","text":"<p>Las propiedades se definen privadas o protegidas (si queremos que las clases heredadas puedan acceder).</p> <p>Para cada propiedad, se a\u00f1aden m\u00e9todos p\u00fablicos (getter/setter):</p> <pre><code>public setPropiedad(tipo $param)\npublic getPropiedad() : tipo\n</code></pre> <p>Las constantes se definen p\u00fablicas para que sean accesibles por todos los recursos.</p> <pre><code>&lt;?php\nclass\u00a0MayorMenor\u00a0{\n    private\u00a0int $mayor;\n    private\u00a0int $menor;\n\n    public\u00a0function\u00a0setMayor(int\u00a0$may)\u00a0{\n        $this-&gt;mayor\u00a0=\u00a0$may;\n    }\n\n    public\u00a0function\u00a0setMenor(int\u00a0$men)\u00a0{\n        $this-&gt;menor\u00a0=\u00a0$men;\n    }\n\n    public\u00a0function\u00a0getMayor()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;mayor;\n    }\n\n    public\u00a0function\u00a0getMenor()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;menor;\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/032_Encapsulacion.html#recibiendo-y-enviando-objetos","title":"Recibiendo y enviando objetos","text":"<p>Es recomendable indicarlo en el tipo de par\u00e1metros. Si el objeto puede devolver nulos se pone <code>?</code> delante del nombre de la clase.</p> <p>Objetos por referencia</p> <p>Los objetos que se env\u00edan y reciben como par\u00e1metros siempre se pasan por referencia.</p> <pre><code>&lt;?php\nfunction\u00a0maymen(array\u00a0$numeros)\u00a0:\u00a0?MayorMenor\u00a0{\n    $a\u00a0=\u00a0max($numeros);\n    $b\u00a0=\u00a0min($numeros);\n\n    $result\u00a0=\u00a0new\u00a0MayorMenor();\n    $result-&gt;setMayor($a);\n    $result-&gt;setMenor($b);\n\n    return\u00a0$result;\n}\n\n$resultado\u00a0=\u00a0\u00a0maymen([1,76,9,388,41,39,25,97,22]);\necho\u00a0\"&lt;br&gt;Mayor:\u00a0\".$resultado-&gt;getMayor();\necho\u00a0\"&lt;br&gt;Menor:\u00a0\".$resultado-&gt;getMenor();\n</code></pre>"},{"location":"uutt/03_PHPPOO/032_Encapsulacion.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC301 (AEA). (RA3 / CE3d CE3g / IC1 / 3p) - Crea una clase Empleado con su nombre, apellidos y sueldo. Encapsula las propiedades mediante getters/setters y a\u00f1ade m\u00e9todos para:</p> <ul> <li>Obtener su nombre completo \u2192 <code>getNombreCompleto(): string</code></li> <li>Que devuelva un booleano indicando si debe o no pagar impuestos (se pagan cuando el sueldo es superior a 3333\u20ac) \u2192 <code>debePagarImpuestos(): bool</code></li> </ul> </li> <li> <p>**AC302 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una propiedad privada que almacene un array de n\u00fameros de tel\u00e9fonos. A\u00f1ade los siguientes m\u00e9todos:</p> <ul> <li><code>public function anyadirTelefono(int $telefono) : void</code> \u2192 A\u00f1ade un tel\u00e9fono al array</li> <li><code>public function listarTelefonos(): string</code> \u2192 Muestra los tel\u00e9fonos separados por comas</li> <li><code>public function vaciarTelefonos(): void</code>\u2192 Elimina todos los tel\u00e9fonos</li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/033_Constructor.html","title":"El Constructor","text":"<p>El constructor de los objetos se define mediante el m\u00e9todo m\u00e1gico <code>__construct</code>. Puede o no tener par\u00e1metros, pero s\u00f3lo puede haber un \u00fanico constructor.</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0__construct(string $nom)\u00a0{\n        $this-&gt;nombre = $nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n    \u00a0\u00a0echo\u00a0$this-&gt;nombre;\n    \u00a0\u00a0echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$gines\u00a0=\u00a0new\u00a0Persona(\"Gin\u00e9s L\u00f3pez\");\n$gines-&gt;imprimir();\n</code></pre>"},{"location":"uutt/03_PHPPOO/033_Constructor.html#constructores-en-php-8","title":"Constructores en PHP 8","text":"<p>Una de las grandes novedades que ofrece PHP 8 es la simplificaci\u00f3n de los constructores con par\u00e1metros, lo que se conoce como promoci\u00f3n de las propiedades del constructor.</p> <p>Para ello, en vez de tener que declarar las propiedades como privadas o protegidas, y luego dentro del constructor tener que asignar los par\u00e1metros a est\u00e1s propiedades, el propio constructor promociona las propiedades.</p> <p>Ve\u00e1moslo mejor con un ejemplo. Imaginemos una clase <code>Punto</code> donde queramos almacenar sus coordenadas:</p> <pre><code>&lt;?php\nclass Punto {\n    protected float $x;\n    protected float $y;\n    protected float $z;\n\n    public function __construct(\n        float $x = 0.0,\n        float $y = 0.0,\n        float $z = 0.0\n    ) {\n        $this-&gt;x = $x;\n        $this-&gt;y = $y;\n        $this-&gt;z = $z;\n    }\n}\n</code></pre> <p>En PHP 8, quedar\u00eda del siguiente modo (mucho m\u00e1s corto, lo que facilita su legibilidad):</p> <pre><code>&lt;?php\nclass Punto {\n    public function __construct(\n        protected float $x = 0.0,\n        protected float $y = 0.0,\n        protected float $z = 0.0,\n    ) {}\n}\n</code></pre> <p>El orden importa</p> <p>A la hora de codificar el orden de los elementos debe ser:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nclass NombreClase {\n    // propiedades\n\n    // constructor\n\n    // getters - setters\n\n    // resto de m\u00e9todos\n}\n?&gt;\n</code></pre>"},{"location":"uutt/03_PHPPOO/033_Constructor.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC303 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC302 y modif\u00edcala. Elimina los setters de nombre y apellidos, de manera que dichos datos se asignan mediante el constructor (utiliza la sintaxis de PHP7). Si el constructor recibe un tercer par\u00e1metro, ser\u00e1 el sueldo del Empleado. Si no, se le asignar\u00e1 1000\u20ac como sueldo inicial.</p> </li> <li> <p>AC304 (AP). (RA2 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Modifica la clase de la actividad anterior AC303 y utiliza la sintaxis de PHP 8 de promoci\u00f3n de las propiedades del constructor.</p> </li> </ul>"},{"location":"uutt/03_PHPPOO/034_ClasesEstaticas.html","title":"Clases Est\u00e1ticas","text":"<p>Clases est\u00e1ticas</p> <p>Son aquellas que tienen propiedades y/o m\u00e9todos est\u00e1ticos (tambi\u00e9n se conocen como de clase, por que su valor se comparte entre todas las instancias de la misma clase).</p> <p>Se declaran con <code>static</code> y se referencian con <code>::</code>.</p> <ul> <li>Si queremos acceder a un m\u00e9todo est\u00e1tico, se antepone el nombre de la clase: <code>Producto::nuevoProducto()</code>.</li> <li>Si desde un m\u00e9todo queremos acceder a una propiedad est\u00e1tica de la misma clase, se utiliza la referencia <code>self</code>: <code>self::$numProductos</code></li> </ul> <pre><code>&lt;?php\nclass Producto {\n    const IVA = 0.23;\n    private static $numProductos = 0; \n\n    public static function nuevoProducto() {\n        self::$numProductos++;\n    }\n}\n\nProducto::nuevoProducto();\n$impuesto = Producto::IVA;\n</code></pre> <p>Tambi\u00e9n podemos tener clases normales que tengan alguna propiedad est\u00e1tica:</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    const\u00a0IVA\u00a0=\u00a00.23;\n    private\u00a0static\u00a0$numProductos\u00a0=\u00a00;\u00a0\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0__construct(string\u00a0$cod)\u00a0{\n        self::$numProductos++;\n        $this-&gt;codigo\u00a0=\u00a0$cod;\n    }\n\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"El\u00a0producto\u00a0\".$this-&gt;codigo.\" es\u00a0el\u00a0n\u00famero\u00a0\".self::$numProductos;\n    }\n}\n\n$prod1\u00a0=\u00a0new\u00a0Producto(\"PS5\");\n$prod2\u00a0=\u00a0new\u00a0Producto(\"XBOX\u00a0Series\u00a0X\");\n$prod3\u00a0=\u00a0new\u00a0Producto(\"Nintendo\u00a0Switch\");\necho\u00a0$prod3-&gt;mostrarResumen();\n</code></pre>"},{"location":"uutt/03_PHPPOO/034_ClasesEstaticas.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC305 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Modifica la clase de la actividad anterior AC304. A\u00f1ade una constante <code>SUELDO_TOPE</code> con el valor del sueldo que debe pagar impuestos, y modifica el c\u00f3digo para utilizar la constante.</p> </li> <li> <p>AC306 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC305 y modif\u00edcala. Cambia la constante por una variable est\u00e1tica <code>sueldoTope</code>, de manera que mediante <code>getter/setter</code> puedas modificar su valor.</p> </li> <li> <p>AC307 (AP). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC306 y modif\u00edcala. Completa el siguiente m\u00e9todo con una cadena HTML que muestre los datos de un empleado dentro de un p\u00e1rrafo y todos los tel\u00e9fonos mediante una lista ordenada (para ello, deber\u00e1s crear un getter para los tel\u00e9fonos):</p> <ul> <li><code>public static function toHtml(Empleado $emp): string</code></li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/035_TrabajandoObjetos.html","title":"Trabajando con objetos","text":"<p>Al trabajar con clases y objetos, existen un conjunto de funciones ya definidas por el lenguaje que permiten obtener informaci\u00f3n sobre los objetos:</p> <ul> <li><code>instanceof</code>: permite comprobar si un objeto es de una determinada clase</li> <li><code>get_class</code>: devuelve el nombre de la clase</li> <li><code>get_declared_class</code>: devuelve un array con los nombres de las clases definidas</li> <li><code>class_alias</code>: crea un alias</li> <li><code>class_exists</code> / <code>method_exists</code> / <code>property_exists</code>: <code>true</code> si la clase / m\u00e9todo / propiedad est\u00e1 definida</li> <li><code>get_class_methods</code> / <code>get_class_vars</code> / <code>get_object_vars</code>: Devuelve un array con los nombres de los m\u00e9todos / propiedades de una clase / propiedades de un objeto que son accesibles desde d\u00f3nde se hace la llamada.</li> </ul> <p>Un ejemplo de estas funciones puede ser el siguiente:</p> <pre><code>&lt;?php\n$p\u00a0=\u00a0new\u00a0Producto(\"PS5\");\nif\u00a0($p\u00a0instanceof\u00a0Producto)\u00a0{\n    echo\u00a0\"Es\u00a0un\u00a0producto\";\n    echo\u00a0\"La\u00a0clase\u00a0es\u00a0\".get_class($p);\n\n    class_alias(\"Producto\",\u00a0\"Articulo\");\n    $c\u00a0=\u00a0new\u00a0Articulo(\"Nintendo\u00a0Switch\");\n    echo\u00a0\"Un\u00a0articulo\u00a0es\u00a0un\u00a0\".get_class($c);\n\n    print_r(get_class_methods(\"Producto\"));\n    print_r(get_class_vars(\"Producto\"));\n    print_r(get_object_vars($p));\n\n    if\u00a0(method_exists($p,\u00a0\"mostrarResumen\"))\u00a0{\n        $p-&gt;mostrarResumen();\n    }\n}\n</code></pre> <p>Clonado</p> <p>Al asignar dos objetos no se copian, se crea una nueva referencia. Si queremos una copia, hay que clonarlo mediante el m\u00e9todo <code>clone(object) : object</code></p> <p>Si queremos modificar el clonado por defecto, hay que definir el m\u00e9todo m\u00e1gico <code>__clone()</code> que se llamar\u00e1 despu\u00e9s de copiar todas las propiedades.</p> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.oop5.cloning.php</p>"},{"location":"uutt/03_PHPPOO/036_Herencia.html","title":"Herencia","text":"<p>PHP soporta herencia simple, de manera que una clase solo puede heredar de otra, no de dos clases a la vez. Para ello se utiliza la palabra clave <code>extends</code>. Si queremos que la clase A hereda de la clase B haremos:</p> <pre><code>class A extends B\n</code></pre> <p>El hijo hereda los atributos y m\u00e9todos p\u00fablicos y protegidos.</p> <p>Cada clase en un archivo</p> <p>Como ya hemos comentado, deber\u00edamos colocar cada clase en un archivo diferente para posteriormente utilizarlo mediante <code>include</code>. En los siguiente ejemplo los hemos colocado junto para facilitar su legibilidad.</p> <p>Por ejemplo, tenemos una clase <code>Producto</code> y una <code>Tv</code> que hereda de <code>Producto</code>:</p> <pre><code>&lt;?php\nclass Producto {\n    public $codigo;\n    public $nombre;\n    public $nombreCorto;\n    public $PVP;\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n}\n</code></pre> <p>Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases:</p> <ul> <li><code>get_parent_class(object): string</code></li> <li><code>is_subclass_of(object, string): bool</code></li> </ul> <pre><code>&lt;?php\n$t = new Tv();\n$t-&gt;codigo = 33;\nif ($t instanceof Producto) {\n    echo $t-&gt;mostrarResumen();\n}\n\n$padre = get_parent_class($t);\necho \"&lt;br&gt;La clase padre es: \" . $padre;\n$objetoPadre = new $padre;\necho $objetoPadre-&gt;mostrarResumen();\n\nif (is_subclass_of($t, 'Producto')) {\n    echo \"&lt;br&gt;Soy un hijo de Producto\";\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#sobreescribir-metodos","title":"Sobreescribir m\u00e9todos","text":"<p>Podemos crear m\u00e9todos en los hijos con el mismo nombre que el padre, cambiando su comportamiento. Para invocar a los m\u00e9todos del padre -&gt; <code>parent::nombreMetodo()</code></p> <pre><code>&lt;?php\nclass Tv extends Producto {\n   public $pulgadas;\n   public $tecnologia;\n\n   public function mostrarResumen() {\n      parent::mostrarResumen();\n      echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n   }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#constructor-en-hijos","title":"Constructor en hijos","text":"<p>En los hijos no se crea ning\u00fan constructor de manera autom\u00e1tica. Por lo que si no lo hay, se invoca autom\u00e1ticamente al del padre. En cambio, si lo definimos en el hijo, hemos de invocar al del padre de manera expl\u00edcita.</p> PHP7 <pre><code>&lt;?php\nclass Producto {\n    public string $codigo;\n\n    public\u00a0function\u00a0__construct(string $codigo) {\n        $this-&gt;codigo =\u00a0$codigo;\n    }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public\u00a0function\u00a0__construct(string\u00a0$codigo,\u00a0int\u00a0$pulgadas,\u00a0string\u00a0$tecnologia)\u00a0{\n        parent::__construct($codigo);\n        $this-&gt;pulgadas\u00a0=\u00a0$pulgadas;\n        $this-&gt;tecnologia\u00a0=\u00a0$tecnologia;\n    }\n\n    public function mostrarResumen() {\n        parent::mostrarResumen();\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre> PHP8 <pre><code>&lt;?php\nclass Producto {\n    public\u00a0function\u00a0__construct(private string $codigo) { }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }        \n}\n\nclass Tv extends Producto {\n\n    public\u00a0function\u00a0__construct(\n        string\u00a0$codigo,\n        private int\u00a0$pulgadas,\n        private string\u00a0$tecnologia)\n    {\n        parent::__construct($codigo);\n    }\n\n    public function mostrarResumen() {\n        parent::mostrarResumen();\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#clases-abstractas","title":"Clases abstractas","text":"<p>Las clases abstractas obligan a heredar de una clase, ya que no se permite su instanciaci\u00f3n. Se define mediante <code>abstract class NombreClase {</code>. Una clase abstracta puede contener propiedades y m\u00e9todos no-abstractos, y/o m\u00e9todos abstractos.</p> <pre><code>&lt;?php\n//\u00a0Clase\u00a0abstracta\nabstract\u00a0class\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n    //\u00a0M\u00e9todo\u00a0abstracto\n    abstract\u00a0public\u00a0function\u00a0mostrarResumen();\n}\n</code></pre> <p>Cuando una clase hereda de una clase abstracta, obligatoriamente debe implementar los m\u00e9todos que tiene el padre marcados como abstractos.</p> <pre><code>&lt;?php\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public function mostrarResumen() { //obligado a implementarlo\n        echo \"&lt;p&gt;C\u00f3digo \".$this-&gt;getCodigo().\"&lt;/p&gt;\";\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n\n$t = new Tv();\necho $t-&gt;getCodigo();\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#clases-finales","title":"Clases finales","text":"<p>Son clases opuestas a abstractas, ya que evitan que se pueda heredar una clase o m\u00e9todo para sobreescribirlo.</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n\n    final\u00a0public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"Producto\u00a0\".$this-&gt;codigo;\n    }\n}\n\n// No podremos heredar de Microondas\nfinal\u00a0class\u00a0Microondas\u00a0extends\u00a0Producto\u00a0{\n    private\u00a0$potencia;\n\n    public\u00a0function\u00a0getPotencia()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;potencia;\n    }\n\n    // No podemos implementar mostrarResumen()\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC308 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC307 y modif\u00edcala. Crea una clase Persona que sea padre de Empleado, de manera que Persona contenga el nombre y los apellidos, y en Empleado quede el salario y los tel\u00e9fonos.</p> </li> <li> <p>AC309 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia las clases del ejercicio AC308 y modif\u00edcalas. Crea en Persona el m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code>, y modifica en Empleado el mismo m\u00e9todo <code>toHtml(Persona $p)</code>, pero cambia la firma para que reciba una Persona como par\u00e1metro. Para acceder a las propiedades del empleado con la persona que recibimos como par\u00e1metro, comprobaremos su tipo</p> <pre><code>&lt;?php\n    class Empleado extends Persona {\n        /// resto del c\u00f3digo\n\n        public static function toHtml(Persona $p): string {\n            if ($p instanceof Empleado) {\n                // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado\n            }\n        }\n    }\n</code></pre> </li> <li> <p>AC310 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia las clases del ejercicio AC310 y modif\u00edcalas. A\u00f1ade en Persona un atributo edad. A la hora de saber si un empleado debe pagar impuestos, lo har\u00e1 siempre y cuando tenga m\u00e1s de 21 a\u00f1os y dependa del valor de su sueldo. Modifica todo el c\u00f3digo necesario para mostrar y/o editar la edad cuando sea necesario.</p> </li> <li> <p>AC311 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia las clases del ejercicio AC311 y modif\u00edcalas. A\u00f1ade nuevos m\u00e9todos que hagan una representaci\u00f3n de todas las propiedades de las clases Persona y Empleado, de forma similar a los realizados en HTML, pero sin que sean est\u00e1ticos, de manera que obtenga los datos mediante $this.</p> <ul> <li><code>function public __toString(): string</code></li> </ul> </li> <li> <p>PR301 (SA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - El CTO del proyecto necesita empezar con \u00e9l. Para ello has de dise\u00f1ar un programa que cuente con las siguientes clases: persona, producto, carrito y pedidoComercial. Una vez realizado esto deber\u00e1s generar las clases: </p> <ul> <li>empleadoTienda, comercial y cliente que heredan de persona</li> <li>pedido que hereda de carrito.</li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/037_Interfaces.html","title":"Interfaces","text":"<p>Permite definir un contrato con las firmas de los m\u00e9todos a cumplir. As\u00ed pues, s\u00f3lo contiene declaraciones de funciones y todas deben ser p\u00fablicas.</p> <p>Se declaran con la palabra clave <code>interface</code> y luego las clases que cumplan el contrato lo realizan mediante la palabra clave <code>implements</code>.</p> <pre><code>&lt;?php\ninterface Nombreable {\n// declaraci\u00f3n de funciones\n}\nclass NombreClase implements NombreInterfaz {\n// c\u00f3digo de la clase\n</code></pre> <p>Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herencia m\u00faltiple, pero s\u00f3lo de interfaces).</p> <pre><code>&lt;?php\ninterface\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string;\n}\n\ninterface\u00a0MostrableTodo\u00a0extends\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarTodo()\u00a0:\u00a0string;\n}\n\ninterface\u00a0Facturable\u00a0{\n    public\u00a0function\u00a0generarFactura()\u00a0:\u00a0string;\n}\n\nclass\u00a0Producto\u00a0implements\u00a0MostrableTodo,\u00a0Facturable\u00a0{\n    //\u00a0Implementaciones\u00a0de\u00a0los\u00a0m\u00e9todos\n    // Obligatoriamente deber\u00e1 implementar public\u00a0function\u00a0mostrarResumen, mostrarTodo y generarFactura\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/037_Interfaces.html#actividades","title":"Actividades","text":"<ul> <li>PR302 (SA). (RA3 RA4 / CE3b CE3c CE3d CE3g CE4g / IC1 / 3p) - Siguiendo con el proyecto de e-commerce, se necesita que implementes la interfaz <code>Facturable</code> para pedido y pedidoComercial.</li> </ul>"},{"location":"uutt/03_PHPPOO/038_Metodos.html","title":"Metodos encadenados y m\u00e1gicos","text":""},{"location":"uutt/03_PHPPOO/038_Metodos.html#metodos-encadenados","title":"M\u00e9todos encadenados","text":"<p>Sigue el planteamiento de la programaci\u00f3n funcional, y tambi\u00e9n se conoce como method chaining. Plantea que sobre un objeto se realizan varias llamadas.</p> <pre><code>&lt;?php\n$p1\u00a0=\u00a0new\u00a0Libro();\n$p1-&gt;setNombre(\"Harry\u00a0Potter\");\n$p1-&gt;setAutor(\"JK\u00a0Rowling\");\necho\u00a0$p1;\n\n// Method chaining\n$p2\u00a0=\u00a0new\u00a0Libro();\n$p2-&gt;setNombre(\"Patria\")-&gt;setAutor(\"Aramburu\");\necho\u00a0$p2;\n</code></pre> <p>Para facilitarlo, vamos a modificar todos sus m\u00e9todos mutadores (que modifican datos, setters, ...) para que devuelvan una referencia a <code>$this</code>:</p> <pre><code>&lt;?php\nclass\u00a0Libro\u00a0{\n    private\u00a0string\u00a0$nombre;\n    private\u00a0string\u00a0$autor;\n\n    public\u00a0function\u00a0getNombre()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre;\n    }\n    public\u00a0function\u00a0setNombre(string\u00a0$nombre)\u00a0:\u00a0Libro\u00a0{\u00a0\n        $this-&gt;nombre\u00a0=\u00a0$nombre;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0getAutor()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;autor;\n    }\n    public\u00a0function\u00a0setAutor(string\u00a0$autor)\u00a0:\u00a0Libro\u00a0{\n        $this-&gt;autor\u00a0=\u00a0$autor;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0__toString()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre.\"\u00a0de\u00a0\".$this-&gt;autor;\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/038_Metodos.html#metodos-magicos","title":"M\u00e9todos m\u00e1gicos","text":"<p>Todas las clases PHP ofrecen un conjunto de m\u00e9todos, tambi\u00e9n conocidos como magic methods que se pueden sobreescribir para sustituir su comportamiento. Algunos de ellos ya los hemos utilizado.</p> <p>Ante cualquier duda, es conveniente consultar la documentaci\u00f3n oficial.</p> <p>Los m\u00e1s destacables son:</p> <ul> <li><code>__construct()</code></li> <li><code>__destruct()</code> \u2192 se invoca al perder la referencia. Se utiliza para cerrar una conexi\u00f3n a la BD, cerrar un fichero, ...</li> <li><code>__toString()</code> \u2192 representaci\u00f3n del objeto como cadena. Es decir, cuando hacemos <code>echo $objeto</code> se ejecuta autom\u00e1ticamente este m\u00e9todo.</li> <li><code>__get(propiedad)</code>, <code>__set(propiedad, valor)</code> \u2192 Permitir\u00eda acceder a las propiedad privadas, aunque siempre es m\u00e1s legible/mantenible codificar los getter/setter.</li> <li><code>__isset(propiedad)</code>, <code>__unset(propiedad)</code> \u2192 Permite averiguar o quitar el valor a una propiedad.</li> <li><code>__sleep()</code>, <code>__wakeup()</code> \u2192 Se ejecutan al recuperar (unserialize^) o almacenar un objeto que se serializa (serialize), y se utilizan para permite definir qu\u00e9 propiedades se serializan.</li> <li><code>__call()</code>, <code>__callStatic()</code> \u2192 Se ejecutan al llamar a un m\u00e9todo que no es p\u00fablico. Permiten sobrecargan m\u00e9todos.</li> </ul>"},{"location":"uutt/03_PHPPOO/038_Metodos.html#actividades","title":"Actividades","text":"<ul> <li>PR303 (SA). (RA3 RA4 / CE3b CE3c CE3d CE3g CE4g / IC1 / 3p) - Tras analizar tu c\u00f3digo, el CTO te comenta que tienes que asegurarte que de implementar los m\u00e9todos m\u00e1gicos que consideres en las clases de la actividad PR301</li> </ul>"},{"location":"uutt/03_PHPPOO/039_Namespace.html","title":"Espacio de nombres (Namespace)","text":"<p>Desde PHP 5.3 y tambi\u00e9n conocidos como Namespaces, permiten organizar las clases/interfaces, funciones y/o constantes de forma similar a los paquetes en Java.</p> <p>Recomendaci\u00f3n</p> <p>Un s\u00f3lo namespace por archivo y crear una estructura de carpetas respectando los niveles/subniveles (igual que se hace en Java)</p> <p>Se declaran en la primera l\u00ednea mediante la palabra clave <code>namespace</code> seguida del nombre del espacio de nombres asignado (cada subnivel se separa con la barra invertida <code>\\</code>):</p> <p>Por ejemplo, para colocar la clase <code>Producto</code> dentro del namespace <code>Dwes\\Ejemplos</code> lo har\u00edamos as\u00ed:</p> <pre><code>&lt;?php\nnamespace\u00a0Dwes\\Ejemplos;\n\nconst\u00a0IVA\u00a0=\u00a00.21;\n\nclass\u00a0Producto\u00a0{\n    public\u00a0$nombre;\n    \u00a0\u00a0\n    public\u00a0function\u00a0muestra()\u00a0:\u00a0void\u00a0{\n        echo\"&lt;p&gt;Prod:\"\u00a0.\u00a0$this-&gt;nombre\u00a0.\u00a0\"&lt;/p&gt;\";\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/039_Namespace.html#acceso","title":"Acceso","text":"<p>Para referenciar a un recurso que contiene un namespace, primero hemos de tenerlo disponible haciendo uso de <code>include</code> o <code>require</code>. Si el recurso est\u00e1 en el mismo namespace, se realiza un acceso directo (se conoce como acceso sin cualificar).</p> <p>Realmente hay tres tipos de acceso:</p> <ul> <li>sin cualificar: <code>recurso</code></li> <li>cualificado: <code>rutaRelativa\\recurso</code> \u2192 no hace falta poner el namespace completo</li> <li>totalmente cualificado: <code>\\rutaAbsoluta\\recurso</code></li> </ul> <pre><code>&lt;?php\nnamespace\u00a0Dwes\\Ejemplos;\n\ninclude_once(\"Producto.php\");\n\necho\u00a0IVA;\u00a0//\u00a0sin\u00a0cualificar\necho\u00a0Utilidades\\IVA;\u00a0// acceso cualificado. Dar\u00eda error, no existe \\Dwes\\Ejemplos\\Utilidades\\IVA\necho\u00a0\\Dwes\\Ejemplos\\IVA;\u00a0//\u00a0totalmente\u00a0cualificado\n\n$p1\u00a0=\u00a0new\u00a0Producto();\u00a0//\u00a0lo busca en el mismo namespace y encuentra \\Dwes\\Ejemplos\\Producto\n$p2\u00a0=\u00a0new\u00a0Model\\Producto(); // dar\u00eda error, no existe el namespace Model. Est\u00e1 buscando \\Dwes\\Ejemplos\\Model\\Producto\n$p3\u00a0=\u00a0new\u00a0\\Dwes\\Ejemplos\\Producto(); //\u00a0\\Dwes\\Ejemplos\\Producto\n</code></pre> <p>Para evitar la referencia cualificada podemos declarar el uso mediante <code>use</code> (similar a hacer <code>import</code> en Java). Se hace en la cabecera, tras el <code>namespace</code>:</p> <p>Los tipos posibles son:</p> <ul> <li><code>use const nombreCualificadoConstante</code></li> <li><code>use function nombreCualificadoFuncion</code></li> <li><code>use nombreCualificadoClase</code></li> <li><code>use nombreCualificadoClase as NuevoNombre</code> // para renombrar elementos</li> </ul> <p>Por ejemplo, si queremos utilizar la clase <code>\\Dwes\\Ejemplos\\Producto</code> desde un recurso que se encuentra en la ra\u00edz, por ejemplo en <code>inicio.php</code>, har\u00edamos:</p> <pre><code>&lt;?php\ninclude_once(\"Dwes\\Ejemplo\\Producto.php\");\n\nuse\u00a0const\u00a0Dwes\\Ejemplos\\IVA;\nuse\u00a0\\Dwes\\Ejemplos\\Producto;\n\necho\u00a0IVA;\n$p1\u00a0=\u00a0new\u00a0Producto();\n</code></pre> <p>To <code>use</code> or not to <code>use</code></p> <p>En resumen, <code>use</code> permite acceder sin cualificar a recursos que est\u00e1n en otro namespace. Si estamos en el mismo espacio de nombre, no necesitamos <code>use</code>.</p>"},{"location":"uutt/03_PHPPOO/039_Namespace.html#organizacion","title":"Organizaci\u00f3n","text":"<p>Todo proyecto, conforme crece, necesita organizar su c\u00f3digo fuente. Se plantea una organizaci\u00f3n en la que los archivos que interactuan con el navegador se colocan en el ra\u00edz, y las clases que definamos van dentro de un namespace (y dentro de su propia carpeta <code>src</code> o <code>app</code>).</p> <p>Organizaci\u00f3n, includes y usos</p> <ul> <li>Colocaremos cada recurso en un fichero aparte.</li> <li>En la primera l\u00ednea indicaremos su namespace (si no est\u00e1 en el ra\u00edz).</li> <li>Si utilizamos otros recursos, haremos un <code>include_once</code> de esos recursos (clases, interfaces, etc...).<ul> <li>Cada recurso debe incluir todos los otros recursos que referencie: la clase de la que hereda, interfaces que implementa, clases utilizadas/recibidas como par\u00e1metros, etc...</li> </ul> </li> <li>Si los recursos est\u00e1n en un espacio de nombres diferente al que estamos, emplearemos <code>use</code> con la ruta completa para luego utilizar referencias sin cualificar.</li> </ul>"},{"location":"uutt/03_PHPPOO/039_Namespace.html#autoload","title":"Autoload","text":"<p>\u00bfNo es tedioso tener que hacer el <code>include</code> de las clases? El autoload viene al rescate.</p> <p>As\u00ed pues, permite cargar las clases (no las constantes ni las funciones) que se van a utilizar y evitar tener que hacer el <code>include_once</code> de cada una de ellas. Para ello, se utiliza la funci\u00f3n <code>spl_autoload_register</code></p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>\u00bfPor qu\u00e9 se llaman autoload?</p> <p>Porque antes se realizaba mediante el m\u00e9todo m\u00e1gico <code>__autoload()</code>, el cual est\u00e1 deprecated desde PHP 7.2</p> <p>Y \u00bfc\u00f3mo organizamos ahora nuestro c\u00f3digo aprovechando el autoload?</p> <p>Para facilitar la b\u00fasqueda de los recursos a incluir, es recomendable colocar todas las clases dentro de una misma carpeta. Nosotros la vamos a colocar dentro de <code>app</code> (m\u00e1s adelante, cuando estudiemos Laravel veremos el motivo de esta decisi\u00f3n). Otras carpetas que podemos crear son <code>test</code> para colocar las pruebas PhpUnit que luego realizaremos, o la carpeta <code>vendor</code> donde se almacenar\u00e1n las librer\u00edas del proyecto (esta carpeta es un est\u00e1ndard dentro de PHP, ya que Composer la crea autom\u00e1ticamente).</p> <p>Como hemos colocado todos nuestros recursos dentro de <code>app</code>, ahora nuestro <code>autoload.php</code> (el cual colocamos en la carpeta ra\u00edz) s\u00f3lo va a buscar dentro de esa carpeta:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0\"app/\".$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>Autoload y rutas err\u00f3neas</p> <p>En Ubuntu al hacer el include de la clase que recibe como par\u00e1metro, las barras de los namespace (<code>\\</code>) son diferentes a las de las rutas (<code>/</code>). Por ello, es mejor que utilicemos el fichero autoload:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    $ruta = \"app\\\\\".$nombreClase.'.php';\n    $ruta = str_replace(\"\\\\\", \"/\", $ruta); // Sustituimos las barras\n    include_once\u00a0$ruta';\n}\u00a0);\n?&gt;\n</code></pre>"},{"location":"uutt/03_PHPPOO/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/03_PHPPOO/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<p>RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>d. Se han creado y utilizado funciones.</li> <li>e. Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>f. Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> <li>g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> <p>RA4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas.</li> <li>b. Se han utilizado sesiones para mantener el estado de las aplicaciones Web. </li> <li>c. Se han utilizado cookies para almacenar informaci\u00f3n en el cliente Web y para recuperar su contenido.</li> <li>d. Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios</li> <li>e. Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.</li> <li>f. Se han realizado adaptaciones a aplicaciones Web existentes como gestores de contenidos u otras. </li> <li>g. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul>"},{"location":"uutt/03_PHPPOO/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 03 01 07/10/2024 <p>Objetos</p> <ul> <li>Clases</li> <li>Encapsulaci\u00f3n</li> </ul> <ul> <li>AC301. Creaci\u00f3n clase empleado</li> <li>AC302. Modificando clase empleado</li> </ul> 02 08/10/2024 <p>Constructores</p> <ul> <li>__construct</li> <li>Constructores en PHP8</li> </ul> <ul> <li>AC303. Refactorizando AC302</li> <li>AC304. Refactorizando AC303 en PHP8</li> </ul> 03 10/10/2024 <p>Clases</p> <ul> <li>Clases est\u00e1ticas</li> </ul> <ul> <li>AC305. Modificar AC304 a\u00f1adiendo constante</li> <li>AC306. Modificar AC305 para uso de setters/getters</li> <li>AC307. Modificar AC306 para a\u00f1adir m\u00e9todo con formato HTML</li> </ul> 04 14/10/2024 <p>POO en PHP</p> <ul> <li>Trabajando con objetos</li> <li>Herencia</li> </ul> <ul> <li>AC308. Herencia entre persona y empleado</li> <li>AC309. A\u00f1adiendo m\u00e9todos a empleado</li> </ul> 05 15/10/2024 <p>Herencia</p> <ul> <li>Clases abstractas</li> <li>Clases finales</li> </ul> <ul> <li>AC310. A\u00f1adiendo atributos a persona y si empleado debe pagar o no impuestos</li> <li>AC311. A\u00f1adiendo m\u00e9todos a persona y a empleados</li> <li>PR301. SA definici\u00f3n de clases bases</li> </ul> 06 16/10/2024 <p>Interfaces y m\u00e9todos encadenados y m\u00e1gicos</p> <ul> <li>Interfaces</li> <li>M\u00e9todos encadenados y m\u00e1gicos</li> </ul> <ul> <li>PR302. SA implementar interfaz de facturaci\u00f3n.</li> <li>PR303. Adapatar la SA a m\u00e9todos m\u00e1gicos</li> </ul> 07 17/10/2024 <p>Coonceptos avanzados</p> <ul> <li>Namespace</li> <li>Errores</li> <li>Excepciones</li> <li>SPL</li> </ul> <ul> <li>PR304. Implementar la gesti\u00f3n de errores y excepciones en la SA.</li> </ul> 08 21/10/2024 <p>Prueba de conocimiento</p> <ul> <li>Test</li> </ul> <p>Prueba de conocimiento</p> <ul> <li>Pr\u00e1ctico</li> </ul>"},{"location":"uutt/03_PHPPOO/ResumenUD.html","title":"Resumen UD","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad Did\u00e1ctica:</p>  RESUMEN UNIDAD DID\u00c1CTICA <p>Unidad Did\u00e1ctica</p> <p>UD3.- Programaci\u00f3n Orientada a Objetos en PHP..</p> <p>Horas</p> <p>8 Sesiones - 16 Horas</p> <p>Resultados de Aprendizaje</p> <p>RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>RA4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>Preconocimiento</p> <p>Conocimientos del m\u00f3dulo de Programaci\u00f3n de 1\u00ba y conceptos b\u00e1sicos de PHP.</p> <p>Objetivos Did\u00e1cticos</p> <p>Competencias Personales y Sociales. Transversales</p> <p> <ul> <li>OD1: Desarrollar programas orientados a objetos.</li> <li>OD2: Implementar herencia en programas.</li> <li>OD3: Gestionar errores y excepciones.</li> </ul> </p> <p>f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones.</p> <p>h. Desarrollar componentes multimedia para su integraci\u00f3n en aplicaciones web, empleando herramientas espec\u00edficas y siguiendo las especificaciones establecidas.</p> <p>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</p> <p>Contenidos Espec\u00edficos</p> <p>Materiales y Recursos</p> <p> <ul> <li>CES 1. Diferencias entre clase y objeto</li> <li>CES 2. Aplicar la encapsulaci\u00f3n</li> <li>CES 3. Dise\u00f1ar programas con herencia</li> <li>CES 4. Implementar interfaces</li> <li>CES 5. Gestionar errores y excepciones</li> </ul> </p> <p>Apuntes aportados por el profesorado.</p> <p>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</p> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC301. Creaci\u00f3n clase empleado</p> <p> <ul> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC302. Modificando clase empleado</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC305. Modificar AC304 a\u00f1adiendo constante</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC308. Herencia entre persona y empleado</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC309. A\u00f1adiendo m\u00e9todos a empleado</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC303. Refactorizando AC302</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC306. Modificar AC305 para uso de setters/getters</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC310. A\u00f1adiendo atributos a persona y si empleado debe pagar o no impuestos</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC311. A\u00f1adiendo m\u00e9todos a persona y a empleados</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC304. Refactorizando AC303 en PHP8</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC307. Modificar AC306 para a\u00f1adir m\u00e9todo con formato HTML</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR301. SA definici\u00f3n de clases bases</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR302. SA implementar interfaz de facturaci\u00f3n.</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> <li>CE4g. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR303. Adaptar la SA a m\u00e9todos m\u00e1gicos.</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> <li>CE4g. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>PR304. Implementar la gesti\u00f3n de errores y excepciones en la SA.</p> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> <li>CE4g. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</li> </ul> <p> <ul> <li>CE3b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>CE3c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>CE3d. Se han creado y utilizado funciones.</li> <li>CE3g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> <li>CE4g. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </p> <p> <ul> <li>IE4 e IE5.</li> </ul> </p> <p> <ul> <li>IC2 e IC5.</li> </ul> </p>"},{"location":"uutt/04_ProgramacionWeb/041_VariablesServidor.html","title":"Variables de servidor","text":"<p>PHP almacena la informaci\u00f3n del servidor y de las peticiones HTTP en seis arrays globales:</p> <ul> <li><code>$_ENV</code>: informaci\u00f3n sobre las variables de entorno</li> <li><code>$_GET</code>: par\u00e1metros enviados en la petici\u00f3n GET</li> <li><code>$_POST</code>: par\u00e1metros enviados en el envio POST</li> <li><code>$_COOKIE</code>: contiene las cookies de la petici\u00f3n, las claves del array son los nombres de las cookies</li> <li><code>$_SERVER</code>: informaci\u00f3n sobre el servidor</li> <li><code>$_FILES</code>: informaci\u00f3n sobre los ficheros cargados via upload</li> </ul> <p>Si nos centramos en el array <code>$_SERVER</code> podemos consultar las siguientes propiedades:</p> <ul> <li><code>PHP_SELF</code>: nombre del script ejecutado, relativo al document root (p.ej: <code>/tienda/carrito.php</code>)</li> <li><code>SERVER_SOFTWARE</code>: (p.ej: Apache)</li> <li><code>SERVER_NAME</code>: dominio, alias DNS (p.ej: <code>www.elche.es</code>)</li> <li><code>REQUEST_METHOD</code>: GET</li> <li><code>REQUEST_URI</code>: URI, sin el dominio</li> <li><code>QUERY_STRING</code>: todo lo que va despu\u00e9s de <code>?</code> en la URL (p.ej: <code>heroe=Batman&amp;nombre=Bruce</code>)</li> </ul> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/reserved.variables.server.php</p> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"PHP_SELF\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php\necho\u00a0$_SERVER[\"SERVER_SOFTWARE\"].\"&lt;br&gt;\";\u00a0//\u00a0Apache/2.4.46\u00a0(Win64)\u00a0OpenSSL/1.1.1g\u00a0PHP/7.4.9\necho\u00a0$_SERVER[\"SERVER_NAME\"].\"&lt;br&gt;\";\u00a0//\u00a0localhost\n\necho\u00a0$_SERVER[\"REQUEST_METHOD\"].\"&lt;br&gt;\";\u00a0//\u00a0GET\necho\u00a0$_SERVER[\"REQUEST_URI\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php?heroe=Batman\necho\u00a0$_SERVER[\"QUERY_STRING\"].\"&lt;br&gt;\";\u00a0//\u00a0heroe=Batman\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/041_VariablesServidor.html#propiedades-relacionadas","title":"Propiedades relacionadas","text":"<p>Otras propiedades relacionadas:</p> <ul> <li><code>PATH_INFO</code>: ruta extra tras la petici\u00f3n. Si la URL es <code>http://www.php.com/php/pathInfo.php/algo/cosa?foo=bar</code>, entonces <code>$_SERVER['PATH_INFO']</code> ser\u00e1 <code>/algo/cosa</code>.</li> <li><code>REMOTE_HOST</code>: hostname que hizo la petici\u00f3n</li> <li><code>REMOTE_ADDR</code>: IP del cliente</li> <li><code>AUTH_TYPE</code>: tipo de autenticaci\u00f3n (p.ej: Basic)</li> <li><code>REMOTE_USER</code>: nombre del usuario autenticado</li> </ul> <p>Apache crea una clave para cada cabecera HTTP, en may\u00fasculas y sustituyendo los guiones por subrayados:</p> <ul> <li><code>HTTP_USER_AGENT</code>: agente (navegador)</li> <li><code>HTTP_REFERER</code>: p\u00e1gina desde la que se hizo la petici\u00f3n</li> </ul> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"HTTP_USER_AGENT\"].\"&lt;br&gt;\";\u00a0//\u00a0Mozilla/5.0\u00a0(Windows\u00a0NT\u00a010.0;\u00a0Win64;\u00a0x64)\u00a0AppleWebKit/537.36\u00a0(KHTML,\u00a0like\u00a0Gecko)\u00a0Chrome/87.0.4280.88\u00a0Safari/537.36\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html","title":"Formularios","text":"<p>A la hora de enviar un formulario, debemos tener claro cuando usar GET o POST</p> <ul> <li> <p>GET: los par\u00e1metros se pasan en la URL</p> <ul> <li>&lt;2048 caracteres, s\u00f3lo ASCII</li> <li>Permite almacenar la direcci\u00f3n completa (marcador  / historial)</li> <li>Idempotente: dos llamadas con los mismos datos siempre debe dar el mismo resultado</li> <li>El navegador puede cachear las llamadas</li> </ul> </li> <li> <p>POST: par\u00e1metros ocultos (no encriptados)</p> <ul> <li>Sin l\u00edmite de datos, permite datos binarios.</li> <li>No se pueden cachear</li> <li>No idempotente \u2192 actualizar la BBDD</li> </ul> </li> </ul> <p>As\u00ed pues, para recoger los datos accederemos al array dependiendo del m\u00e9todo del formulario que nos ha invocado:</p> <pre><code>&lt;?php\n$par = $_GET[\"parametro\"]\n$par = $_POST[\"parametro\"]\n</code></pre> <p>Para los siguientes apartados nos vamos a basar en el siguiente ejemplo:</p> <pre><code>&lt;form action=\"formulario.php\" method=\"GET\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"\" /&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\" /&gt;\n        &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\" /&gt;\n        &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#validacion","title":"Validaci\u00f3n","text":"<p>Respecto a la validaci\u00f3n, es conveniente siempre hacer validaci\u00f3n doble:</p> <ul> <li>En el cliente mediante JS</li> <li>En servidor, antes de llamar a negocio, es conveniente volver a validar los datos.</li> </ul> <pre><code>&lt;?php\nif\u00a0(isset($_GET[\"parametro\"]))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$par\u00a0=\u00a0$_GET[\"parametro\"];\n\u00a0\u00a0\u00a0\u00a0//\u00a0comprobar\u00a0si\u00a0$par\u00a0tiene\u00a0el\u00a0formato\u00a0adecuado,\u00a0su\u00a0valor,\u00a0etc...\n}\n</code></pre> <p>Librer\u00edas de validaci\u00f3n</p> <p>Existen diversas librer\u00edas que facilitan la validaci\u00f3n de los formularios, como son respect/validation o particle/validator. Cuando estudiemos Laravel profundizaremos en la validaci\u00f3n de forma declarativa.</p>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#parametro-multivalor","title":"Par\u00e1metro multivalor","text":"<p>Existen elementos HTML que env\u00edan varios valores:</p> <ul> <li><code>select multiple</code></li> <li><code>checkbox</code></li> </ul> <p>Para recoger los datos, el nombre del elemento debe ser un array.</p> <pre><code>&lt;select name=\"lenguajes[]\" multiple=\"true\"&gt;\n    &lt;option value=\"c\"&gt;C&lt;/option&gt;\n    &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n    &lt;option value=\"php\"&gt;PHP&lt;/option&gt;\n    &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"c\" /&gt; C&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"java\" /&gt; Java&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"php\" /&gt; Php&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"python\" /&gt; Python&lt;br /&gt;\n</code></pre> <p>De manera que luego al recoger los datos:</p> <pre><code>&lt;?php\n$lenguajes = $_GET[\"lenguajes\"];\n\nforeach ($lenguajes as $lenguaje) {\n    echo \"$lenguaje &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#volviendo-a-rellenar-un-formulario","title":"Volviendo a rellenar un formulario","text":"<p>Un sticky form es un formulario que recuerda sus valores. Para ello, hemos de rellenar los atributos <code>value</code> de los elementos HTML con la informaci\u00f3n que conten\u00edan:</p> <pre><code>&lt;?php\nif (!empty($_POST['modulos']) &amp;&amp; !empty($_POST['nombre'])) {\n  // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos\n} else {\n  // Generamos el formulario\n  $nombre = $_POST['nombre'] ?? \"\";\n  $modulos = $_POST['modulos'] ?? [];\n  ?&gt;\n  &lt;form action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\" method=\"POST\"&gt;\n   &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"&lt;?= $nombre ?&gt;\" /&gt; \n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\"\n    &lt;?php if(in_array(\"DWES\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\"\n    &lt;?php if(in_array(\"DWEC\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\"/&gt;\n  &lt;/form&gt;\n&lt;?php } ?&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#subiendo-archivos","title":"Subiendo archivos","text":"<p>Se almacenan en el servidor en el array <code>$_FILES</code> con el nombre del campo del tipo <code>file</code> del formulario.</p> <pre><code>&lt;form enctype=\"multipart/form-data\" action=\"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;\"  method=\"POST\"&gt;\n    Archivo: &lt;input name=\"archivoEnviado\" type=\"file\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" name=\"btnSubir\" value=\"Subir\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Configuraci\u00f3n en <code>php.ini</code></p> <ul> <li><code>file_uploads</code>: on / off</li> <li><code>upload_max_filesize</code>: 2M</li> <li><code>upload_tmp_dir</code>: directorio temporal. No es necesario configurarlo, coger\u00e1 el predeterminado del sistema</li> <li><code>post_max_size</code>: tama\u00f1o m\u00e1ximo de los datos POST. Debe ser mayor a upload_max_filesize.</li> <li><code>max_file_uploads</code>: n\u00famero m\u00e1ximo de archivos que se pueden cargar a la vez.</li> <li><code>max_input_time</code>: tiempo m\u00e1ximo empleado en la carga (GET/POST y upload \u2192 normalmente se configura en 60)</li> <li><code>memory_limit</code>: 128M</li> <li><code>max_execution_time</code>: tiempo de ejecuci\u00f3n de un script (no tiene en cuenta el upload)</li> </ul> <p>Para cargar los archivos, accedemos al array <code>$_FILES</code>:</p> <pre><code>&lt;?php\nif (isset($_POST['btnSubir']) &amp;&amp; $_POST['btnSubir'] == 'Subir') {\n    if (is_uploaded_file($_FILES['archivoEnviado']['tmp_name'])) {\n        // subido con \u00e9xito\n        $nombre = $_FILES['archivoEnviado']['name'];\n        move_uploaded_file($_FILES['archivoEnviado']['tmp_name'], \"./uploads/{$nombre}\");\n\n        echo \"&lt;p&gt;Archivo $nombre subido con \u00e9xito&lt;/p&gt;\";\n    }\n}\n</code></pre> <p>Cada archivo cargado en <code>$_FILES</code> tiene:</p> <ul> <li><code>name</code>: nombre</li> <li><code>tmp_name</code>: ruta temporal</li> <li><code>size</code>: tama\u00f1o en bytes</li> <li><code>type</code>: tipo MIME</li> <li><code>error</code>: si hay error, contiene un mensaje. Si ok \u2192 0.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/043_CabecerasRespuesta.html","title":"Cabeceras de respuesta","text":"<p>Debe ser lo primero a devolver. Se devuelven mediante la funci\u00f3n <code>header(cadena)</code>. Mediante las cabeceras podemos configurar el tipo de contenido, tiempo de expiraci\u00f3n, redireccionar el navegador, especificar errores HTTP, etc.</p> <pre><code>&lt;?php header(\"Content-Type: text/plain\"); ?&gt;\n&lt;?php header(\"Location: http://www.ejemplo.com/inicio.html\");\nexit(); \n</code></pre> <p>Se puede comprobar en las herramientas del desarrollador de los navegadores web mediante Developer Tools --&gt; Network --&gt; Headers.</p> <p>Es muy com\u00fan configurar las cabeceras para evitar consultas a la cach\u00e9 o provocar su renovaci\u00f3n:</p> <pre><code>&lt;?php\nheader(\"Expires: Sun, 31 Jan 2021 23:59:59 GMT\");\n// tres horas\n$now = time();\n$horas3 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 60 * 60 * 3);\nheader(\"Expires: {$horas3}\");\n// un a\u00f1o\n$now = time();\n$anyo1 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 365 * 86440);\nheader(\"Expires: {$anyo1}\");\n// se marca como expirado (fecha en el pasado)\n$pasado = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\");\nheader(\"Expires: {$pasado}\");\n// evitamos cache de navegador y/o proxy\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html","title":"Gesti\u00f3n del estado","text":"<p>HTTP es un protocolo stateless, sin estado. Por ello, se simula el estado mediante el uso de cookies, tokens o la sesi\u00f3n. El estado es necesario para procesos tales como el carrito de la compra, operaciones asociadas a un usuario, etc... El mecanismo de PHP para gestionar la sesi\u00f3n emplea cookies de forma interna. Las cookies se almacenan en el navegador, y la sesi\u00f3n en el servidor web.</p>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html#cookies","title":"Cookies","text":"<p>Las cookies se almacenan en el array global <code>$_COOKIE</code>. Lo que coloquemos dentro del array, se guardar\u00e1 en el cliente. Hay que tener presente que el cliente puede no querer almacenarlas. </p> <p>Existe una limitaci\u00f3 de 20 cookies por dominio y 300 en total en el navegador.</p> <p>En PHP, para crear una cookie se utiliza la funci\u00f3n <code>setcookie</code>:</p> <pre><code>&lt;?php\nsetcookie(nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]);\nsetcookie(nombre [, valor = \"\" [, opciones = [] ]] )\n?&gt;\n</code></pre> <p>Destacar que el nombre no puede contener espacios ni el caracter <code>;</code>. Respecto al contenido de la cookie, no puede superar los 4 KB.</p> <p>Por ejemplo, mediante cookies podemos comprobar la cantidad de visitas diferentes que realiza un usuario:</p> <pre><code>&lt;?php\n$accesosPagina\u00a0=\u00a00;\nif\u00a0(isset($_COOKIE['accesos']))\u00a0{\u00a0\n    $accesosPagina\u00a0=\u00a0$_COOKIE['accesos']; // recuperamos una cookie\n    setcookie('accesos',\u00a0++$accesosPagina); // le asignamos un valor\n}\n?&gt;\n</code></pre> <p>Inspeccionando las cookies</p> <p>Si queremos ver que contienen las cookies que tenemos almacenadas en el navegador, se puede comprobar su valor en Dev Tools --&gt; Application --&gt; Storage</p> <p>El tiempo de vida de las cookies puede ser tan largo como el sitio web en el que residen. Ellas seguir\u00e1n ah\u00ed, incluso si el navegador est\u00e1 cerrado o abierto.</p> <p>Para borrar una cookie se puede poner que expiren en el pasado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0\"\",\u00a01) // pasado\n</code></pre> <p>O que caduquen dentro de un periodo de tiempo deteminado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0valor,\u00a0time() + 3600) // Caducan dentro de una hora\n</code></pre> Comunicaci\u00f3n con cookies <p>Se utilizan para:</p> <ul> <li>Recordar los inicios de sesi\u00f3n</li> <li>Almacenar valores temporales de usuario</li> <li>Si un usuario est\u00e1 navegando por una lista paginada de art\u00edculos, ordenados de cierta manera, podemos almacenar el ajuste de la clasificaci\u00f3n.</li> </ul> <p>La alternativa en el cliente para almacenar informaci\u00f3n en el navegador es el objeto LocalStorage.</p>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html#sesion","title":"Sesi\u00f3n","text":"<p>La sesi\u00f3n a\u00f1ade la gesti\u00f3n del estado a HTTP, almacenando en este caso la informaci\u00f3n en el servidor. Cada visitante tiene un ID de sesi\u00f3n \u00fanico, el cual por defecto se almacena en una cookie denominada <code>PHPSESSID</code>. Si el cliente no tiene las cookies activas, el ID se propaga en cada URL dentro del mismo dominio. Cada sesi\u00f3n tiene asociado un almac\u00e9n de datos mediante el array global <code>$_SESSION</code>, en el cual podemos almacenar y recuperar informaci\u00f3n.</p> <p>La sesi\u00f3n comienza al ejecutar un script PHP. Se genera un nuevo ID y se cargan los datos del almac\u00e9n:</p> Comunicaci\u00f3n con sesi\u00f3n <p>Las operaciones que podemos realizar con la sesi\u00f3n son:</p> <pre><code>&lt;?php\nsession_start(); // carga la sesi\u00f3n\nsession_id() // devuelve el id\n$_SESSION[clave] = valor; // inserci\u00f3n\nsession_destroy(); // destruye la sesi\u00f3n\nunset($_SESSION[clave]; // borrado\n</code></pre> <p>Vamos a ver mediante un ejemplo como podemos insertar en un p\u00e1gina datos en la sesi\u00f3n para posteriormente en otra p\u00e1gina acceder a esos datos. Por ejemplo, en <code>sesion1.php</code> tendr\u00edamos</p> <pre><code>&lt;?php\nsession_start();\u00a0//\u00a0inicializamos\n$_SESSION[\"ies\"]\u00a0=\u00a0\"IES\u00a0Severo\u00a0Ochoa\";\u00a0//\u00a0asignaci\u00f3n\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Estamos\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n&lt;br\u00a0/&gt;\n&lt;a\u00a0href=\"sesion2.php\"&gt;Y\u00a0luego&lt;/a&gt;\n</code></pre> <p>Y posteriormente podemos acceder a la sesi\u00f3n en <code>sesion2.php</code>:</p> <pre><code>&lt;?php\nsession_start();\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Otra\u00a0vez,\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n</code></pre> <p>Configurando la sesi\u00f3n en <code>php.ini</code></p> <p>Las siguiente propiedades de <code>php.ini</code> permiten configurar algunos aspectos de la sesi\u00f3n:</p> <ul> <li><code>session.save_handler</code>: controlador que gestiona c\u00f3mo se almacena (<code>files</code>)</li> <li><code>session.save_path</code>: ruta donde se almacenan los archivos con los datos (si tenemos un cluster, podr\u00edamos usar <code>/mnt/sessions</code> en todos los servidor de manera que apuntan a una carpeta compartida)</li> <li><code>session.name</code>: nombre de la sesi\u00f3n (<code>PHSESSID</code>)</li> <li><code>session.auto_start</code>: Se puede hacer que se autocargue con cada script. Por defecto est\u00e1 deshabilitado</li> <li><code>session.cookie_lifetime</code>: tiempo de vida por defecto</li> </ul> <p>M\u00e1s informaci\u00f3n en la documentaci\u00f3n oficial.</p>"},{"location":"uutt/04_ProgramacionWeb/045_AutentifcacionUsuarios.html","title":"Autentificaci\u00f3n de usuarios","text":"<p>Una sesi\u00f3n establece una relaci\u00f3n an\u00f3nima con un usuario particular, de manera que podemos saber si es el mismo usuario entre dos peticiones distintas. Si preparamos un sistema de login, podremos saber quien utiliza nuestra aplicaci\u00f3n.</p> <p>Para ello, preparemos un sencillo sistema de autenticaci\u00f3n:</p> <ul> <li>Mostrar el formulario login/password</li> <li>Comprobar los datos enviados</li> <li>A\u00f1adir el login a la sesi\u00f3n</li> <li>Comprobar el login en la sesi\u00f3n para realizar tareas espec\u00edficas del usuario</li> <li>Eliminar el login de la sesi\u00f3n cuando el usuario la cierra.</li> </ul> <p>Vamos a ver en c\u00f3digo cada paso del proceso. Comenzamos con el archivo <code>index.php</code>:</p> <pre><code>&lt;form action='login.php' method='post'&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Login&lt;/legend&gt;\n    &lt;div&gt;&lt;span class='error'&gt;&lt;?php echo $error; ?&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='usuario'&gt;Usuario:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='text' name='inputUsuario' id='usuario' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='password'&gt;Contrase\u00f1a:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='password' name='inputPassword' id='password' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;input type='submit' name='enviar' value='Enviar' /&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n  &lt;/form&gt;\n</code></pre> <p>Al hacer submit nos lleva a <code>login.php</code>, el cual hace de controlador:</p> <pre><code>&lt;?php\n// Comprobamos si ya se ha enviado el formulario\nif (isset($_POST['enviar'])) {\n    $usuario = $_POST['inputUsuario'];\n    $password = $_POST['inputPassword'];\n\n    // validamos que recibimos ambos par\u00e1metros\n    if (empty($usuario) || empty($password)) {\n        $error = \"Debes introducir un usuario y contrase\u00f1a\";\n        include \"index.php\";\n    } else {\n        if ($usuario == \"admin\" &amp;&amp; $password == \"admin\") {\n            // almacenamos el usuario en la sesi\u00f3n\n            session_start();\n            $_SESSION['usuario'] = $usuario;\n            // cargamos la p\u00e1gina principal\n            include \"main.php\";\n        } else {\n            // Si las credenciales no son v\u00e1lidas, se vuelven a pedir\n            $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\";\n            include \"index.php\";\n        }\n    }\n}\n</code></pre> <p>Dependiendo del usuario que se haya logueado, vamos a ir a una vista o a otra. Por ejemplo, en <code>main.php</code> tendr\u00edamos:</p> <pre><code>&lt;?php\n    // Recuperamos la informaci\u00f3n de la sesi\u00f3n\n    if(!isset($_SESSION)) {\n        session_start();\n    }\n\n    // Y comprobamos que el usuario se haya autentificado\n    if (!isset($_SESSION['usuario'])) {\n       die(\"Error - debe &lt;a href='index.php'&gt;identificarse&lt;/a&gt;.&lt;br /&gt;\");\n    }\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Listado de productos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido &lt;?= $_SESSION['usuario'] ?&gt;&lt;/h1&gt;\n    &lt;p&gt;Pulse &lt;a href=\"logout.php\"&gt;aqu\u00ed&lt;/a&gt; para salir&lt;/p&gt;\n    &lt;p&gt;Volver al &lt;a href=\"main.php\"&gt;inicio&lt;/a&gt;&lt;/p&gt;\n    &lt;h2&gt;Listado de productos&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Producto 1&lt;/li&gt;\n        &lt;li&gt;Producto 2&lt;/li&gt;\n        &lt;li&gt;Producto 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finalmente, necesitamos la opci\u00f3n de cerrar la sesi\u00f3n que colocamos en <code>logout.php</code>:</p> <pre><code>&lt;?php\n// Recuperamos la informaci\u00f3n de la sesi\u00f3n\nsession_start();\n\n// Y la destruimos\nsession_destroy();\nheader(\"Location: index.php\");\n?&gt;\n</code></pre> <p>Autenticaci\u00f3n en producci\u00f3n</p> <p>En la actualidad la autenticaci\u00f3n de usuario no se realiza gestionando la sesi\u00f3n direcamente, sino que se realiza mediante alg\u00fan framekwork que abstrae todo el proceso o la integraci\u00f3n de mecanismos de autenticaci\u00f3n tipo OAuth, como  estudiaremos en la \u00faltima unidad mediante Laravel.</p>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html","title":"Seguridad en el Desarrollo de Aplicaciones PHP","text":"<p>La seguridad en aplicaciones web implica mucho m\u00e1s que simplemente asegurar que las contrase\u00f1as sean fuertes. Aqu\u00ed abordamos c\u00f3mo mejorar la seguridad del lado del cliente y del servidor mediante validaci\u00f3n y limpieza de datos, adem\u00e1s de t\u00e9cnicas para el manejo seguro de contrase\u00f1as.</p>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#mejor-prevenir-que-curar-en-cliente-y-en-servidor","title":"Mejor prevenir que curar (en cliente y en servidor)","text":""},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#validacion-asegurarse-de-que-los-datos-sean-validos","title":"Validaci\u00f3n: Asegurarse de que los datos sean v\u00e1lidos","text":"<ul> <li>Usar expresiones regulares para validar.Es fundamental validar los datos ingresados por el usuario para evitar datos incorrectos o malintencionados. Funci\u00f3n PHP relevante: <ul> <li><code>preg_match</code> <pre><code>if (preg_match(\"/^[a-zA-Z ]*$/\", $name)) {\n    // El nombre es v\u00e1lido\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#limpieza-eliminar-posibles-problemas-con-los-datos","title":"Limpieza: Eliminar posibles problemas con los datos","text":"<ul> <li> <p>Limpiar contenido para eliminar marcas HTML** que podr\u00edan ser utilizadas para ataques de inyecci\u00f3n de c\u00f3digo (XSS). Funciones PHP relevantes:</p> <ul> <li><code>htmlentities</code> <pre><code>$clean_input = htmlentities($input);\n</code></pre></li> <li><code>htmlspecialchars</code> <pre><code>$clean_input = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');\n</code></pre></li> </ul> </li> <li> <p>Uso de funciones de filtrado para cualquier variable. Funci\u00f3n PHP relevante: <code>filter_var</code></p> <ul> <li>Aplicar sobre un valor:   <pre><code>$clean_email = filter_var($email, FILTER_SANITIZE_EMAIL);\n</code></pre></li> <li>Aplica una serie de filtros:   <pre><code>$options = array(\n    'options' =&gt; array(\n        'min_range' =&gt; 1,\n        'max_range' =&gt; 100\n    )\n);\n$age = filter_var($age, FILTER_VALIDATE_INT, $options);\n</code></pre></li> </ul> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html","title":"El patron de dise\u00f1o MVC","text":"<p>El patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC) es una arquitectura de software que separa una aplicaci\u00f3n en tres componentes principales: el Modelo, la Vista y el Controlador. En el contexto de PHP, MVC se utiliza com\u00fanmente para desarrollar aplicaciones web.</p>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#componentes-del-mvc-en-php","title":"Componentes del MVC en PHP","text":""},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#modelo-model","title":"Modelo (Model)","text":"<p>El Modelo representa la capa de datos de la aplicaci\u00f3n. Contiene la l\u00f3gica de negocio, la l\u00f3gica de acceso a datos y cualquier otra l\u00f3gica relacionada con la manipulaci\u00f3n de datos. En PHP, los modelos suelen ser clases que interact\u00faan con la base de datos, realizan consultas y manipulan datos.</p> <pre><code>    &lt;?php\n    class UsuarioModel {\n        public function obtenerUsuarios() {\n            // L\u00f3gica para obtener usuarios de la base de datos\n        }\n    }\n    ?&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#vista-view","title":"Vista (View)","text":"<p>La Vista es la capa de presentaci\u00f3n de la aplicaci\u00f3n. Se encarga de mostrar la informaci\u00f3n al usuario de manera visual. En PHP, las vistas suelen ser archivos de plantilla que contienen c\u00f3digo HTML y pueden incluir fragmentos de PHP para mostrar datos din\u00e1micos.</p> <pre><code>    &lt;!-- archivo vista_usuarios.php --&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lista de Usuarios&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Lista de Usuarios&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;?php foreach ($usuarios as $usuario): ?&gt;\n                &lt;li&gt;&lt;?= $usuario['nombre'] ?&gt;&lt;/li&gt;\n            &lt;?php endforeach; ?&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#controlador","title":"Controlador","text":"<p>El Controlador act\u00faa como intermediario entre el Modelo y la Vista. Se encarga de procesar las solicitudes del usuario, interactuar con el Modelo para obtener datos y enviar esos datos a la Vista para su presentaci\u00f3n. En PHP, los controladores suelen ser clases que manejan las solicitudes HTTP y llaman a los m\u00e9todos apropiados del Modelo y la Vista.</p> <pre><code>    &lt;?php\n    class UsuarioController {\n        public function listar() {\n            // L\u00f3gica para obtener datos del modelo\n            $usuarioModel = new UsuarioModel();\n            $usuarios = $usuarioModel-&gt;obtenerUsuarios();\n\n            // Cargar la vista con los datos obtenidos\n            include 'vista_usuarios.php';\n        }\n    }\n    ?&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#flujo-de-trabajo-en-mvc","title":"Flujo de Trabajo en MVC","text":"<ol> <li>El usuario realiza una solicitud HTTP, por ejemplo, para ver una lista de usuarios.</li> <li>El enrutador (Router) dirige la solicitud al controlador apropiado, en este caso, al m\u00e9todo listar del controlador UsuarioController.</li> <li>El controlador interact\u00faa con el modelo para obtener los datos necesarios, en este caso, la lista de usuarios.</li> <li>El controlador env\u00eda los datos a la vista correspondiente.</li> <li>La vista utiliza los datos proporcionados por el controlador para generar la respuesta HTML, que se env\u00eda al usuario.</li> </ol>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#ventajas-del-patron-mvc-en-php","title":"Ventajas del Patr\u00f3n MVC en PHP","text":"<ul> <li>Separaci\u00f3n de preocupaciones: Permite separar la l\u00f3gica de negocio, la presentaci\u00f3n y el control de flujo en componentes distintos, lo que facilita el mantenimiento y la escalabilidad del c\u00f3digo.</li> <li>Reutilizaci\u00f3n de c\u00f3digo: Al dividir la aplicaci\u00f3n en componentes independientes, se puede reutilizar el c\u00f3digo de manera m\u00e1s eficiente.</li> <li>Facilita la colaboraci\u00f3n: Dado que cada componente tiene responsabilidades claras y definidas, varios desarrolladores pueden trabajar en paralelo en diferentes partes de la aplicaci\u00f3n.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/048_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 es una p\u00e1gina din\u00e1mica con PHP?</li> <li>Una p\u00e1gina que cambia su contenido en funci\u00f3n del c\u00f3digo HTML.</li> <li>Una p\u00e1gina que utiliza JavaScript para mostrar contenido variable.</li> <li>Una p\u00e1gina que modifica su contenido en funci\u00f3n de la interacci\u00f3n del usuario y datos de servidores.</li> <li>Una p\u00e1gina que est\u00e1 escrita \u00fanicamente en PHP sin HTML.</li> </ol> Respuesta correcta <p>Respuesta correcta: c. Una p\u00e1gina que modifica su contenido en funci\u00f3n de la interacci\u00f3n del usuario y datos de servidores..</p> <ol> <li>\u00bfPara qu\u00e9 se utilizan principalmente las cabeceras de respuesta en PHP?</li> <li>Para enviar informaci\u00f3n espec\u00edfica del navegador al servidor.</li> <li>Para modificar la apariencia del contenido de la p\u00e1gina.</li> <li>Para controlar el comportamiento de las p\u00e1ginas web cacheadas.</li> <li>Para establecer par\u00e1metros de conexi\u00f3n con la base de datos.</li> </ol> Respuesta correcta <p>Respuesta correcta: c. Para controlar el comportamiento de las p\u00e1ginas web cacheadas..</p> <ol> <li>\u00bfQu\u00e9 son las cookies en PHP?</li> <li>Datos almacenados en el servidor para identificar al usuario.</li> <li>Peque\u00f1os archivos guardados en el ordenador del usuario que el sitio web utiliza para recordar informaci\u00f3n sobre el usuario.</li> <li>Funciones integradas de PHP para mejorar la velocidad del sitio.</li> <li>Herramientas de desarrollo para depurar el c\u00f3digo PHP.</li> </ol> Respuesta correcta <p>Respuesta correcta: b. Peque\u00f1os archivos guardados en el ordenador del usuario que el sitio web utiliza para recordar informaci\u00f3n sobre el usuario..</p> <ol> <li>\u00bfQu\u00e9 es una sesi\u00f3n en PHP?</li> <li>Una conexi\u00f3n continua entre el cliente y el servidor que permite intercambiar informaci\u00f3n constantemente.</li> <li>Un m\u00e9todo para guardar datos del usuario en una base de datos a trav\u00e9s de PHP.</li> <li>Una forma de guardar informaci\u00f3n que se puede utilizar a trav\u00e9s de m\u00faltiples p\u00e1ginas durante la visita del usuario al sitio.</li> <li>Un tipo de cookie que mejora la seguridad del sitio web.</li> </ol> Respuesta correcta <p>Respuesta correcta: c. Una forma de guardar informaci\u00f3n que se puede utilizar a trav\u00e9s de m\u00faltiples p\u00e1ginas durante la visita del usuario al sitio..</p> <ol> <li>\u00bfQu\u00e9 describe mejor el patr\u00f3n de dise\u00f1o MVC utilizado en el desarrollo web con PHP?</li> <li>MVC separa los datos de los usuarios de la l\u00f3gica de negocio del backend.</li> <li>MVC divide la aplicaci\u00f3n en tres partes interconectadas: modelo, vista y controlador.</li> <li>MVC es un tipo de base de datos utilizado exclusivamente en PHP.</li> <li>MVC combina todas las funciones de la aplicaci\u00f3n en un \u00fanico archivo para mejorar el rendimiento.</li> </ol> Respuesta correcta <p>Respuesta correcta: b. MVC divide la aplicaci\u00f3n en tres partes interconectadas: modelo, vista y controlador..</p>"},{"location":"uutt/04_ProgramacionWeb/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/04_ProgramacionWeb/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/ResumenUD.html","title":"Resumen UD","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad Did\u00e1ctica:</p>  RESUMEN UNIDAD DID\u00c1CTICA <p>Unidad Did\u00e1ctica</p> <p>UD1.- Arquitectura Web y herramientas de programaci\u00f3n..</p> <p>Horas</p> <p>2 Sesiones - 4 Horas</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <p>Competencias Personales y Sociales. Transversales</p> <p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor.</li> <li>OD3: Configurar entorno de trabajo en local</li> </ul> </p> <p>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</p> <p>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</p> <p>Contenidos Espec\u00edficos</p> <p>Materiales y Recursos</p> <p> <ul> <li>CES 1. Diferencias entre cliente y servidor</li> <li>CES 2. Arquitectura de una web din\u00e1mica</li> <li>CES 3. Modelo Vista Controlador (MVC)</li> <li>CES 4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES 5. Configuraci\u00f3n entorno local</li> </ul> </p> <p>Apuntes aportados por el profesorado.</p> <p>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</p> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p> <ul> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas.</li> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul> <p> <ul> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE1.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</li> </ul> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas.</li> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> <li>CE1f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IE4 e IE5.</li> </ul> </p> <p> <ul> <li>IC2 e IC5.</li> </ul> </p>"}]}