{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Desarrollo Web en Entorno Servidor","text":"<p>Estos apuntes desarrollan los materiales did\u00e1cticos del m\u00f3dulo de Desarrollo Web en Entorno Servidor (DWES). Dicho m\u00f3dulo se desarrolla en el segundo curso del Ciclo Superior de Desarrollo de Aplicaciones Web (DAW), cuyas ense\u00f1anzas m\u00ednimas se definen en el RD 686/2010, el cual fue modificado por el RD 405/2023, y se concreta el curr\u00edculo en la Orden 50/2012 de 25 de septiembre.</p> <p>Informaci\u00f3n del m\u00f3dulo</p> <p>Cabe destacar las siguientes caracter\u00edsticas del m\u00f3dulo DWES:</p> <ul> <li>En la modalidad presencial la duraci\u00f3n del m\u00f3dulo es de 160 horas lectivas, a raz\u00f3n de 8 horas semanales.</li> <li>Se ha planificado bas\u00e1ndose en 4 sesiones lectivas por semana, con 2 horas de duraci\u00f3n cada una de ellas.</li> </ul>"},{"location":"index.html#competencias","title":"Competencias","text":"<p>El presente m\u00f3dulo contribuye a las siguiente competencias profesionales, personales y sociales:</p> Competencias profesionales c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web. d. Gestionar bases de datos, interpretando su dise\u00f1o l\u00f3gico y verificando integridad, consistencia, seguridad y accesibilidad de los datos. f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones. g. Desarrollar interfaces en aplicaciones web de acuerdo con un manual de estilo, utilizando lenguajes de marcas y est\u00e1ndares web. h. Desarrollar componentes multimedia para su integraci\u00f3n en aplicaciones web, empleando herramientas espec\u00edficas y siguiendo las especificaciones establecidas. j. Desarrollar e integrar componentes software en el entorno del servidor web, empleando herramientas y lenguajes espec\u00edficos, para cumplir las especificaciones de la aplicaci\u00f3n. k. Desarrollar servicios para integrar sus funciones en otras aplicaciones web, asegurando su funcionalidad. l. Integrar servicios y contenidos distribuidos en aplicaciones web, asegurando su funcionalidad. m. Completar planes de pruebas verificando el funcionamiento de los componentes software desarrollados, seg\u00fan las especificaciones. n. Elaborar y mantener la documentaci\u00f3n de los procesos de desarrollo, utilizando herramientas de generaci\u00f3n de documentaci\u00f3n y control de versiones. \u00f1. Desplegar y distribuir aplicaciones web en distintos \u00e1mbitos de implantaci\u00f3n, verificando su comportamiento y realizando modificaciones. Competencias personales y sociales q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo."},{"location":"index.html#mapa-general-de-la-programacion-didactica","title":"Mapa General de la Programaci\u00f3n Did\u00e1ctica","text":"<p>A modo de resumen de la Programaci\u00f3n did\u00e1ctica (PD) de DWES, se muestra la secuenciaci\u00f3n de las Unidades de trabajo planificadas y los Resultados de aprendizaje (RAs) tratados en cada una de dichas unidades.</p> <p>Nombre del m\u00f3dulo profesional</p> <p>Desarrollo Web en Entorno Servidor</p> <p>Curso</p> <p>2\u00ba</p> <p>Horas</p> <p>160</p> <p>UUTT</p> <p>RA1</p> <p>RA2</p> <p>RA3</p> <p>RA4</p> <p>RA5</p> <p>RA6</p> <p>RA7</p> <p>RA8</p> <p>RA9</p> <p>Relevancia temporal</p> <p>Relevancia porcentual</p> <p>Primera Evaluaci\u00f3n</p> <p>UT 01. Arquitectura Web y herramientas de programaci\u00f3n</p> <p>4</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>4</p> <p>2.5%</p> <p>UT 02. PHP</p> <p></p> <p>12</p> <p>12</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>24</p> <p>15%</p> <p>UT 03. POO</p> <p></p> <p></p> <p>12</p> <p>4</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>16</p> <p>10%</p> <p>UT 04. Programaci\u00f3n web</p> <p></p> <p></p> <p></p> <p>12</p> <p>8</p> <p></p> <p></p> <p></p> <p></p> <p>20</p> <p>12.5%</p> <p>UT 05. Herramientas programaci\u00f3n web</p> <p></p> <p></p> <p></p> <p>4</p> <p>4</p> <p></p> <p></p> <p></p> <p></p> <p>8</p> <p>5%</p> <p>Segunda Evaluaci\u00f3n</p> <p>UT 06. Acceso a Datos</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>24</p> <p></p> <p></p> <p></p> <p>24</p> <p>15%</p> <p>UT 07. Proyecto I Estructura</p> <p></p> <p></p> <p></p> <p>4</p> <p></p> <p></p> <p></p> <p>8</p> <p>8</p> <p>20</p> <p>12.5%</p> <p>UT 08. Proyecto II L\u00f3gica de negocio</p> <p></p> <p></p> <p></p> <p></p> <p>4</p> <p>8</p> <p></p> <p></p> <p>8</p> <p>20</p> <p>12.5%</p> <p>UT 09. Proyecto III Servicios Rest</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>12</p> <p></p> <p></p> <p>12</p> <p>7.5%</p> <p>UT 10. Proyecto Reactivo</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>12</p> <p></p> <p></p> <p>12</p> <p>7.5%</p> <p>Resultados de aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>12</p> <p>7.5%</p> <p>RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</p> <p>12</p> <p>7.5%</p> <p>RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>24</p> <p>15%</p> <p>RA4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>12</p> <p>7.5%</p> <p>RA5. Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</p> <p>16</p> <p>10%</p> <p>RA6. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n.</p> <p>24</p> <p>15%</p> <p>RA7. Desarrolla servicios Web analizando su funcionamiento e implantando la estructura de sus componentes.</p> <p>24</p> <p>15%</p> <p>RA8. Genera p\u00e1ginas Web din\u00e1micas analizando y utilizando tecnolog\u00edas del servidor Web que a\u00f1adan c\u00f3digo al lenguaje de marcas.</p> <p>20</p> <p>12.5%</p> <p>RA9. Desarrolla aplicaciones Web h\u00edbridas seleccionando y utilizando librer\u00edas de c\u00f3digo y repositorios heterog\u00e9neos de informaci\u00f3n.</p> <p>16</p> <p>10%</p>"},{"location":"evaluacion.html","title":"Evaluaci\u00f3n","text":"<p>En la siguiente p\u00e1gina se especifica la manera en la que se eval\u00faa al alumno. </p> <p>Evaluaci\u00f3n</p> <p>El objetivo de la evaluaci\u00f3n del proceso de aprendizaje del alumnado es conocer si ha alcanzado, para este m\u00f3dulo profesional, el/los resultado/s de aprendizaje seg\u00fan los diferentes criterios de evaluaci\u00f3n. La evaluaci\u00f3n del proceso de aprendizaje de la unidad de trabajo ser\u00e1 continua, formativa, integradora y criterial.</p> <p>A lo largo de este apartado se enunciar\u00e1n una serie de conceptos que permitir\u00e1n la explicaci\u00f3n de la manera de evaluaci\u00f3n del presente m\u00f3dulo.</p>"},{"location":"evaluacion.html#resultados-de-aprendizaje","title":"Resultados  de Aprendizaje","text":"<p>Resultado de Aprendizaje (RA)</p> <p>Los resultados de aprendizaje son conocimientos, destrezas, habilidades y competencias que esperamos que el alumno adquiera. </p> <p>Es importante conocer los RAs ya que la evaluaci\u00f3n de la formaci\u00f3n profesional se basa en la valoraci\u00f3n dichos resultados de aprendizaje. </p>"},{"location":"evaluacion.html#aportacion-a-la-calificacion-de-los-ras","title":"Aportaci\u00f3n a la calificaci\u00f3n de los RAs","text":"Resultado de Aprendizaje % de la calificaci\u00f3n RA 01: Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. 8% RA 02: Escribe sentencias ejecutables por un servidor web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. 8% RA 03: Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. 13% RA 04: Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. 8% RA 05: Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. 13% RA 06: Desarrolla aplicaciones web de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. 15% RA 07: Desarrolla servicios web reutilizables y accesibles mediante protocolos web, verificando su funcionamiento. 15% RA 08: Genera p\u00e1ginas web din\u00e1micas analizando y utilizando tecnolog\u00edas y frameworks del servidor web que a\u00f1adan c\u00f3digo al lenguaje de marcas. 13% RA 09: Desarrolla aplicaciones web h\u00edbridas seleccionando y utilizando tecnolog\u00edas, frameworks servidor y repositorios heterog\u00e9neos de informaci\u00f3n. 10%"},{"location":"evaluacion.html#procedimiento-de-evaluacion","title":"Procedimiento de Evaluaci\u00f3n","text":"<p>La calificaci\u00f3n de cada RA se obtendr\u00e1 de la media ponderada de las actividades formativas trabajadas. Para ello se utilizan los siguientes procedimientos de evaluaci\u00f3n:</p> Instrumento de evaluaci\u00f3n Puntuaci\u00f3n IE1. Actividades de la Unidad (AU). Actividades te\u00f3rico-practicas que ser\u00e1n evaluadas con el IC1. 3 puntos IE2. Pr\u00e1cticas/Trabajos individuales o colaborativas (PT). Pr\u00e1cticas de investigaci\u00f3n evaluables con el IC2 o IC3 10 puntos IE3. Defensa de proyectos (DP). Mediante sesiones de evaluaci\u00f3n orales en las que el alumnado deber\u00e1 exponer el proyecto que ser\u00e1 evaluado con el IC4. 30 puntos IE4. Prueba de conocimiento (PC).Test: 20 preguntas sobre los conceptos de la unidad. Se evaluar\u00e1 con el IC5.  10 puntos IE5. Prueba de conocimiento (PC). Ejercicios pr\u00e1cticos: Ejercicio sobre las actividades realizadas a lo largo del m\u00f3dulo. Se evaluar\u00e1 con el IC2.  20 puntos Instrumento de calificaci\u00f3n  Valores IC1: Escala de valores. Dise\u00f1ada para las actividades diarias. <ol> <li>0: No entregada o copiada.</li> <li>1: Entregado con soluci\u00f3n err\u00f3nea o incompleta.</li> <li>2: Entregado y soluci\u00f3n aceptable, aunque con alg\u00fan apartado incompleto.</li> <li>3: Entregado y soluci\u00f3n correcta.</li> </ol> IC2: R\u00fabrica actividad individual. Dise\u00f1ada para las actividades m\u00e1s complejas Propia de la actividad IC3: R\u00fabrica actividad colaborativa. Dise\u00f1ada para las actividades en grupo Propia de la actividad IC4: R\u00fabrica defensa de exposici\u00f3n. Dise\u00f1ada para las exposiciones en clase como en v\u00eddeo Propia de la actividad IC5: Escala para test. Dise\u00f1ada para test de evaluaci\u00f3n <ol> <li>Correcta: 0,5</li> <li>Err\u00f3nea: 0,25</li> </ol>"},{"location":"evaluacion.html#calificacion","title":"Calificaci\u00f3n","text":"<p>La evaluaci\u00f3n es un proceso continuo y formativo basado en la calificaci\u00f3n de competencias a trav\u00e9s de los resultados de aprendizaje. En el caso de DWES se realiza la media ponderada simple de las calificaciones de cada RA.</p> <p>Importante</p> <p>LA CALIFICACI\u00d3N FINAL DEL M\u00d3DULO se obtendr\u00e1 de la media ponderada de las calificaciones de cada RA. Durante las evaluaciones, \u00e9sta ser\u00e1 la ponderaci\u00f3n de los RAs visto hasta ese momento del curso.</p>"},{"location":"evaluacion.html#evaluaciones-ordinaria-y-extraordinaria","title":"Evaluaciones Ordinaria y Extraordinaria","text":"<p>En el caso de no superar alg\u00fan resultado de aprendizaje durante la evaluaci\u00f3n continua:</p> <p>Importante</p> <ul> <li>En primera instancia se recupera el RA en el examen de convocatoria final Ordinaria.</li> <li>En segunda instancia si todav\u00eda no se ha superado el RA en la Ordinaria se debe aprobar en examen final de la convocatoria Extraordinaria.</li> </ul>"},{"location":"metodologia.html","title":"Metodolog\u00eda","text":""},{"location":"metodologia.html#objetivos-didacticos","title":"Objetivos Did\u00e1cticos","text":"<p>A lo largo del curso, se te proporciona contenidos y diversas actividades, dise\u00f1adas para facilitar el proceso. Este aprendizaje se enriquece con clases magistrales y la combinaci\u00f3n de trabajo individual y en equipo.</p> <p>A continuaci\u00f3n, se detallan una serie de Objetivos Did\u00e1cticos que est\u00e1n dise\u00f1ados para proporcionar una base s\u00f3lida en el desarrollo web en el lado del servidor, preparando aal alumnado para los desaf\u00edos actuales y futuros en el campo del desarrollo de aplicaciones web:</p> <ul> <li>Comprender los Fundamentos de la Programaci\u00f3n en el Lado del Servidor: Los estudiantes aprender\u00e1n los principios b\u00e1sicos de la programaci\u00f3n del lado del servidor, incluyendo la gesti\u00f3n de solicitudes y respuestas, manipulaci\u00f3n de datos y la interacci\u00f3n con bases de datos.</li> <li> <p>Dominar Lenguajes de Programaci\u00f3n del Servidor: Adquirir habilidades avanzadas en al menos un lenguaje de programaci\u00f3n del lado del servidor como PHP, entendiendo su sintaxis, caracter\u00edsticas y mejores pr\u00e1cticas.</p> </li> <li> <p>Gestionar Datos necesarios para una aplicaci\u00f3n: Desarrollar la capacidad para crear, manipular y mantener bases de datos relacionales y no relacionales, entendiendo conceptos como modelos de datos, SQL, y la integraci\u00f3n de bases de datos en aplicaciones web.</p> </li> <li> <p>Implementar Aplicaciones Web Seguras: Aprender a identificar y protegerse contra vulnerabilidades comunes en el desarrollo web, como inyecciones SQL, implementando pr\u00e1cticas de seguridad robustas.</p> </li> <li> <p>Desarrollar Aplicaciones Web Din\u00e1micas y Escalables: Ense\u00f1ar a los estudiantes a construir aplicaciones web que no solo sean funcionales y est\u00e9ticamente agradables, sino tambi\u00e9n eficientes, escalables y adaptativas a diferentes entornos y dispositivos.</p> </li> </ul> <p>Para lograrlos, se hace uso de varias metodolog\u00edas para lograr que la experiencia de ense\u00f1anza-aprendizaje del alumnado sea lo m\u00e1s \u00f3ptima posible:</p> <ul> <li>Flipped Classroom: se har\u00e1 uso de esta metodolog\u00eda en las sesiones que se requiera que el alumnado acuda a clase con conocimientos relacionados con lo que se trabaja en esa sesi\u00f3n.</li> <li>Aprendizaje Basado en Proyectos (ABP): se emplea esta metodolog\u00eda para que el alumnado trabaje de una manera lo m\u00e1s cercana al entorno profesional.</li> <li>Aprendizaje Colaborativo basado en Retos (ACbR): en la parte final del m\u00f3dulo, se propone el trabajo colaborativo y en retos para desarrollar un proyecto a base de peque\u00f1os retos que se proponen al alumnado.</li> </ul>"},{"location":"metodologia.html#situacion-de-aprendizaje","title":"Situaci\u00f3n de Aprendizaje","text":"<p>Las situaciones de aprendizaje se convierten en un recurso poderoso para fusionar los logros educativos de diversas disciplinas a trav\u00e9s de actividades y tareas con sentido y relevancia, promoviendo la resoluci\u00f3n creativa y colaborativa de problemas. Esto fortalece aspectos como la autoestima, la autonom\u00eda, la reflexi\u00f3n y la responsabilidad.</p>"},{"location":"metodologia.html#tabla-resumen","title":"Tabla resumen","text":"<p>En la siguiente tabla se muestran los datos identificativos de la situaci\u00f3n de aprendizaje de DWES</p> DATOS IDENTIFICATIVOS T\u00edtulo LA PR\u00d3XIMA GRAN REVOLUCI\u00d3N DEL ECOMMERCE Ciclo Desarrollo de Aplicaciones Web M\u00f3dulo Desarrollo Web en Entorno Servidor Vinculaci\u00f3n Desarrollo Web en Entorno, Dise\u00f1o de Interfaces, Programaci\u00f3n y Base de Datos Descripci\u00f3n En esta Situaci\u00f3n de Aprendizaje de DWES, tienes ante ti el gran reto de crear la pr\u00f3xima gran herramienta del comercio electr\u00f3nico. Para tal prop\u00f3sito, \"Docentes Asociados S.A.\", necesita que alcances los resultados de aprendizaje y competencias que se establecen para el m\u00f3dulo de Desarrollo Web en Entorno Servidor Metodolog\u00eda ABP y ACbR"},{"location":"metodologia.html#tipologia-de-las-acciones-del-proceso-ensenanza-aprendizaje","title":"Tipolog\u00eda de las acciones del proceso ense\u00f1anza-aprendizaje","text":""},{"location":"metodologia.html#actividades-de-ensenanza-aprendizaje-aea","title":"Actividades de Ense\u00f1anza-Aprendizaje (AEA)","text":"<ul> <li>Objetivo: Facilitar el proceso donde los estudiantes adquieren nuevos conocimientos y habilidades.</li> <li>Caracter\u00edsticas:<ul> <li>Constituyen la base del proceso educativo en el aula.</li> <li>Incluyen una mezcla de explicaci\u00f3n directa, demostraci\u00f3n y pr\u00e1ctica supervisada.</li> </ul> </li> </ul>"},{"location":"metodologia.html#actividades-de-refuerzo-ar","title":"Actividades de Refuerzo (AR)","text":"<ul> <li>Objetivo: Ayudar a los estudiantes a consolidar y reafirmar los conocimientos y habilidades que ya han sido introducidos.</li> <li>Caracter\u00edsticas:<ul> <li>Se dise\u00f1an para estudiantes que necesitan apoyo adicional para alcanzar los objetivos de aprendizaje b\u00e1sicos.</li> <li>Suelen ser m\u00e1s guiadas y estructuradas para asegurar la comprensi\u00f3n.</li> </ul> </li> </ul>"},{"location":"metodologia.html#actividades-de-profundizacion-ap","title":"Actividades de Profundizaci\u00f3n (AP)","text":"<ul> <li>Objetivo: Permitir a los estudiantes que han alcanzado los objetivos b\u00e1sicos explorar temas en mayor profundidad.</li> <li>Caracter\u00edsticas:<ul> <li>Dirigidas a estudiantes que buscan retos adicionales m\u00e1s all\u00e1 del curr\u00edculo est\u00e1ndar.</li> <li>Fomentan habilidades de pensamiento cr\u00edtico, an\u00e1lisis y s\u00edntesis.</li> </ul> </li> </ul>"},{"location":"metodologia.html#actividades-de-la-situacion-de-aprendizaje-sa","title":"Actividades de la Situaci\u00f3n de Aprendizaje (SA)","text":"<ul> <li>Objetivo: Integrar el conocimiento y las habilidades de los estudiantes en un contexto pr\u00e1ctico o de la vida real.</li> <li>Caracter\u00edsticas:<ul> <li>Dise\u00f1adas para evaluar la capacidad del estudiante de aplicar lo aprendido en situaciones nuevas o desconocidas.</li> <li>A menudo interdisciplinarias, requieren que los estudiantes utilicen m\u00faltiples habilidades y \u00e1reas de conocimiento.</li> </ul> </li> </ul>"},{"location":"to-do.html","title":"To-Do","text":""},{"location":"to-do.html#pendiente-de-realizacion","title":"Pendiente de realizaci\u00f3n","text":"<ul> <li> UT 06</li> <li> UT 07</li> <li> UT 08</li> <li> UT 09</li> <li> UT 10</li> <li> Pruebas espec\u00edficas<ul> <li> UT 02</li> <li> UT 03</li> <li> UT 04</li> <li> UT 05</li> <li> UT 06</li> <li> UT 07</li> <li> UT 08</li> <li> UT 09</li> <li> UT 10</li> </ul> </li> </ul>"},{"location":"to-do.html#pendientes-de-correccion","title":"Pendientes de correcci\u00f3n","text":""},{"location":"to-do.html#0205","title":"02/05","text":"<ul> <li> Grid en UT 03</li> <li> Se me ha ocurrido una actividad para la UT4, y las cabeceras de respuesta \u2026. generar un csv, y cambiar el content-type</li> <li> 4.3 Configuraci\u00f3n y depuraci\u00f3n\u00b6. Se puede comprobar en las herramientas del desarrollador de los navegadores web mediante Developer Tools --&gt; Network --&gt; Headers. Poner una captura de pantalla del navegador. </li> <li> Apartado 4.7 \u2026 alguna actividad de profundizaci\u00f3n sobre frameworks MVC en PHP</li> <li> En la UT3, los RA no est\u00e1n bien. En esa p\u00e1gina, pondr\u00eda en alg\u00fan sitio que es la UT3 - POO en PHP</li> <li> Si hay m\u00e1s de un RA, renombrar el t\u00edtulo a ResultadoS de Aprendizaje (en plural)</li> <li> en la 5.1, antes de explicar Composer, igual es conveniente explicar el concepto de librer\u00eda y framework, aunque sea a modo de recordatorio para contextualizar la necesidad de Composer</li> <li> Retos:<ul> <li> Definici\u00f3n Reto 1 - UT2 y UT3 (individual)</li> <li> Definici\u00f3n Reto 2 - UT4 y UT5 (parejas)</li> <li> Definici\u00f3n Reto 3 - UT6 y UT7 (individual)</li> <li> Definici\u00f3n Reto 4 - UT8 a UT10 (reactivo - equipos - Scrum + cooperativo)</li> </ul> </li> </ul>"},{"location":"to-do.html#verano","title":"Verano","text":"<ul> <li> Tablas Programaci\u00f3n aula y Resumen a html sem\u00e1ntico para aprovechar md_in_html<ul> <li> Marcar actividades en negrita.</li> <li> Tooltips a todas las abreviaturas</li> </ul> </li> <li> Links de referencia en las UUTT:<ul> <li> UT 02</li> <li> UT 03</li> <li> UT 04</li> <li> UT 05</li> <li> UT 06</li> <li> UT 07</li> <li> UT 08</li> <li> UT 09</li> <li> UT 10</li> </ul> </li> </ul>"},{"location":"includes/abbreviations.html","title":"Abbreviations","text":""},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html","title":"Modelo Cliente/servidor","text":"<p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p> <p> </p> Modelo Cliente-Servidor. <p>Hoy en d\u00eda, es frecuente que uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes. En las aplicaciones web, el cliente es el navegador web. El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html#pagina-web-dinamica","title":"P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <ul> <li>Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</li> <li>Utilizar servicios REST de terceros invocados desde JS.</li> </ul> <p> </p> Web est\u00e1tica vs Web din\u00e1mica. <p>Las tecnolog\u00edas empleadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp"},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html#single-page-application-spa","title":"Single Page Application (SPA)","text":"<p>A d\u00eda de hoy, gran parte del desarrollo web est\u00e1 en plena transici\u00f3n de una arquitectura web cliente-servidor cl\u00e1sica donde el cliente realiza una llamada al backend, por una arquitectura SPA donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunic\u00e1ndose mediante JSON).</p> <p> </p> Arquitectura tradicional vs SPA."},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html","title":"Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html#tier","title":"Tier","text":"<p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> <p>Cluster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html#layer","title":"Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n. Es la capa donde la aplicaci\u00f3n se muestra al usuario. B\u00e1sicamente es la GUI (Graphical User Interface, Interfaz Gr\u00e1fica de Usuario). En el caso de una aplicaci\u00f3n web ser\u00eda el c\u00f3digo HTML que se carga directamente en el navegador web. En cualquier caso, se ejecuta directamente en el equipo del cliente.</li> <li>Negocio / Aplicaci\u00f3n / Proceso. Es la capa intermedia donde se lleva a cabo toda la l\u00f3gica de la aplicaci\u00f3n. Siempre se ejecutar\u00e1 en el lado servidor. Esta capa, tras realizar todos los c\u00e1lculos y/o operaciones sobre los datos, genera el c\u00f3digo HTML que ser\u00e1 presentado al usuario en la capa siguiente.</li> <li>Datos / Persistencia. Es la capa que almacena los datos. B\u00e1sicamente, en condiciones normales, hace referencia al propio SGBD que es el encargado de almacenar los datos. Dependiendo de la arquitectura de la aplicaci\u00f3n, esta capa y la de negocio se pueden encontrar f\u00edsicamente en el mismo equipo, aunque tambi\u00e9n es posible que se tengan que separar por cuestiones de rendimiento. La capa de datos sirve todas la informaci\u00f3n necesaria a la capa de negocio para llevar a cabo sus operaciones.</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> <p> </p> Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas."},{"location":"uutt/01_Arquitectura/013_MCV.html","title":"Modelo Vista Controlador (MVC)","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.</p>"},{"location":"uutt/01_Arquitectura/013_MCV.html#actividades","title":"Actividades","text":"<ul> <li>AC101 (AEA). (RA1 / CE1a CE1e CE1g / IC1 / 1p) Como primer paso para desarrollar el proyecto que se te ha encargado, el director de proyectos o project manager te solicita que investigues los tres frameworks de PHP m\u00e1s utilizados en la actualidad. Es importante que realices una comparaci\u00f3n entre ellos para facilitar la toma de decisiones.</li> </ul>"},{"location":"uutt/01_Arquitectura/014_Decisiones.html","title":"Decisiones de dise\u00f1o","text":"<p>A la hora de desarrollar cualquier proyecto web debemos realizarnos una serie de preguntas como son:</p> <ul> <li>\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?</li> <li>\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?</li> <li>\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?</li> <li>\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?</li> <li>\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?</li> <li>\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?</li> </ul> <p>Una vez que las hemos respondido, estaremos listo para comenzar con \u00e9l.</p> <p> </p> Decisiones de dise\u00f1o."},{"location":"uutt/01_Arquitectura/015_Herramientas.html","title":"Herramientas","text":""},{"location":"uutt/01_Arquitectura/015_Herramientas.html#servidor-web","title":"Servidor Web","text":"<p>Un servidor web es un software que forma parte del servidor y tiene como misi\u00f3n principal devolver informaci\u00f3n ((HTML, CSS, JS, JSON, im\u00e1genes, etc...)) cuando recibe peticiones  HTTP (GET, POST, DELETE, ...) por parte de los usuarios.</p> <p>El producto m\u00e1s implantando es Apache Web Server, creado en 1995.</p> <ul> <li>Software libre y multiplataforma</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx. Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>Para saber m\u00e1s...</p> <p>Comparativa servidores web</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#servidor-de-aplicaciones","title":"Servidor de Aplicaciones","text":"<ul> <li>Software que ofrece servicios adicionales a los de un servidor web:<ul> <li>Clustering</li> <li>Balanceo de carga</li> <li>Tolerancia a fallos</li> </ul> </li> <li>Tomcat es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java.<ul> <li>Contiende un contenedor Web Java que interpreta Servlets y JSP.</li> </ul> </li> </ul> <p>Info</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#lenguajes-en-el-servidor","title":"Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones empresariales. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas.</p> <p> </p> JavaEE."},{"location":"uutt/01_Arquitectura/015_Herramientas.html#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente en la versi\u00f3n 8.X . Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code> y <code>?&gt;</code><ul> <li>Para generar c\u00f3digo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code></li> </ul> </li> <li>Multitud de librer\u00edas y frameworks:<ul> <li>Laravel, Symfony, Codeigniter, Zend</li> </ul> </li> </ul> <p>Su documentaci\u00f3n es bastante completa</p> <p>El siguiente mapa mental muestra un resumen de sus elementos:</p> <p> </p> PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#actividades","title":"Actividades","text":"<ul> <li>PR101 (AR). (RA1 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Desde el departamento de proyectos nos solicitan que investigues las tecnolog\u00edas empleadas en cliente y servidor necesarias para el desarrollo de la aplicaci\u00f3n encargada por la empresa \"Docentes Asociados S.A.\". Para ello no dudes en consultar cuales son las que usan tus webs de referencia.</li> </ul>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html","title":"Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A lo largo del curso vamos a utilizar la versi\u00f3n 8.X de PHP.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#xampp","title":"XAMPP","text":"<p>XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP o MAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>la \u00faltima P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>XAMPP en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#docker","title":"Docker","text":"<p>Docker es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Para ello es necesario tener instalado Docker Desktop en nuestros entornos de desarrollo (el cual ya incluye en nucleo de Docker y la herramienta docker compose).</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar PHP <code>8.X</code>. Respecto a Docker, para escribir los apuntes hemos utilizado la version <code>24</code> y la version <code>2.23.2</code> de docker compose. Finalmente, la versi\u00f3n de Docker Desktop que hemos utilizado es la <code>4.25.2</code>.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#plantilla-servidor-web-php","title":"Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arraque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos a rellenar el archivo <code>docker-compose.yaml</code> con:</p> Apache y PHP <pre><code>  # Services\n  services:\n    # Apache + PHP\n    apache_php:\n      image: php:8-apache\n      # Preparamos un volumen para almacenar nuestro c\u00f3digo\n      volumes:\n        - ./src/:/var/www/html\n      expose:\n        - 80\n      ports:\n        - 80:80\n</code></pre> Nginx y PHP <pre><code>  # Services\n  services:\n    nginx:\n      image: nginx:1.19\n      ports:\n        - 80:80\n      volumes:\n        - ./src:/var/www/php\n        - ./.docker/nginx/conf.d:/etc/nginx/conf.d # cargamos la configuraci\u00f3n de un fichero externo\n      depends_on:\n        - php   # enlazamos nginx con php\n    php:\n      image: php:8.0-fpm\n      working_dir: /var/www/php\n      volumes:\n        - ./src:/var/www/php\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente. Para facilitar la puesta en marcha, ten\u00e9is la plantilla de Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o Nginx/PHP disponible para su descarga.</p> <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp\n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./\n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash\n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando</li> <li><code>docker ps -a</code>: Ver todos los contenedores</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas</li> </ul> <p>Otra forma m\u00e1s sencilla para lanzar de nuevo los contenedores y gestionarlos una vez creados es utilizar el interfaz gr\u00e1fico que ofrece Docker Desktop.</p> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetas para todo el stack de desarrollo. En posteriores sesiones utilizaremos tanto Devilbox como Laradock</p> <p>Pero quiero saber c\u00f3mo funciona...</p> <p>En el m\u00f3dulo de Despliegue de Aplicaciones Web estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#entorno-de-desarrollo","title":"Entorno de desarrollo","text":"<p>En este curso vamos a emplear Visual Studio Code como entorno de desarrollo (IDE). Existen otras alternativas, siendo PhpStorm la m\u00e1s conocida pero siendo de pago. Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP Intelephense</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo.</p> <p> </p> Docker en VSCode."},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#hola-mundo","title":"Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como <code>index.php</code>, al acceder a <code>http://localhost</code> autom\u00e1ticamente cargar\u00e1 el resultado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC102 (AEA). (RA1 / CE1c CE1e / IC1 / 3p) El departamento de servidores ha contratado un servidor web para desplegar la aplicaci\u00f3n. El DevOps a cargo de tu proyecto te solicita que configures tu servidor PHP local de trabajo. No olvides que debes mostrar el proceso y las principales caracter\u00edsticas.</p> </li> <li> <p>PR102 (AP). (RA1 / CE1c CE1e / IC1 / 3p) Como parte de la documentaci\u00f3n que debes generar para el proyecto que te han solicitado, muestra y comenta las principales variables que aparecen en el fichero php.ini del servidor que has configurado para trabajar en local.</p> </li> </ul>"},{"location":"uutt/01_Arquitectura/017_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Curso: Introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea</li> <li>Art\u00edculo: Arquitecturas Web y su evoluci\u00f3n</li> <li>Web: Desarrollo Web en Entorno Servidor, por Aitor Medrano</li> </ul>"},{"location":"uutt/01_Arquitectura/017_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Art\u00edculo: Full stack developer: \u00bfcu\u00e1les son sus funciones y qu\u00e9 formaci\u00f3n necesito?</li> </ul>"},{"location":"uutt/01_Arquitectura/018_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 define una arquitectura web?<ol> <li>El dise\u00f1o visual de una p\u00e1gina web.</li> <li>La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</li> <li>El tipo de contenido multimedia utilizado.</li> <li>La velocidad de carga de la p\u00e1gina web\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</p> <ol> <li>En una arquitectura cliente-servidor, \u00bfqu\u00e9 papel suele desempe\u00f1ar el cliente?<ol> <li>Servidor de base de datos.</li> <li>Balanceador de carga.</li> <li>Navegador web.</li> <li>Servidor de aplicaciones\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Navegador web.</p> <ol> <li>\u00bfQu\u00e9 se necesita para generar una p\u00e1gina web din\u00e1mica?<ol> <li>Solo HTML y CSS.</li> <li>Lenguaje de servidor y/o servicios REST.</li> <li>\u00danicamente JavaScript.</li> <li>Conexi\u00f3n a una red privada virtual (VPN)\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Lenguaje de servidor y/o servicios REST.</p> <ol> <li>\u00bfQu\u00e9 perfiles de desarrollo se asocian con la generaci\u00f3n de p\u00e1ginas din\u00e1micas?<ol> <li>Analista de datos y cient\u00edfico de datos.</li> <li>Dise\u00f1ador gr\u00e1fico y desarrollador de juegos.</li> <li>Front-end/cliente y Back-end/servidor.</li> <li>Gestor de redes y administrador de sistemas\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Front-end/cliente y Back-end/servidor.</p> <ol> <li>\u00bfQu\u00e9 representa el \"Modelo\" en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC)?<ol> <li>La interfaz de usuario.</li> <li>La l\u00f3gica de negocio y gesti\u00f3n de eventos.</li> <li>La informaci\u00f3n y gesti\u00f3n de accesos a esta.</li> <li>El componente que gestiona las comunicaciones y eventos\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. La informaci\u00f3n y gesti\u00f3n de accesos a esta.</p>"},{"location":"uutt/01_Arquitectura/019_PruebaEspecifica.html","title":"Prueba espec\u00edfica","text":"<ol> <li>(RA1 - 2p) \u00bfCu\u00e1les son los tres frameworks de PHP m\u00e1s utilizados? Realiza una tabla comparativa de sus ventajas e inconvenientes.</li> <li>(RA1 - 2p) Realiza una tabla en la que se aprecien las siguientes tecnolog\u00edas clasificadas como cliente o servidor: react, PHP, Node.js, Java, Javascript, vue.js, Python, HTML, CSS, ruby. </li> <li>(RA1 - 2p) \u00bfCu\u00e1les son las principales variables que aparecen en el fichero php.ini?</li> <li> <p>(RA1 - 4p) Realiza el siguiente test:</p> <ol> <li> <p>\u00bfQu\u00e9 define una arquitectura web?</p> <ol> <li>El dise\u00f1o visual de una p\u00e1gina web.</li> <li>La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</li> <li>El tipo de contenido multimedia utilizado.</li> <li>La velocidad de carga de la p\u00e1gina web\u200b</li> </ol> </li> <li> <p>En una arquitectura cliente-servidor, \u00bfqu\u00e9 papel suele desempe\u00f1ar el cliente?</p> <ol> <li>Servidor de base de datos.</li> <li>Balanceador de carga.</li> <li>Navegador web.</li> <li>Servidor de aplicaciones\u200b</li> </ol> </li> <li> <p>\u00bfQu\u00e9 se necesita para generar una p\u00e1gina web din\u00e1mica?</p> <ol> <li>Solo HTML y CSS.</li> <li>Lenguaje de servidor y/o servicios REST.</li> <li>\u00danicamente JavaScript.</li> <li>Conexi\u00f3n a una red privada virtual (VPN)\u200b</li> </ol> </li> <li> <p>\u00bfQu\u00e9 perfiles de desarrollo se asocian con la generaci\u00f3n de p\u00e1ginas din\u00e1micas?</p> <ol> <li>Analista de datos y cient\u00edfico de datos.</li> <li>Dise\u00f1ador gr\u00e1fico y desarrollador de juegos.</li> <li>Front-end/cliente y Back-end/servidor.</li> <li>Gestor de redes y administrador de sistemas\u200b</li> </ol> </li> <li> <p>\u00bfQu\u00e9 representa el \"Modelo\" en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC)?</p> <ol> <li>La interfaz de usuario.</li> <li>La l\u00f3gica de negocio y gesti\u00f3n de eventos.</li> <li>La informaci\u00f3n y gesti\u00f3n de accesos a esta.</li> <li>El componente que gestiona las comunicaciones y eventos\u200b</li> </ol> </li> </ol> </li> </ol>"},{"location":"uutt/01_Arquitectura/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<ul> <li> <p> RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul> </li> </ul>"},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/01_Arquitectura/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 01. Arquitectura Web y herramientas de programaci\u00f3n.</p> <p>Horas</p> <p>2 Sesiones - 4H</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor. </li> <li>OD3: Configurar entorno de trabajo en local.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Diferencias entre cliente y servidor</li> <li>CES2. Arquitectura de una web din\u00e1mica</li> <li>CES3. Modelo Vista Controlador (MVC)</li> <li>CES4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES5. Configuraci\u00f3n entorno local</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p>CE1a, CE1e, CE1g</p> <p>IE1</p> <p>IC1</p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</p> <p>CE1a, CE1b, CE1c, CE1f, CE1g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR102. Conocer contenido de variables en el fichero php.ini</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE1a, CE1b, CE1c, CE1d, CE1e, CE1f, CE1g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/02_PHP/0210_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 significa PHP?<ol> <li>Personal Home Page</li> <li>Private Home Protocol</li> <li>Personal Hypertext Processor</li> <li>Hypertext Preprocessor</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. Hypertext Preprocessor.</p> <ol> <li>\u00bfQu\u00e9 archivo PHP es com\u00fanmente utilizado como el punto de entrada principal en muchos proyectos PHP?<ol> <li>connect.php</li> <li>start.php</li> <li>index.php</li> <li>main.php</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. index.php.</p> <ol> <li>\u00bfCu\u00e1l de los siguientes es un superglobal en PHP que se utiliza para recoger datos del formulario enviado mediante el m\u00e9todo POST?<ol> <li>$_SERVER$</li> <li>$_GET$</li> <li>$_POST$</li> <li>$_REQUEST$</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. $_POST$.</p> <ol> <li>\u00bfQu\u00e9 funci\u00f3n se usa para insertar contenido de un archivo en un archivo PHP?<ol> <li>get_file_contents()</li> <li>include()</li> <li>file_get_contents()</li> <li>require()</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. include().</p> <ol> <li>\u00bfCu\u00e1l es el prop\u00f3sito de la funci\u00f3n echo en PHP?<ol> <li>Guardar datos en una variable</li> <li>Imprimir datos en la salida</li> <li>Leer datos de una base de datos</li> <li>Modificar datos en un archivo</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Imprimir datos en la salida.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html","title":"El lenguaje PHP","text":"<p>Una p\u00e1gina PHP es una p\u00e1gina web normal en la que utilizamos la extensi\u00f3n <code>.php</code> en lugar de <code>.htm</code> o <code>.html</code>.</p> <p>En una p\u00e1gina <code>.php</code> se pueden insertar bloques de c\u00f3digo escrito en lenguaje PHP. Estos bloques de c\u00f3digo reciben el nombre de scripts. Un script PHP se limita anteponiendo los s\u00edmbolos <code>&lt;?php</code> a la primera instrucci\u00f3n y escribiendo despu\u00e9s de la \u00faltima instrucci\u00f3n los s\u00edmbolos <code>?&gt;</code>.</p> <pre><code>&lt;?php\n    phpinfo();\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#curiosidades","title":"Curiosidades","text":"<ul> <li>Acr\u00f3nimo de Personal Home Page</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante mod_php)</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>La \u00faltima versi\u00f3n es la 8.3.3.</li> </ul> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#codigo-embebido","title":"C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>, mientras que las sentencias se separan mediante <code>;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- Muestra una frase con HTML --&gt;\n        Hola mundo&lt;br&gt;\n        &lt;!-- Muestra una frase con PHP --&gt;\n        &lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>S\u00f3lo etiquetas de apertura</p> <p>Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#generando-contenido","title":"Generando contenido","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo expresi\u00f3n;</code></li> <li><code>print (expresi\u00f3n);</code></li> <li><code>&lt;?= expresi\u00f3n ?&gt;</code></li> </ul> <p>Las que vamos a utilizar son <code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y <code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Echo y print&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n        &lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n        &lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\") ?&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#comentarios","title":"Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> <pre><code>&lt;?php\n    // Este es un comentario de una sola l\u00ednea\n    /*\n    Este es\n    un comentario\n    que ocupa\n    varias l\u00edneas\n    */ \n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#errores","title":"Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> <pre><code>Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11\n Stack trace:\n #0 {main}\n    thrown in C:\\xampp\\htdocs\\202echo.php on line 11\n</code></pre> <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"uutt/02_PHP/021_LenguajePHP.html#actividades","title":"Actividades","text":"<ul> <li>AC201 (AEA). (RA2 / CE2a CE2c CE2d / IC1 / 3p) - El Supervisor T\u00e9cnico (CTO) te solicita una prueba en PHP para saber si puedes seguir las mejores pr\u00e1cticas de desarrollo. Para ello te solicita que muestres 3 frases, cada una en un p\u00e1rrafo utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea.</li> </ul>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html","title":"Variables, datos y operadores","text":""},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#variables","title":"Variables","text":"<p>Para definir su valor se utilizar\u00e1 una expresi\u00f3n del tipo:</p> <p><pre><code> $variable = valor;\n</code></pre> A la hora de definir una variable se han de tener una serie de consideraciones</p> <ul> <li>El nombre ha de comenzar con $ seguido de una letra.</li> <li>Se distingue May\u00fasculas/Min\u00fasculas.</li> <li>No es necesario definir el tipo.</li> <li>Si valor es un texto, ha de ir entre comillas.</li> <li>Nos podemos referir a su valor desde cualquier parte del script, salvo que sea una variable definida en una funci\u00f3n. En ese caso s\u00f3lo tiene sentido en el interior de la funci\u00f3n.</li> <li>Una variable definida en una funci\u00f3n no puede utilizarse en el script (toma valor cero o \"\").</li> </ul> <p>Variable global</p> <p>Excepci\u00f3n a lo anterior. La funci\u00f3n puede utilizar valores de variables externas si se ha incluido en la funci\u00f3n la orden <code>global nombrevariable;</code>, se busca el valor de la variable en el resto del script.</p> <p>Variable Superglobal</p> <p>Existe otro tipo Variable Superglobal, se puede acceder a su valor desde cualquier punto sin utilizar la orden global.</p> <p>Variable est\u00e1tica</p> <p>Si definimos una variable como est\u00e1tica dentro de una funci\u00f3n, cuando salimos de su \u00e1mbito conserva el valor que tenga en el momento de salir y la l\u00ednea que le da valor inicial la primera vez que se ejecuta no volver\u00e1 actuar cuando se ejecute la funci\u00f3n hasta que actualicemos la p\u00e1gina. Para definir la variable $a como est\u00e1tica y con un valor inicial utilizaremos la orden (<code>static $a = 3;</code>), al salir de la funci\u00f3n $a conservar\u00e1 el \u00faltimo valor que se haya asignado hasta que se actualice la p\u00e1gina</p> <pre><code>&lt;?php\n    $nombre = \"Gin\u00e9s\";\n    $nombreCompleto = \"Gin\u00e9s L\u00f3pez\";\n    $numero = 123;\n    $numero2 = 456;\n    $pi = 3.14;\n    $suerte = true;\n    $sinValor;\n\n    echo $sinValor;\n?&gt;\n</code></pre> <p>Tipos</p> <p>Aunque a priori no hay tipos de datos, internamente PHP trabaja con cuatro tipos escalares: boolean, integer, float y string y cuatro tipos compuestos: array, object, callable e iterable. Existe un tipo especial para null (m\u00e1s informaci\u00f3n en http://php.net/manual/es/language.types.null.php).</p>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#tipos-de-variables","title":"Tipos de variables","text":"<p>En PHP no es necesario definir el tipo. Seg\u00fan sea el valor almacenado se adapta el tipo. Hay tres tipos</p> <ul> <li>Integer: Enteros (+/- 231)</li> <li>Double: Coma flotante</li> <li>String: Cadenas</li> </ul> <p>Para realizar conversiones de datos o si queremos trabajar con tipos de datos, tenemos las siguientes funciones:</p> <ul> <li><code>floatval</code>, <code>intval</code>, <code>strval</code>: devuelve una variable del tipo de la funci\u00f3n indicada</li> <li><code>settype</code>: fuerza la conversi\u00f3n</li> <li><code>gettype</code>: obtiene el tipo</li> <li><code>is_int</code>, <code>is_float</code>, <code>is_string</code>, <code>is_array</code>, <code>is_object</code>: devuelve un booleano a partir del tipo recibido</li> </ul> <pre><code>&lt;?php\n$uno = 1;\nvar_dump(is_int($uno)); // true\n$unofloat = floatval($uno);\nsettype($uno, \"string\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_string($uno)); // true\nsettype($uno, \"float\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_float($uno)); // true\nvar_dump(is_int(intval($uno))); // true\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#constantes","title":"Constantes","text":"<p>Son variables cuyo valor no var\u00edan. Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE; // PHP &gt; 5.3</code></li> </ul> <pre><code>&lt;?php\ndefine(\"PI\", 3.1416);\nconst IVA = 0.21;\n\necho PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n</code></pre> <ul> <li>Se declaran siempre en MAY\u00daSCULAS</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php</li> </ul>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#operadores","title":"Operadores","text":""},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#arimeticos","title":"Arim\u00e9ticos","text":"Ejemplo Nombre Resultado <code>-$a</code> Negaci\u00f3n Opuesto de <code>$a</code>. <code>$a + $b</code> Suma Suma de <code>$a</code> y <code>$b</code>. <code>$a - $b</code> Resta Diferencia de <code>$a</code> y <code>$b</code>. <code>$a * $b</code> Multiplicaci\u00f3n Producto de <code>$a</code> y <code>$b</code>. <code>$a / $b</code> Divisi\u00f3n Cociente de <code>$a</code> y <code>$b</code>. <code>$a % $b</code> M\u00f3dulo / Resto Resto de <code>$a</code> dividido por <code>$b</code>. <code>$a ** $b</code> Potencia Resultado de <code>$a</code> elevado a <code>$b</code>. PHP &gt;= 5.6. <p>En el caso de cadenas, si queremos concatenarlas, se utiliza el operador <code>.</code>:</p> <pre><code>&lt;?php\n$x = 33;\n$y = 11;\n$z = $x + $y;\necho \"La suma de 33 y 11 es \".44.\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".(33 + 11).\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".$z.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p>Realmente, en vez de concatenar cadenas con variables, podemos imprimirlas directamente ya que se expanden autom\u00e1ticamente: <pre><code>&lt;?php\necho \"La suma de $x y $y es $z &lt;br /&gt;\";\n?&gt;\n</code></pre></p> <p>En ocasiones, necesitamos rodear el nombre de la variable entre llaves para poder unir m\u00e1s texto al resultado:</p> <pre><code>&lt;?php\n$color = \"rojo\";\necho \"El plural de $color el ${color}s\";\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos algunas funciones para el tratamiento de cadenas.</p>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#comparacion","title":"Comparaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a == $b</code> Igual <code>true</code> si <code>$a</code> es igual a <code>$b</code> tras de la conversi\u00f3n de tipos. <code>$a === $b</code> Id\u00e9ntico, Comparaci\u00f3n estricta <code>true</code> si <code>$a</code> es igual a <code>$b</code>, y son del mismo tipo de dato. <code>$a != $b</code>, <code>$a &lt;&gt; $b</code> Diferente <code>true</code> si <code>$a</code> no es igual a <code>$b</code> despu\u00e9s de la conversi\u00f3n de tipos. <code>$a !== $b</code> No id\u00e9ntico <code>true</code> si <code>$a</code> no es igual a <code>$b</code>, o si no son del mismo tipo. <code>$a &lt; $b</code> Menor que <code>true</code> si <code>$a</code> es estrictamente menor que <code>$b</code>. <code>$a &gt; $b</code> Mayor que <code>true</code> si <code>$a</code> es estrictamente mayor que <code>$b</code>. <code>$a &lt;= $b</code> Menor o igual que <code>true</code> si <code>$a</code> es menor o igual que <code>$b</code>. <code>$a &gt;= $b</code> Mayor o igual que <code>true</code> si <code>$a</code> es mayor o igual que <code>$b</code>. <code>$a &lt;=&gt; $b</code> Nave espacial Devuelve <code>-1</code>, <code>0</code> o <code>1</code> cuando <code>$a</code> es respectivamente menor, igual, o mayor que <code>$b</code>. PHP &gt;= 7. <code>$a ?? $b ?? $c</code> Fusi\u00f3n de null El primer operando de izquierda a derecha que exista y no sea <code>null</code>. <code>null</code> si no hay valores definidos y no son <code>null</code>. PHP &gt;= 7."},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#logicos","title":"L\u00f3gicos","text":"Ejemplo Nombre Resultado <code>$a and $b</code>, <code>$a &amp;&amp; $b</code> And (y) <code>true</code> si tanto <code>$a</code> como <code>$b</code> son <code>true</code>. <code>$a or $b</code>, <code>$a || $b</code> Or (o inclusivo) <code>true</code> si cualquiera de <code>$a</code> o <code>$b</code> es <code>true</code>. <code>$a xor $b</code> Xor (o exclusivo) <code>true</code> si <code>$a</code> o <code>$b</code> es <code>true</code>, pero no ambos. <code>!$a</code> Not (no) <code>true</code> si <code>$a</code> no es <code>true</code>."},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#asignacion","title":"Asignaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a = $b</code> Asignaci\u00f3n Asigna a <code>$a</code> el valor de <code>$b</code> <code>$a += $b</code> Asignaci\u00f3n de la suma Le suma a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a + $b</code> <code>$a -= $b</code> Asignaci\u00f3n de la resta Le resta a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a - $b</code> <code>$a *= $b</code> Asignaci\u00f3n del producto Asigna a <code>$a</code> el producto de <code>$a</code> por <code>$b</code>. Equivalente a <code>$a = $a * $b</code> <code>$a /= $b</code> Asignaci\u00f3n de la divisi\u00f3n Asigna a <code>$a</code> el conciente de <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a / $b</code> <code>$a %= $b</code> Asignaci\u00f3n del resto Asigna a <code>$a</code> el resto de dividir <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a % $b</code> <code>$a .= $b</code> Concatenaci\u00f3n Concatena a <code>$a</code> la cadena <code>$b</code>. Equivalente a <code>$a = $a . $b</code> <code>$a++</code> Incremento Incrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a + 1</code> <code>$a--</code> Decremento Decrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a - 1</code> <p>Prioridad de los operadores</p> <p>Recuerda la prioridad. Primero los par\u00e9ntesis, luego la negaci\u00f3n (<code>!</code>), productos/divisiones, sumas/restas, comparaciones, l\u00f3gicos y por \u00faltimo se realiza la asignaci\u00f3n. M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.operators.precedence.php</p>"},{"location":"uutt/02_PHP/022_VariablesDatosOperadores.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC202 (AEA). (RA2 / CE2d CE2g / IC1 / 3p) - Siguiendo con la prueba t\u00e9cnica iniciada en la actividad anterior (AC201), ahora se te solicita que escribas un programa que utilice las variables <code>$x</code> y <code>$y</code>. As\u00edgnales los valores 33 y 999 respectivamente. A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n. </p> </li> <li> <p>AC203 (AEA). (RA2 / CE2c CE2d CE2g / IC1 / 3p) -  Siguiendo con la prueba t\u00e9cnica, escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla.</p> </li> <li> <p>AC204 (AP). (RA2 / CE2d CE2g / IC1 / 3p) -  A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. </p> <p>Por ejemplo, al introducir 139 debe mostrar:</p> <pre><code>1 billete de 100\n0 billete de 50\n1 billete de 20\n1 billete de 10\n1 billete de 5\n2 moneda de 2\n</code></pre> <p>Tip</p> <p>Puedes forzar a realizar la divisi\u00f3n entera mediante la funci\u00f3n <code>intdiv($dividendo, $divisor)</code> o pasar un n\u00famero flotante a entero puedes usar la funci\u00f3n <code>intval()</code>.</p> </li> <li> <p>AC205 (AR). (RA2 / CE2c CE2d CE2g / IC1 / 3p) - Se te solicita un programa para la gesti\u00f3n de la puntuaci\u00f3n de un test. Para ello, a partir de un numero, muestra por pantalla si el n\u00famero es positivo, negativo o cero.</p> </li> <li> <p>AC206 (AR). (RA2 / CE2c CE2d CE2g / IC1 / 3p) - La empresa necesita que escribas un programa que funcione similar a un reloj, de manera que a partir de los valores de hora, minuto y segundo muestre la hora dentro de un segundo. Tras las 23:59:59 ser\u00e1n las 0:0:0.</p> </li> </ul>"},{"location":"uutt/02_PHP/023_EstructurasControl.html","title":"Estructuras de control","text":"<p>A la hora de trasladar problemas a c\u00f3digo, se necesita una serie de estructuras que nos permiten programar nuestro c\u00f3digo para que se comporte de la manera que se desea. Es por ello que se dividen en dos grandes bloques:</p> <ul> <li>Estructuras de condici\u00f3n.</li> <li>Estructuras de repetici\u00f3n</li> </ul>"},{"location":"uutt/02_PHP/023_EstructurasControl.html#condicion","title":"Condici\u00f3n","text":"<p>La condici\u00f3n simple se realiza mediante la instrucci\u00f3n <code>if</code>. Entre par\u00e9ntesis se pone la condici\u00f3n que se eval\u00faa a <code>true</code> o <code>false</code>. Si no se ponen llaves, en vez de abrir un bloque, se ejecutar\u00e1 s\u00f3lo la siguiente instrucci\u00f3n.</p> <p>Siempre llaves</p> <p>Es recomendable poner llaves siempre aunque en el momento de codificar s\u00f3lo haya una \u00fanica instrucci\u00f3n. De este modo, se queda preparado para a\u00f1adir m\u00e1s contenido en el futuro sin provocar bugs.</p> <pre><code>&lt;?php\n$hora = 8; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Suena el despertador.\";\n}\necho \"&lt;br&gt;\";\nif ($hora === 8)\n    echo \"Suena el despertador.\";\n?&gt;\n</code></pre> <p>Las condiciones compuesta mediante <code>if-else</code>:</p> <pre><code>&lt;?php\n$hora = 17; // La hora en formato de 24 horas\nif ($hora &lt;= 12) {\n    echo \"Son las \" . $hora . \" de la ma\u00f1ana\";\n} else {\n    echo \"Son las \" . ($hora - 12) . \" de la tarde\";\n}\n?&gt;\n</code></pre> <p>Las condiciones anidadas mediante <code>if-else if-else</code>:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Es la hora de desayunar.\";\n} else if ($hora === 14) {\n    echo \"Es la hora de la comida.\";\n} else if ($hora === 21) {\n    echo \"Es la hora de la cena.\";\n} else {\n    echo \"Ahora no toca comer.\";\n}\n?&gt;\n</code></pre> <p>La sentencia <code>switch</code> tambi\u00e9n permite trabajar con condiciones m\u00faltiples:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nswitch ($hora) {\n    case 9:\n        echo \"Es la hora de desayunar.\";\n        break;\n    case 14:\n        echo \"Es la hora de la comida.\";\n        break;\n    case 21:\n        echo \"Es la hora de la cena.\";\n        break;\n    default:\n        echo \"Ahora no toca comer\";\n}\n?&gt;\n</code></pre> <p>No olvides el <code>break</code></p> <p>Un error muy com\u00fan es olvidar la instrucci\u00f3n <code>break</code> tras cada caso. Si no lo ponemos, ejecutar\u00e1 el siguiente caso autom\u00e1ticamente.</p> <p>Finalmente, tambi\u00e9n tenemos el operador ternario <code>condici\u00f3n ? valorTrue : valorFalse</code>:</p> <pre><code>&lt;?php\n$hora = 14;\n$formato = ($hora &gt; 12) ? 24 : 12;\necho \"El formato es de $formato horas\"\n?&gt;\n</code></pre> <p>Si queremos comprobar si una variable tiene valor y si no darle un valor determinado, usaremos el operador <code>?:</code> (se conoce como el operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator) con la sintaxis <code>expresi\u00f3n ?: valorSiVacio</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET['nombre'] ?: \"desconocido\"\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/023_EstructurasControl.html#repeticion","title":"Repetici\u00f3n","text":"<p>Mediante la instrucci\u00f3n <code>while</code>:</p> <pre><code>&lt;?php\n$i = 1;\nwhile ($i &lt;= 10) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n    $i++;\n}\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>do-while</code>:</p> <pre><code>&lt;?php\ndo {\n    $dado = rand(1, 6);\n    // rand() devuelve un valor aleatorio \n    echo \"Tirando el dado... \";\n    echo \"ha salido un \" . $dado . \".\";\n    echo \"&lt;br&gt;\";\n} while ($dado != 5);\necho \"\u00a1Bien! Saco una ficha de casa.\";\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>for</code>:</p> <pre><code>&lt;?php\n// Bucle ascendente\nfor ($i = 1; $i &lt;= 10; $i++) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n\n// Bucle descendente\nfor ($i = 10; $i &gt;= 0; $i--) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos el bucle <code>foreach</code> para recorrer arrays.</p> <p>PHP, del mismo modo que Java y C, permite romper los bucles mediante la instrucci\u00f3n <code>break</code>. A su vez, <code>continue</code> permite saltar a la siguiente iteraci\u00f3n.</p> <p>Si puedes, evita <code>break</code> y <code>continue</code></p> <p>Personalmente, no me gusta su uso. Prefiero el uso de variables flag para controlar la salida de los bucles. Por ejemplo:</p> <pre><code>&lt;?php\n$salir = false;\nfor ($i = 1; $i &lt;= 10 &amp;&amp; !$salir; $i++) {\n  if ($i === 5) {\n    echo \"Salgo cuando i=5\";\n    $salir = true;\n  }\n}\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/023_EstructurasControl.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC207 (AEA). (RA2 / CE2d CE2e CE2g CE2h / IC1 / 3p) - Se te solicita un programa que muestre los n\u00fameros pares del 0 al 50 (dentro de una lista desordenada). Una vez realizado, refactoriza para que funcione con inicio y fin.</p> </li> <li> <p>AC208 (AR). (RA2 / CE2d CE2e CE2g CE2h / IC1 / 3p) - Para asegurarse que dominas las matem\u00e1ticas, tu CTO, te solicita un programa que sume los n\u00fameros del 1 al 10. Una vez realizado, refactoriza para que funcione con inicio y fin.</p> </li> <li> <p>AC209 (AP). (RA2 / CE2d CE2e CE2g CE2h / IC1 / 3p) - Seguimos en la prueba del dominio de las matem\u00e1ticas. A partir de una base y exponente, mediante la acumulaci\u00f3n de productos, calcula la potencia utilizando la instrucci\u00f3n for. Reescribe el ejercicio anterior haciendo uso s\u00f3lo de while. Reescribe el ejercicio anterior haciendo uso s\u00f3lo de do-while.</p> </li> </ul>"},{"location":"uutt/02_PHP/024_Arrays.html","title":"Arrays","text":"<p>Para almacenar datos compuestos, podemos utilizar tanto arrays sencillos como arrays asociativos (similares a un mapa). En realidad todos los arrays son mapas ordenados compuestos de pares clave-valor.</p> <p>Cuidado con mezclar tipos</p> <p>Como el tipado es din\u00e1mico, nuestros arrays pueden contenedor datos de diferentes tipos. No se recomienda mezclar los tipos.</p> <p>Del mismo modo que Java, se definen mediante corchetes, son 0-index, y se puede asignar un valor a un posici\u00f3n determinada:</p> <pre><code>&lt;?php\n$frutas = array(\"naranja\", \"pera\", \"manzana\");\n\n$frutas2 = [\"naranja\", \"pera\", \"manzana\"];\n\n$frutas3 = [];\n$frutas3[0] = \"naranja\";\n$frutas3[1] = \"pera\";\n$frutas3[] = \"manzana\"; // lo a\u00f1ade al final\n</code></pre> <p>Podemos obtener el tama\u00f1o del array mediante la funci\u00f3n <code>count(array)</code>. Para recorrer el array haremos uso de un bucle <code>for</code>:</p> <pre><code>&lt;?php\n$tam = count($frutas); // tama\u00f1o del array\n\nfor ($i=0; $i&lt;count($frutas); $i++) {\n    echo \"Elemento $i: $frutas[$i] &lt;br /&gt;\";\n}\n</code></pre> <p>Otra forma de recorrer los arrays, incluso m\u00e1s elegante, es hacer uso de <code>foreach</code>. Su sintaxis es <code>foreach (array as elemento)</code>:</p> <pre><code>&lt;?php\n// Mediante foreach no necesitamos saber el tama\u00f1o del array\nforeach ($frutas as $fruta) {\n    echo \"$fruta &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"uutt/02_PHP/024_Arrays.html#arrays-asociativos","title":"Arrays asociativos","text":"<p>Cada elemento es un par clave-valor. En vez de acceder por la posici\u00f3n, lo hacemos mediante una clave. As\u00ed pues, para cada clave se almacena un valor.</p> <p>A la hora de recorrer este tipo de arrays, mediante <code>foreach</code> separamos cada elemento en una pareja <code>clave =&gt; valor</code>:</p> <pre><code>&lt;?php\n$capitales = [\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\"];\n$capitalFrancia = $capitales[\"Francia\"]; // se accede al elemento por la clave, no la posici\u00f3n\n\n$capitales[\"Alemania\"] = \"Berl\u00edn\"; // a\u00f1adimos un elemento\n\necho \"La capital de Francia es $capitalFrancia &lt;br /&gt;\";\necho \"La capital de Francia es {$capitales[\"Francia\"]} &lt;br /&gt;\";\n\n$capitales[] = \"Madrid\"; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1No asignar valores sin clave!!!\n\nforeach ($capitales as $valor) { // si recorremos un array asociativo, mostraremos los valores\n    echo \"$valor &lt;br /&gt;\";\n}\n\nforeach ($capitales as $pais =&gt; $ciudad) { // separamos cada elemento en clave =&gt; valor\n    echo \"$pais : $ciudad &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"uutt/02_PHP/024_Arrays.html#operaciones","title":"Operaciones","text":"<p>Las operaciones m\u00e1s importantes que podemos realizar con arrays son:</p> <ul> <li><code>print_r($array)</code>: muestra el contenido de todo el <code>$array</code>. Si queremos mostrar el contenido con un formato determinado, hemos de recorrer el array con <code>foreach</code>.</li> <li><code>var_dump($mixed)</code>: muestra el contenido del elemento recibido. Muestra m\u00e1s informaci\u00f3n que <code>print_r</code>.</li> <li><code>$elem = array_pop($array)</code>: elimina el \u00faltimo <code>$elemento</code></li> <li><code>array_push($array, $elem)</code>: a\u00f1ade un <code>$elemento</code> al final</li> <li><code>$booleano = in_array($elem, $array)</code>: averigua si <code>$elem</code> est\u00e1 en el <code>$array</code></li> </ul> PHPConsola <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\n\narray_push($frutas, \"pi\u00f1a\");\nprint_r($frutas);\n\n$ultFruta = array_pop($frutas);\nif (in_array(\"pi\u00f1a\", $frutas)) {\n    echo \"&lt;p&gt;Queda pi\u00f1a&lt;/p&gt;\";\n} else {\n    echo \"&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\";\n}\nprint_r($frutas);\n</code></pre> <pre><code>Array\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n  [3] =&gt; pi\u00f1a\n)\n&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\nArray\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n)\n</code></pre> <ul> <li><code>$claves = array_keys($array)</code>: devuelve las claves del <code>$array</code> asociativo</li> <li><code>$tam = count($array)</code>: devuelve el tama\u00f1o de <code>$array</code></li> <li><code>sort($array)</code>: ordena los elementos del <code>$array</code></li> <li><code>isset($array[elemento])</code>: indica si existe/tiene valor elemento dentro del array</li> <li><code>unset($array[elemento])</code>: elimina el elemento del array (deja un hueco)</li> </ul> PHPConsola <pre><code>&lt;?php\n$capitales = array(\"Italia\" =&gt; \"Roma\",\n\"Francia\" =&gt; \"Paris\",\n\"Portugal\" =&gt; \"Lisboa\");\n\n$paises = array_keys($capitales);\nprint_r($paises);\nsort($paises);\nprint_r($paises);\n\nunset($capitales[\"Francia\"]);\nprint_r($capitales);\n</code></pre> <pre><code>Array\n(\n  [0] =&gt; Italia\n  [1] =&gt; Francia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [0] =&gt; Francia\n  [1] =&gt; Italia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [Italia] =&gt; Roma\n  [Portugal] =&gt; Lisboa\n)\n</code></pre> <p>Al asignar un array a otro se realiza una copia. Cuidado con esta operaci\u00f3n que puede consumir muchos recursos.</p> PHPConsola <pre><code>&lt;?php\n$nombres = [\"Juan\", \"Ana\", \"Pedro\", \"Laura\"];\n$copia = $nombres;\nsort($nombres);\nprint_r($nombres);\nprint_r($copia);\n</code></pre> <pre><code>Array\n(\n    [0] =&gt; Ana\n    [1] =&gt; Juan\n    [2] =&gt; Laura\n    [3] =&gt; Pedro\n)\nArray\n(\n    [0] =&gt; Juan\n    [1] =&gt; Ana\n    [2] =&gt; Pedro\n    [3] =&gt; Laura\n)\n</code></pre> <p>Existen much\u00edsimas m\u00e1s funciones para trabajar con arrays. Puedes consultar roda la informaci\u00f3n en la documentaci\u00f3n oficial.</p> <p>Art\u00edculos para profundizar en las operaciones con arrays</p> <ul> <li>Un art\u00edculo muy completo (en ingl\u00e9s) de C\u00f3mo trabajar con arrays en PHP de la manera correcta.  </li> <li>Otro art\u00edculo recomendable (en ingl\u00e9s) es C\u00f3mo ordenar arrays en PHP.</li> </ul>"},{"location":"uutt/02_PHP/024_Arrays.html#arrays-bidimensionales","title":"Arrays bidimensionales","text":"<p>Consiste en un array de arrays, ya sean arrays secuenciales o asociativos. Puede haber N dimensiones.</p> <pre><code>&lt;?php\n$persona[\"nombre\"] = \"Bruce Wayne\";\n$persona[\"telefonos\"] = [\"966 123 456\", \"636 636 636\"]; // array de arrays ordinarios\n$persona[\"profesion\"] = [\"dia\" =&gt; \"fil\u00e1ntropo\", \"noche\" =&gt; \"caballero oscuro\"]; // array de arrays asociativos\n\necho $persona['nombre'].\" por la noche trabaja de \".$persona['profesion']['noche'];\n</code></pre> <p>Combinando los arrays asociativos en varias dimensiones podemos almacenar la informaci\u00f3n como si fuera una tabla:</p> <pre><code>&lt;?php\n$menu1 = [\"Plato1\" =&gt; \"Macarrones con queso\", \"Plato2\" =&gt; \"Pescado asado\", \"Bebida\" =&gt; \"Coca-Cola\", \"Postre\" =&gt; \"Helado de vainilla\"];\n$menu2 = [\"Plato1\" =&gt; \"Sopa\", \"Plato2\" =&gt; \"Lomo con patatas\", \"Bebida\" =&gt; \"Agua\", \"Postre\" =&gt; \"Arroz con leche\"];\n$menus = [$menu1, $menu2]; // creamos un array a partir de arrays asociativos\n\nforeach ($menus as $menudeldia) {\n  echo \"Men\u00fa del d\u00eda&lt;br/&gt;\";\n\n  foreach ($menudeldia as $platos =&gt; $comida) {\n    echo \"$platos: $comida &lt;br/&gt;\";\n  }\n}\n\n// Para acceder a un elemento concreto se anidan los corchetes\n$postre0 = $menus[0][\"Postre\"];\n</code></pre> <p>Aunque pueda parecer una buena idea crear este tipo de estructuras, es mejor utilizar objetos conjuntamente con arrays (posiblemente arrays de otros objetos) para crear estructuras complejas que permitan modelar mejor los problemas.</p>"},{"location":"uutt/02_PHP/024_Arrays.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC210 (AEA). (RA3 / CE3a CE3b CE3c CE3g / IC1 / 3p) - Rellena un array con 50 n\u00fameros aleatorios comprendidos entre el 0 y el 99, y luego mu\u00e9stralo en una lista desordenada. Para crear un n\u00famero aleatorio, utiliza la funci\u00f3n rand(inicio, fin)</p> </li> <li> <p>AC211 (AP). (RA3 / CE3a CE3b CE3c CE3e CE3g / IC1 / 3p) - En la oficinas de Docentes Asociados S.A. necesitan hacer uso de una bola que les ayude a tomar decisiones, la famosa Bola 8 m\u00e1gica. Para ello, prepara un formulario con un caja de texto que realice a una pregunta al usuario. A partir del anterior, crea un programa que muestre la pregunta recibida y genere una respuesta de manera aleatoria entre un conjunto de respuestas predefinidas, almacenadas en un array: Si, no, quiz\u00e1s, claro que s\u00ed, por supuesto que no, no lo tengo claro, seguro, yo dir\u00eda que s\u00ed, ni de co\u00f1a, etc...</p> </li> <li> <p>AC212 (AP). (RA3 / CE3a CE3b CE3c CE3g / IC1 / 3p) - Te solicitan aumentar la complejidad de AC204. Para ello, tu CTO, te solicita que lo vuelvas a realizar pero haciendo uso de arrays y un bucle. Almacena el resultado en un array asociativo. Muestra el resultado en una lista desordenada \u00fanicamente con las cantidades que tienen alg\u00fan valor.</p> </li> <li> <p>AC213 (AR). (RA3 / CE3a CE3b CE3c CE3g / IC1 / 3p) - Rellena un array bidimensional de 6 filas por 9 columnas con n\u00fameros aleatorios comprendidos entre 100 y 999 (ambos incluidos). Todos los n\u00fameros deben ser distintos, es decir, no se puede repetir ninguno. Muestra a continuaci\u00f3n por pantalla el contenido del array de tal forma que:</p> <ul> <li>La columna del m\u00e1ximo debe aparecer en azul.</li> <li>La fila del m\u00ednimo debe aparecer en verde</li> <li>El resto de nu\u0301meros deben aparecer en negro.</li> </ul> </li> </ul>"},{"location":"uutt/02_PHP/025_Funciones.html","title":"Programaci\u00f3n Modular (Funciones)","text":"<p>Al no declararse los tipos de datos, los par\u00e1metros de las funciones no tienen tipo ni se indica el tipo de dato que devuelven. El paso de par\u00e1metros se realiza por valor, es decir, se realiza una copia de la variable.</p> <pre><code>&lt;?php\nfunction nombreFuncion($par1, $par2, ...) {\n  // c\u00f3digo\n  return $valor;\n}\n\n$resultado = nombreFuncion($arg1, $arg2, \u2026);\n?&gt;\n</code></pre> <p>Por ejemplo:</p> <pre><code>&lt;?php\nfunction diaSemana() {\n    $semana = [ \"lunes\", \"martes\", \"mi\u00e9rcoles\",\n        \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\" ];\n    $dia = $semana[rand(0, 6)];\n    return $dia;\n}\n\n$diaCine = diaSemana();\necho \"El pr\u00f3ximo $diaCine voy al cine.\";\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#parametros","title":"Par\u00e1metros","text":""},{"location":"uutt/02_PHP/025_Funciones.html#parametros-por-referencia","title":"Par\u00e1metros por referencia","text":"<p>Si queremos pasar un par\u00e1metro por referencia, en la declaraci\u00f3n de la funci\u00f3n, indicaremos los par\u00e1metros mediante el operador <code>&amp;</code> para indicar la direcci\u00f3n de memoria de la variable.</p> <pre><code>&lt;?php\nfunction duplicarPorValor($argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\nfunction duplicarPorReferencia(&amp;$argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\n\n$numero1 = 5;\necho \"Antes de llamar: $numero1.&lt;br&gt;\";\nduplicarPorValor($numero1);\necho \"Despu\u00e9s de llamar: $numero1.&lt;br&gt;\";\necho \"&lt;br&gt;\";\n\n$numero2 = 7;\necho \"Antes de llamar: $numero2.&lt;br&gt;\";\nduplicarPorReferencia($numero2);\necho \"Despu\u00e9s de llamar: $numero2.&lt;br&gt;\";\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#parametros-por-defecto-opcionales","title":"Par\u00e1metros por defecto / opcionales","text":"<p>Permiten asignar valores en la declaraci\u00f3n, y posteriormente, dejar el argumento en blanco.</p> <pre><code>&lt;?php\nfunction obtenerCapital($pais = \"todos\") {\n    $capitales = array(\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\");\n\n    if ($pais == \"todos\") {\n        return array_values($capitales);\n    } else {\n        return $capitales[$pais];\n    }\n}\n\nprint_r(obtenerCapital());\necho \"&lt;br/&gt;\";\necho obtenerCapital(\"Francia\");\n</code></pre> <p>En el caso de convivir con otro tipo de par\u00e1metros, los par\u00e1metros que tienen el valor asignado por defecto siempre se colocan al final.</p> <pre><code>&lt;?php\nfunction saluda($nombre, $prefijo = \"Sr\") {\n    echo \"Hola \".$prefijo.\" \".$nombre;\n}\n\nsaluda(\"Gin\u00e9s\", \"Mr\");\nsaluda(\"L\u00f3pez\");\nsaluda(\"Lola\", \"Srta\");\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#parametros-variables","title":"Par\u00e1metros variables","text":"<p>Podemos tener funciones donde en la declaraci\u00f3n no indiquemos la cantidad de datos de entrada.</p> <ul> <li><code>$arrayArgs = func_get_args();</code> --&gt; Obtiene un array con los par\u00e1metros</li> <li><code>$cantidad = func_num_args();</code> --&gt; Obtiene la cantidad de par\u00e1metros recibidos</li> <li><code>$valor = func_get_arg(numArgumento);</code> --&gt; Obtiene el par\u00e1metro que ocupa la posici\u00f3n <code>numArgumento</code>.</li> </ul> <p>Estas funciones no se pueden pasar como par\u00e1metro a otra funci\u00f3n (como funciones variable, que veremos m\u00e1s adelante). Para ello, debemos guardar previamente la funci\u00f3n en una variable.</p> <pre><code>&lt;?php\nfunction sumaParametros() {\n    if (func_num_args() == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        for ($i = 0; $i &lt; func_num_args(); $i++) {\n            $suma += func_get_arg($i);\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametros(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>Desde PHP 5.6, se puede utilizar el operador <code>...</code> (variadics) el cual \"disfraza\" los par\u00e1metros como un array:</p> <pre><code>&lt;?php\nfunction sumaParametrosMejor(...$numeros) {\n    if (count($numeros) == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        foreach ($numeros as $num) {\n            $suma += $num;\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametrosMejor(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>M\u00e1s usos de <code>...</code></p> <p>Tambi\u00e9n se puede utilizar para dividir un array en variables separadas para proporcionar argumentos</p> <pre><code>&lt;?php\nfunction suma($a, $b) {\n    return $a + $b;\n}\n\necho suma(...[1, 5]).\"&lt;br /&gt;\";\n\n$a = [1, 5];\necho suma(...$a);\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#argumentos-con-nombre","title":"Argumentos con nombre","text":"<p>Desde PHP 8.0 podemos pasar los argumentos con el nombre (adem\u00e1s de por posici\u00f3n, como hemos hecho hasta ahora). Los argumentos con nombre se pasan poniendo el nombre como prefijo del par\u00e1metros separado por dos puntos: <code>$resultado = funcion( arg1 : valor1, arg2 : valor2);</code></p> <p>Esta caracter\u00edstica complementa los parametros opcionales permitiendonos saltar su valor:</p> <pre><code>&lt;?php\nfunction funcionArgumentosNombre($a, $b = 2, $c = 4) {\n\u00a0\u00a0echo \"$a $b $c\";\n}\nfuncionArgumentosNombre(c: 3, a: 1); // \"1 2 3\"\n</code></pre> <p>Tanto los par\u00e1metros opcionales como los obligatorios pueden tener nombre, pero lo argumentos con nombre se tienen que poner despu\u00e9s de los que no lo tienen.</p> <pre><code>&lt;?php\nfuncionArgumentosNombre(1, c: 3); // \"1 2 3\"\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#funciones-tipadas","title":"Funciones tipadas","text":"<p>Desde PHP7 en las funciones, tanto los par\u00e1metro como su devoluci\u00f3n, permiten la definici\u00f3n de tipos. Esto se conoce como strict_types (tipificaci\u00f3n estricta) y hay que definirlo en la primera l\u00ednea de cada archivo <code>.php</code> para que el propio interprete PHP compruebe los tipos y lance errores si los tipos son incorrectos, mediante la sentencia</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n</code></pre> <p>As\u00ed pues, vamos a  definir los tipos de los par\u00e1metros y de los valores devueltos mediante los tipos: <code>int</code>, <code>float</code>, <code>string</code>, <code>bool</code>, <code>object</code> y <code>array</code>.</p> <p>Si una funci\u00f3n no devuelve nada se indica mediante el tipo <code>void</code>.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\n$num = 33;\necho suma(10, 30);\necho suma(10, $num);\necho suma(\"10\", 30); // error por tipificaci\u00f3n estricta, sino dar\u00eda 40\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#alcance-o-scope","title":"Alcance o scope","text":"<p>Las variables definidas fuera de las funciones tienen alcance global: accesibles desde cualquier funci\u00f3n. Los par\u00e1metros de una funci\u00f3n y las variables declaradas dentro de una funci\u00f3n (se conocen como variables locales) s\u00f3lo son accesibles desde dentro de la misma funci\u00f3n \u2192 alcance de funci\u00f3n.</p> <p>En caso de conflicto, tienen prioridad las variables locales. Para evitar el conflicto, dentro de la funci\u00f3n, podemos declarar la variable como <code>global</code>.</p> Alcance localAlcance global <pre><code>&lt;?php\nfunction miCiudad() {\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de la funci\u00f3n: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de la funci\u00f3n: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <pre><code>&lt;?php\nfunction miCiudad() {\n    global $ciudad;\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de llamar: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de llamar: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <p>No globales</p> <p>Por favor, hay que evitar el uso de variables globales dentro de las funciones. En el caso de necesitarlas, es mejor pasarlas como par\u00e1metro a las funciones.</p>"},{"location":"uutt/02_PHP/025_Funciones.html#funciones-variable","title":"Funciones variable","text":"<ul> <li>Permite asignar una funci\u00f3n a una variable.</li> <li>Nombre de la funci\u00f3n entre comillas.</li> <li>Si una variable va seguida de par\u00e9ntesis, PHP buscar\u00e1 una funci\u00f3n con su valor.</li> </ul> <pre><code>&lt;?php\n$miFuncionSuma = \"suma\";\necho $miFuncionSuma(3,4); // invoca a la funci\u00f3n suma\n?&gt;\n</code></pre> <p>Funciones an\u00f3nimas</p> <p>PHP permite la definici\u00f3n y uso de funciones an\u00f3nimas, es decir, funciones que no tienen nombre, y se utilizan principalmente para gestionar los callbacks. Este tipo de funciones se utiliza mucho en Javascript para gestionar los eventos y promesas.</p> <pre><code>&lt;?php\n$anonima = function() {\n    echo \"Hola\";\n};\n$anonima();\n\n$anonimaConParametro = function($nombre) {\n    echo \"Hola \".$nombre;\n};\n$anonimaConParametro(\"Gin\u00e9s\");\n\n// Uso de variables externas a la funci\u00f3n an\u00f3nima --&gt; `use`\n$mensaje = \"Hola\";\n$miClosure = function() use ($mensaje) {\n    echo $mensaje;\n};\n$miClosure();\n\n// Uso de par\u00e1metros\n$holaPHP = function($arg) use ($mensaje) {\n    echo $mensaje.\" \".$arg;\n};\n$holaPHP(\"PHP\");\n?&gt;\n</code></pre> <p>Desde PHP 7.4 se han introducido las funciones flecha (arrow functions) para simplificar su definici\u00f3n y uso.</p> <p>Ten\u00e9is m\u00e1s informaci\u00f3n sobre funciones an\u00f3nimas y flecha en el siguiente art\u00edculo (en ingl\u00e9s): Funciones an\u00f3nimas y flecha en PHP</p>"},{"location":"uutt/02_PHP/025_Funciones.html#biblioteca-de-funciones","title":"Biblioteca de funciones","text":"<p>Podemos agrupar un conjunto de funciones en un archivo, para permitir su reutilizaci\u00f3n. Posteriormente, se incluye con:</p> <ul> <li><code>include(archivo);</code> / <code>include_once(archivo);</code></li> <li><code>require(archivo);</code> / <code>require_once(archivo);</code></li> </ul> <p>Si no encuentra el archivo, <code>require</code> lanza un error fatal, <code>include</code> lo ignora Las funciones <code>_once</code> s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</p> <p>Por ejemplo, colocamos las funciones en el archivo <code>biblioteca.php</code>:</p> <pre><code>&lt;?php\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\nfunction resta(int $a, int $b) : int {\n    return $a - $b;\n}\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo:</p> <pre><code>&lt;?php \ninclude_once(\"biblioteca.php\");\necho suma(10,20);\necho resta(40,20);\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#plantillas-mediante-include","title":"Plantillas mediante <code>include</code>","text":"<p>Mediante el uso de la instrucci\u00f3n <code>include</code> tambi\u00e9n podemos separar fragmentos de c\u00f3digo PHP/HTML que queramos reutilizar en nuestros sitios web y crear un sistema muy sencillo de plantillas. Por ejemplo, vamos a separar una p\u00e1gina en tres partes, primero la parte superior en <code>encabezado.php</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;&lt;?= $titulo ?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n</code></pre> <p>La parte de abajo, por ejemplo, solo va a contener HTML y la colocamos en <code>pie.html</code>: <pre><code>&lt;footer&gt;Gin\u00e9s L\u00f3pez&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Y luego nos centramos \u00fanicamente en el contenido que cambia en <code>pagina.php</code>:</p> <pre><code>&lt;?php\n$titulo = \"P\u00e1gina con includes\";\ninclude(\"encabezado.php\");\n?&gt;\n&lt;h1&gt;&lt;?= $titulo ?&gt;&lt;/h1&gt;\n&lt;?php\ninclude(\"pie.html\");\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/025_Funciones.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC214 (AEA). (RA3 / CE3a CE3b CE3d CE3g / IC1 / 3p) - Tu CTO te recomienda que empieces a generar tu propia librer\u00eda de funciones. Para ello te propone que generes las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que averig\u00fce si un n\u00famero es par: <code>esPar(int $num): bool</code></li> <li>Una funci\u00f3n que devuelva un array de tama\u00f1o $tam con n\u00fameros aleatorios comprendido entre <code>$min</code> y <code>$max</code> : <code>arrayAleatorio(int $tam, int $min, int $max) : array</code></li> <li>Una funci\u00f3n que reciba un $array por referencia y devuelva la cantidad de n\u00fameros pares que hay almacenados: <code>arrayPares(array &amp;$array): int</code></li> </ul> </li> <li> <p>AC215 (AEA). (RA3 / CE3a CE3b CE3d CE3g / IC1 / 3p) - Has de seguir aumentando tu librer\u00eda, para ello te solicitan las siguientes funciones:</p> <ul> <li><code>digitos(int $num): int</code> \u2192 devuelve la cantidad de d\u00edgitos de un n\u00famero.</li> <li><code>digitoN(int $num, int $pos): int</code> \u2192 devuelve el d\u00edgito que ocupa, empezando por la izquierda, la posici\u00f3n <code>$pos</code>.</li> <li><code>quitaPorDetras(int $num, int $cant): int</code> \u2192 le quita por detr\u00e1s (derecha) <code>$cant</code> d\u00edgitos.</li> <li><code>quitaPorDelante(int $num, int $cant): int</code> \u2192 le quita por delante (izquierda) <code>$cant</code> d\u00edgitos.</li> </ul> </li> <li> <p>PR201 (AR). (RA3 / CE3a CE3b CE3d CE3g / IC1 / 3p) - Desde Docentes Asociados S.A necesitan ver algo de l\u00f3gica de un proceso de compra. Para ello, a partir de una cantidad de productos, leer el nombre y coste de la cantidad de productos indicados. Tras leer los datos del tiquet de compra, enumera en una tabla los productos, con su precio en euros y pesetas, y finalmente, en una \u00faltima fila, totalizar en ambas monedas.</p> </li> <li> <p>PR202 (AP). (RA2 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Siguiendo con la actividad anterior, crea una plantilla mediante includes:</p> <ul> <li>El encabezado (Supermercado Asociado en h1) </li> <li>El pie (Tu supermercado de confianza) </li> <li>Un fichero, que incluya el encabezado y el pie, que nos prepare la compra.</li> <li>Un fichero, que incluya el encabezado y el pie, que nos imprima el ticket de la compra.</li> </ul> </li> <li> <p>PR203 (AP). (RA2 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Se te solicita generar un sistema de acceso sencillo para el instituto. Para ello has de codificar el siguiente programa:</p> <ul> <li>login.php: el formulario de entrada, que solicita el usuario y contrase\u00f1a.</li> <li>compruebaLogin.php: recibe los datos y comprueba si son correctos (los usuarios se guardan en un array asociativo) pasando el control mediante el uso de include a:<ul> <li>ok.php: El usuario introducido es correcto</li> <li>ko.php: El usuario es incorrecto. Informar si ambos est\u00e1n mal o solo la contrase\u00f1a. Volver a mostrar el formulario de acceso.</li> </ul> </li> </ul> </li> </ul>"},{"location":"uutt/02_PHP/026_Strings.html","title":"Strings","text":"<p>Ya hemos visto que se pueden crear con comillas simples (<code>''</code>, sin interpretaci\u00f3n) o comillas dobles (<code>\"\"</code>, interpretan el contenido y las secuencias de escape <code>\\n</code>, <code>\\t</code>, <code>\\$</code>, <code>{</code>, \u2026 - magic quotes)</p> <pre><code>&lt;?php\n\"Me llamo $nombre\"\n\"Son 30 {$moneda}s\"\n?&gt;\n</code></pre> <p>Se acceden a los caracteres como si fuera un array.</p> <pre><code>&lt;?php\n$cadena = \u201cYo soy Batman\u201d;\n$ygriega = $cadena[0];\n?&gt;\n</code></pre> <p>Adem\u00e1s de <code>echo</code>, podemos mostrar las cadenas mediante la funci\u00f3n <code>printf</code>. Esta funci\u00f3n viene heredada del lenguaje C, y en la cadena se indica el tipo de dato a formatear y genera una salida formateada. Si quiero guardar el resultado en una variable, podemos utilizar <code>sprintf</code>.</p> <pre><code>&lt;?php\n$num = 33;\n$nombre = \"Larry Bird\";\nprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num); // %d -&gt; n\u00famero decimal, %s -&gt; string\n$frase = sprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num);\necho $frase\n?&gt;\n</code></pre> <p>Ten\u00e9is muchos m\u00e1s ejemplos en https://www.w3schools.com/php/func_string_printf.asp</p>"},{"location":"uutt/02_PHP/026_Strings.html#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":"<p>Todas las funciones se pueden consultar en https://www.php.net/manual/es/ref.strings.php</p> <p>Las m\u00e1s importantes son:</p> <ul> <li><code>strlen</code>: obtiene la longitud de una cadena y devuelve un n\u00famero entero</li> <li><code>substr</code>: devuelve una subcadena de la cadena original</li> <li><code>str_replace</code>: reemplaza caracteres en una cadena</li> <li><code>strtolower</code> y <code>strtoupper</code>: Transforman una cadena de caracteres en la misma cadena en min\u00fasculas o may\u00fasculas respectivamente.</li> </ul> <pre><code>&lt;?php\n$cadena = \"El caballero oscuro\";\n$tam = strlen($cadena);\necho \"La longitud de '$cadena' es: $tam &lt;br /&gt;\";\n\n$oscuro = substr($cadena, 13); // desde 13 al final\n$caba = substr($cadena, 3, 4); // desde 3, 4 letras\n$katman = str_replace(\"c\", \"k\", $cadena);\necho \"$oscuro $caba ahora es $katman\";\n\necho \"Grande \".strtoupper($cadena);\n?&gt;\n</code></pre> <p>Si queremos trabajar con caracteres ASCII de forma individual, son \u00fatiles las funciones:</p> <ul> <li><code>chr</code>: obtiene el car\u00e1cter a partir de un ASCII</li> <li><code>ord</code>: obtiene el ASCII de un car\u00e1cter</li> </ul> <pre><code>&lt;?php\nfunction despues(string $letra): string {\n    $asciiLetra = ord($letra);\n    return chr($asciiLetra + 1);\n}\n\necho despues(\"B\");\n?&gt;\n</code></pre> <p>Si queremos limpiar cadenas, tenemos las funciones:</p> <ul> <li><code>trim</code>: elimina los espacios al principio y al final</li> <li><code>ltrim</code> / <code>rtrim</code> o <code>chop</code>: Elimina los espacios iniciales / finales de una cadena.</li> <li><code>str_pad</code>: rellena la cadenas hasta una longitud especificada y con el car\u00e1cter o caracteres especificados.</li> </ul> <pre><code>&lt;?php\n$cadena = \" Programando en PHP \";\n$limpia = trim($cadena); // \"Programando en PHP\"\n\n$sucia = str_pad($limpia, 23, \".\"); // \"Programando en PHP.....\"\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/026_Strings.html#comparando-y-buscando","title":"Comparando y buscando","text":"<p>La comparaci\u00f3n de cadenas puede ser con conversi\u00f3n de tipos mediante <code>==</code> o estricta con <code>===</code>. Tambi\u00e9n funcionan los operadores <code>&lt;</code> y <code>&gt;</code> si ambas son cadenas. Al comparar cadenas con valores numericos podemos utilizar:</p> <ul> <li><code>strcmp</code>: 0 iguales, &lt;0 si <code>a&lt;b</code> o &gt;0 si <code>a&gt;b</code></li> <li><code>strcasecmp</code>: las pasa a min\u00fasculas y compara</li> <li><code>strncmp</code> / <code>strncasecmp</code>: compara los N primeros caracteres</li> <li><code>strnatcmp</code>: comparaciones naturales</li> </ul> <pre><code>&lt;?php\n$frase1 = \"Alfa\";\n$frase2 = \"Alfa\";\n$frase3 = \"Beta\";\n$frase4 = \"Alfa5\";\n$frase5 = \"Alfa10\";\n\nvar_dump( $frase1 == $frase2 ); // true\nvar_dump( $frase1 === $frase2 ); // true\nvar_dump( strcmp($frase1, $frase2) ); // 0\nvar_dump( strncmp($frase1, $frase5, 3) ); // 0\nvar_dump( $frase2 &lt; $frase3 ); // true\nvar_dump( strcmp($frase2, $frase3) ); // -1\nvar_dump( $frase4 &lt; $frase5 ); // false\nvar_dump( strcmp($frase4, $frase5) ); // 4 \u2192 f4 &gt; f5\nvar_dump( strnatcmp($frase4, $frase5) ); // -1 \u2192 f4 &lt; f5\n?&gt;\n</code></pre> <p>Si lo que queremos es buscar dentro de una cadena, tenemos:</p> <ul> <li><code>strpos</code> / <code>strrpos</code>: busca en una cadena y devuelve la posici\u00f3n de la primera/\u00faltima ocurrencia.</li> <li><code>strstr</code> / <code>strchr (alias)</code>: busca una cadena y devuelve la subcadena a partir de donde la ha encontrado</li> <li><code>stristr</code>: ignora las may\u00fasculas</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$pos1 = strpos($frase, \",\"); // encuentra la primera coma\n$pos2 = strrpos($frase, \",\"); // encuentra la \u00faltima coma\n$trasComa = strstr($frase, \",\"); // \", eso dicen, a veces\"\n?&gt;\n</code></pre> <p>Si queremos averiguar que contiene las cadenas, tenemos un conojunto de funciones de comprobaciones de tipo, se conocen como las funciones ctype que devuelven un booleano:</p> <ul> <li><code>ctype_alpha</code> \u2192 letras</li> <li><code>ctype_alnum</code> \u2192 alfanum\u00e9ricos</li> <li><code>ctype_digit</code> \u2192 d\u00edgitos</li> <li><code>ctype_punct</code> \u2192 caracteres de puntuaci\u00f3n, sin espacios</li> <li><code>ctype_space</code> \u2192 son espacios, tabulador, salto de l\u00ednea</li> </ul> <pre><code>&lt;?php\n$prueba1 = \"hola\";\n$prueba2 = \"hola33\";\n$prueba3 = \"33\";\n$prueba4 = \",.()[]\";\n$prueba5 = \" ,.()[]\";\n\necho ctype_alpha($prueba1).\"&lt;br&gt;\"; // true\necho ctype_alnum($prueba2).\"&lt;br&gt;\"; // true\necho ctype_digit($prueba3).\"&lt;br&gt;\"; // true\necho ctype_punct($prueba4).\"&lt;br&gt;\"; // true\necho ctype_space($prueba5).\"&lt;br&gt;\"; // false\necho ctype_space($prueba5[0]).\"&lt;br&gt;\"; // true\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/026_Strings.html#trabajando-con-subcadenas","title":"Trabajando con subcadenas","text":"<p>Si queremos romper las cadenas en trozos, tenemos:</p> <ul> <li><code>explode</code>: convierte en array la cadena mediante un separador.</li> <li><code>implode</code> / <code>join</code>: pasa un array a cadena con un separador</li> <li><code>str_split</code> / <code>chunk_split</code>: pasa una cadena a una array/cadena cada X caracteres</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$partes = explode(\",\", $frase);\n\n$ciudades = [\"Elche\", \"Aspe\", \"Alicante\"];\n$cadenaCiudades = implode(\"&gt;\", $ciudades);\n\n$partes3cadena = chunk_split($frase, 3);\n// Qui \n// en \n// bus \n// ca \n// ...\n$partes3array = str_split($frase, 3);\n// [\"Qui\", \"en \", \"bus\", \"ca \", \"enc\", \u2026] \n?&gt;\n</code></pre> <p>Si queremos trabajar con tokens:</p> <ul> <li><code>strtok(cadena, separador)</code></li> <li>y dentro del bucle: <code>strtok(separador)</code></li> </ul> <p>Finalmente, para separarla en base al formato:</p> <ul> <li><code>sscanf</code>: al rev\u00e9s que <code>sprintf</code>, crea un array a partir de la cadena y el patr\u00f3n.</li> </ul> <p>Finalmente, otras operaciones que podemos realizar para trabajar con subcadenas son:</p> <ul> <li><code>substr_count</code>: n\u00famero de veces que aparece la subcadena dentro de la cadena</li> <li><code>substr_replace</code>: reemplaza parte de la cadena a partir de su posici\u00f3n, y opcionalmente, longitud</li> </ul> <pre><code>&lt;?php\n$batman = \"Bruce Wayne es Batman\";\n$empresa = substr($batman, 6, 5); // Wayne\n$bes = substr_count($batman, \"B\"); // 2\n// Bruce Wayne es camarero\n$camarero1 = substr_replace($batman, \"camarero\", 15);\n$camarero2 = substr_replace($batman, \"camarero\", -6); // quita 6 desde el final\n// Bruno es Batman\n$bruno = substr_replace($batman, \"Bruno\", 0, 11);\n?&gt;\n</code></pre> <p>Tambi\u00e9n disponemos de una serie de funciones que facilitan las codificaciones desde y hacia HTML:</p> <ul> <li><code>htmlentities</code>: convierte a entidades HTML, por ejemplo, <code>\u00e1</code> por <code>&amp;aacute;</code>,  <code>\u00f1</code> por <code>&amp;ntilde;</code>, <code>&lt;</code> por <code>&amp;lt;</code>, etc..</li> <li><code>htmlspecialchars</code>: idem pero solo con los caracteres especiales (<code>&amp;</code>, <code>\"</code>, <code>'</code>, <code>&lt;</code>, <code>&gt;</code>, ...)</li> <li><code>striptags</code>: elimina etiquetas HTML.</li> <li><code>nl2br</code>: cambia saltos de l\u00ednea por <code>&lt;br /&gt;</code>.</li> <li><code>rawurlencode</code> / <code>rawurldecode</code>: codifica/decodifica una URL (espacios, ...).</li> </ul> <p>Estas funciones las utilizaremos en la unidad 4.- Programaci\u00f3n Web.</p>"},{"location":"uutt/02_PHP/027_OperacionesMatematicas.html","title":"Operaciones Matem\u00e1ticas","text":"<p>Disponemos tanto de constantes como funciones ya definidas para trabajar con operaciones matem\u00e1ticas: https://www.php.net/manual/es/ref.math.php</p> <ul> <li>Constantes ya definidas<ul> <li><code>M_PI</code>, <code>M_E</code>, <code>M_EULER</code>, <code>M_LN2</code>, <code>M_LOG2E</code></li> <li><code>PHP_INT_MAX</code>, <code>PHP_FLOAT_MAX</code></li> </ul> </li> <li>Funciones de c\u00e1lculo<ul> <li><code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>decbin</code>, <code>bindec</code>, <code>decoct</code>, <code>dechex</code>, <code>base_convert</code>, <code>max</code>, <code>min</code></li> </ul> </li> <li>Funciones trigonom\u00e9tricas<ul> <li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>deg2rad</code>, <code>rad2deg</code></li> </ul> </li> <li>Funciones para trabajar con n\u00fameros aleatorios<ul> <li><code>rand</code>, <code>mt_rand</code> (m\u00e1s r\u00e1pida)</li> </ul> </li> </ul> <p>Aunque la mayor\u00eda de ellas son muy espec\u00edficas de problemas matem\u00e1ticos / estad\u00edsticos, es muy com\u00fan que tengamos que redondear y/o formatear los c\u00e1lculos antes de mostrarlos al usuario.</p> <p>Mediante la funci\u00f3n <code>number_format(numero, cantidadDecimales, separadorDecimales, separadorMiles)</code> podermos pasar n\u00fameros a cadena con decimales y/o separadores de decimales y/o de miles.</p> <pre><code>&lt;?php\n$nf = 1234.5678;\necho number_format($nf, 2); // 1,234.57\necho number_format($nf, 2, \"M\", \"#\"); // 1#234M57\n?&gt;\n</code></pre> <p>Para redondear, tenemos <code>abs</code> para el valor absoluto y <code>round</code> para redondear, <code>ceil</code> para aproximaci\u00f3n por exceso y <code>floor</code> por defecto.</p> <pre><code>&lt;?php\n$num = 7.7;\n$siete = floor($num);\n$ocho = ceil($num);\n\n$otro = 4.49;\n$cuatro = round($otro);\n$cuatrocinco = round($otro, 1);\n$cinco = round($cuatrocinco);\n?&gt;\n</code></pre>"},{"location":"uutt/02_PHP/027_OperacionesMatematicas.html#actividades","title":"Actividades","text":"<ul> <li>AC216 (AEA). (RA3 / CE3a CE3b CE3d / IC1 / 3p) - Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo ax\u00b2 + bx + c = 0. Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n dependiendo del valor del discriminante b\u00b2-4ac.</li> </ul>"},{"location":"uutt/02_PHP/028_Formularios.html","title":"Formularios","text":"<p>Los datos se env\u00edan via URL con el formato <code>var1=valor1&amp;var2=valor2\u2026</code>. Por ejemplo: <code>ejemplo.php?nombre=Bruce+apellido1=Wayne</code></p> <p>Se divide en dos pasos:</p> <ol> <li>Generar un formulario con <code>action='archivo.php' method='GET'</code></li> <li>En el archivo <code>.php</code> leer los datos con <code>$_GET['nombreVar']</code></li> </ol> <p>Vamos a separar siempre que podamos el c\u00f3digo HTML del de PHP. Por ejemplo, el formulario lo colocamos en <code>saluda.html</code>:</p> <pre><code>&lt;form action=\"saluda.php\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt; \n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"submit\" value=\"enviar\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Y recogemos los datos en <code>saluda.php</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET[\"nombre\"];\n$apellido1 = $_GET[\"apellido1\"];\n\necho \"Hola $nombre $apellido1\";\n?&gt;\n</code></pre> <p>Si lo quisi\u00e9ramos realizar todo en un \u00fanico archivo (lo cual no es recomendable), podemos hacerlo as\u00ed:</p> <pre><code>&lt;form action=\"\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;input type=\"submit\" value=\"enviar\"&gt;\n&lt;/form&gt;\n&lt;p&gt;\n    &lt;?php\n    if(isset($_GET['nombre'])) {\n        $nombre = $_GET[\"nombre\"];\n        $apellido1 = $_GET[\"apellido1\"];\n\n        echo \"Hola $nombre $apellido1\";\n    }\n    ?&gt;\n&lt;/p&gt;\n</code></pre> <p>El trabajo con formularios lo estudiaremos en profundidad en la unidad 4, y veremos que adem\u00e1s de <code>GET</code>, podemos enviar los datos con <code>POST</code>.</p>"},{"location":"uutt/02_PHP/028_Formularios.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC217 (AEA). (RA3 / CE3a CE3b CE3d CE3e CE3f / IC1 / 3p) - Es hora de revisar tu c\u00f3digo del pasado, para ello retoma la actividad AC203.Ahora, has de generar dos documentos: en el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo.</p> </li> <li> <p>AC218 (AR). (RA3 / CE3a CE3b CE3d CE3e CE3f / IC1 / 3p) - Tu supervisor necesita ver que vas dominando el manejo de formularios, para ello te encarga que generes un programa que tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 67 a\u00f1os. En este caso, no hace falta que previamente crees un formulario.</p> <p>Tip</p> <p><code>$anyoActual = date(\"Y\");</code></p> </li> </ul>"},{"location":"uutt/02_PHP/029_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Manual de PHP</li> <li>Documento: PHP en 2020, por Jes\u00fas Amieiro</li> <li>Web: Apuntes de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia</li> <li>Web: Gu\u00eda de Estilo - PSR</li> <li>Manual: PHP - La manera correcta</li> <li>Web: Desarrollo Web en Entorno Servidor, por Aitor Medrano</li> </ul>"},{"location":"uutt/02_PHP/029_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Novedades de PHP 8.1</li> </ul>"},{"location":"uutt/02_PHP/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/02_PHP/ProgramacionAula.html#resultados-de-aprendizaje","title":"Resultados de aprendizaje","text":"<ul> <li> <p> RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>b. Se han identificado las principales tecnolog\u00edas asociadas.</li> <li>c. Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>d. Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>e. Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>f. Se han utilizado directivas para modificar el comportamiento predeterminado.</li> <li>g. Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>h. Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ul> </li> <li> <p> RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas.</li> <li>b. Se han utilizado mecanismos para mantener el estado de las aplicaciones web.</li> <li>c. Se han utilizado mecanismos para almacenar informaci\u00f3n en el cliente web y para recuperar su contenido.</li> <li>d. Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios.</li> <li>e. Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.</li> <li>f. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </li> </ul>"},{"location":"uutt/02_PHP/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 02 01 16/09/2024 <p>Lenguaje Web</p> <ul> <li>El lenguaje PHP</li> </ul> <ul> <li>AC201. Muestra tres frases utilizando PHP.</li> </ul> 02 17/09/2024 <p>Variables, datos y operadores</p> <ul> <li>Variables</li> <li>Constantes</li> <li>Operadores</li> </ul> <ul> <li>AC202. Uso de variables para operaciones b\u00e1sicas.</li> <li>AC203. Almacenar datos personales y mostrar tabla conj ellos.</li> <li>AC204. Desglose de cantidad en billetes y monedas.</li> </ul> 03 18/09/2024 <p>Estructuras de control</p> <ul> <li>Condici\u00f3n</li> <li>Repetici\u00f3n</li> </ul> <ul> <li>AC205. Positivos o negativos</li> <li>AC206. Reloj</li> <li>AC207. N\u00fameros pares en un intervalo.</li> <li>AC208. Suma de n\u00fameros en un intervalo.</li> <li>AC209. Potencias usando estructuras de control</li> </ul> 04 19/09/2024 <p>Arrays</p> <ul> <li>Introducci\u00f3n</li> <li>Arrays Asociativos</li> </ul> <ul> <li>AC210. Rellenar un array en un intervalo</li> <li>AC211. Bola 8 m\u00e1gica</li> </ul> 05 23/09/2024 <p>Arrays</p> <ul> <li>Operaciones</li> <li>Arrays bidimensionales</li> </ul> <ul> <li>AC212. Refactorizar AC204 con arrays y bucles</li> <li>AC213. Manejo de array bidimensional</li> </ul> 06 24/09/2024 <p>Programaci\u00f3n modular</p> <ul> <li>Par\u00e1metros</li> <li>Funciones tipadas</li> <li>Alcance o scope</li> </ul> <ul> <li>AC214. Inicio de librer\u00eda de funciones.</li> <li>AC215. Continuaci\u00f3n de librer\u00eda de funciones.</li> </ul> 07 25/09/2024 <p>Arquitectura web</p> <ul> <li>Funciones variables</li> <li>Biblioteca de funciones</li> <li>Plantillas mediante include</li> </ul> <ul> <li>PR201. Ticket de supermercado.</li> <li>PR202. Ticket de supermercado con include.</li> </ul> 08 26/09/2024 <p>Strings</p> <ul> <li>Definici\u00f3n</li> <li>Operaciones b\u00e1sicas</li> <li>Comparando y buscando</li> <li>Subcadenas</li> </ul> <ul> <li>PR203. Acceso para instituto.</li> </ul> 09 30/09/2024 <p>Operaciones matem\u00e1ticas</p> <ul> <li>Constantes matem\u00e1ticas</li> <li>Funciones</li> </ul> <ul> <li>AC216. Resoluci\u00f3n ecuaci\u00f3n segundo grado</li> </ul> 10 01/10/2024 <p>Formularios</p> <ul> <li>Manejo de formularios</li> </ul> <ul> <li>AC217. Refactorizar AC203 con el uso de formularios.</li> </ul> 11 02/10/2024 <ul> <li>Autoevaluaci\u00f3n</li> </ul> <ul> <li>AC218. C\u00e1lculo edad de jubilaci\u00f3n.</li> </ul> 12 03/10/2024 <p>Prueba de conocimiento</p> <ul> <li>Test</li> </ul> <p>Prueba de conocimiento</p> <ul> <li>Pr\u00e1ctico</li> </ul>"},{"location":"uutt/02_PHP/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT2. PHP</p> <p>Horas</p> <p>12 Sesiones - 24H</p> <p>Resultados de Aprendizaje</p> <p>RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>Preconocimiento</p> <p>Conocimientos del m\u00f3dulo de Programaci\u00f3n de 1\u00ba.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Integraci\u00f3n de etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>OD2: Escribir sentencias simples. </li> <li>OD3: Dise\u00f1ar programas simples.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones.</li> <li>n. Elaborar y mantener la documentaci\u00f3n de los procesos de desarrollo, utilizando herramientas de generaci\u00f3n de documentaci\u00f3n y control de versiones.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Estructura de un programa en PHP.</li> <li>CES2. Tipos de variable.</li> <li>CES3. Estructuras de control.</li> <li>CES4. Programaci\u00f3n modular.</li> <li>CES5. Arquitectura web.</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC201. Muestra tres frases utilizando PHP.</p> <p>CE2a, CE2c, CE2d</p> <p>IE1</p> <p>IC1</p> <p>AC202. Uso de variables para operaciones b\u00e1sicas.</p> <p>CE2d, CE2g</p> <p>IE1</p> <p>IC1</p> <p>AC203. Almacenar datos personales y mostrar tabla con ellos.</p> <p>CE2c, CE2d, CE2g</p> <p>IE1</p> <p>IC1</p> <p>AC207. N\u00fameros pares en un intervalo.</p> <p>CE2d, CE2e, CE2g CE2h</p> <p>IE1</p> <p>IC1</p> <p>AC210. Rellenar un array en un intervalo.</p> <p>CE3a, CE3b, CE3c, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC2014. Inicio de librer\u00eda de funciones.</p> <p>CE3a, CE3b, CE3c, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC215. Continuaci\u00f3n de librer\u00eda de funciones.</p> <p>CE3a, CE3b, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC216. Resoluci\u00f3n ecuaci\u00f3n segundo grado.</p> <p>CE3a, CE3b, CE3d</p> <p>IE1</p> <p>IC1</p> <p>AC217. Refactorizar AC203 con el uso de formularios.</p> <p>CE3a, CE3b, CE3d, CE3e, CE3f</p> <p>IE1</p> <p>IC1</p> <p>AC218. C\u00e1lculo edad de jubilaci\u00f3n.</p> <p>CE3a, CE3b, CE3d, CE3e, CE3f</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC205. Positivos o negativos</p> <p>CE2c, CE2d, CE2g</p> <p>IE1</p> <p>IC1</p> <p>AC206. Reloj</p> <p>CE2c, CE2d, CE2g</p> <p>IE1</p> <p>IC1</p> <p>AC208. Suma de n\u00fameros en un intervalo.</p> <p>CE2d, CE2e, CE2g, CE2h</p> <p>IE1</p> <p>IC1</p> <p>AC213. Manejo de array bidimensional</p> <p>CE3a, CE3b, CE3c, CE3g</p> <p>IE1</p> <p>IC1</p> <p>PR201. Ticket de supermercado.</p> <p>CE3a, CE3b, CE3c, CE3g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC204. Desglose de cantidad en billetes y monedas.</p> <p>CE2d, CE2g</p> <p>IE1</p> <p>IC1</p> <p>AC209. Potencias usando estructuras de control.</p> <p>CE2d, CE2e, CE2g, CE2h</p> <p>IE1</p> <p>IC1</p> <p>AC211. Bola 8 m\u00e1gica</p> <p>CE3a, CE3b, CE3c, CE3e, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC212. Refactorizar AC204 con arrays y bucles</p> <p>CE3a, CE3b, CE3c, CE3g</p> <p>IE1</p> <p>IC1</p> <p>PR202. Ticket de supermercado con include.</p> <p>CE3a, CE3b, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>PR203. Acceso para instituto.</p> <p>CE3a, CE3b, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE2a, CE2b, CE2c, CE2d, CE2e, CE2f, CE2g, CE2h, CE3a, CE3b, CE3c, CE3d, CE3e, CE3f, CE3g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/02_PHP/Reto1.html","title":"Reto 1","text":"<p>Bienvenidos al desaf\u00edo de Desarrollo Web en Entorno Servidor, enfocado en la creaci\u00f3n de un prototipo funcional de una herramienta de comercio electr\u00f3nico utilizando PHP orientado a objetos. Este proyecto te invita a aplicar y profundizar en tus conocimientos en programaci\u00f3n web, enfoc\u00e1ndose en la construcci\u00f3n de un prototipo que simule la funcionalidad b\u00e1sica de una tienda en l\u00ednea. Durante este reto, se espera que desarrolles funcionalidades clave como la navegaci\u00f3n de productos, gesti\u00f3n del carrito de compras y el proceso de checkout, utilizando clases y objetos para organizar el c\u00f3digo de manera eficiente. Este enfoque pr\u00e1ctico te permitir\u00e1 experimentar con el dise\u00f1o y la implementaci\u00f3n de soluciones web, mejorando vuestras habilidades t\u00e9cnicas y prepar\u00e1ndote para futuros proyectos de desarrollo web.</p>"},{"location":"uutt/02_PHP/Reto1.html#objetivo-del-reto","title":"Objetivo del reto","text":"<p>Desarrollar un prototipo funcional de una herramienta de comercio electr\u00f3nico utilizando PHP orientado a objetos. Este prototipo servir\u00e1 como una base inicial para entender y aplicar conceptos fundamentales en un entorno de comercio electr\u00f3nico real.</p>"},{"location":"uutt/02_PHP/Reto1.html#requisitos-especificos","title":"Requisitos espec\u00edficos","text":"<ul> <li> <p>Clases y Objetos: Dise\u00f1ar y implementar clases en PHP que representen los componentes esenciales de una tienda en l\u00ednea, incluyendo al menos:</p> <ul> <li>Producto: Atributos como nombre, descripci\u00f3n, precio, y categor\u00eda.</li> <li>Usuario: Informaci\u00f3n b\u00e1sica del usuario y m\u00e9todos para su gesti\u00f3n.</li> <li>Carrito de Compras: Funcionalidades para agregar y remover productos, calcular el total, etc.</li> </ul> <p>Usa todos los conceptos de clase</p> <p>Aunque lo f\u00e1cil es que vayas a clases complejas, trata de utilizar conceptos de la POO como herencia o interfaces. Esto te ayudar\u00e1 para lograr una mejor compresi\u00f3n del paradigma y har\u00e1 que tu aplicaci\u00f3n sea m\u00e1s sencilla de mantener y de evolucionar.</p> </li> <li> <p>Integraci\u00f3n con Lenguajes de Marcas:</p> <ul> <li>Embeber PHP en HTML para crear interfaces de usuario din\u00e1micas que permitan la interacci\u00f3n con el objeto de Carrito de Compras y la visualizaci\u00f3n de productos.</li> </ul> </li> <li> <p>Funcionalidades del Prototipo:</p> <ul> <li>Listado de productos: Mostrar productos disponibles con opci\u00f3n de a\u00f1adir al carrito.</li> <li>Gesti\u00f3n del carrito de compras: Permitir a los usuarios modificar el contenido de su carrito (a\u00f1adir o eliminar productos).</li> <li>Simulaci\u00f3n de checkout: Procesar un pedido simulado mostrando un resumen y el total a pagar.</li> </ul> <p>Un simple mensaje basta</p> <p>Una pantalla sencilla es m\u00e1s que v\u00e1lida para simular el checkout. No se busca que integres pasarelas de pago como Paypal o Stripe.</p> </li> </ul>"},{"location":"uutt/02_PHP/Reto1.html#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>Adem\u00e1s de los los criterios de evaluaci\u00f3n que se trabajan en las UT 02 y UT 03, se valorar\u00e1:</p> <ul> <li>Funcionalidad: El prototipo debe ser operativo, permitiendo la interacci\u00f3n b\u00e1sica con productos y el carrito de compras.</li> <li>Adherencia a Est\u00e1ndares: El c\u00f3digo debe seguir buenas pr\u00e1cticas de programaci\u00f3n y estar bien organizado.</li> </ul>"},{"location":"uutt/02_PHP/Reto1.html#recursos-disponibles","title":"Recursos disponibles","text":"<ul> <li>Apuntes del m\u00f3dulo.</li> <li>Acceso a recursos en l\u00ednea para investigaci\u00f3n y consulta.</li> </ul>"},{"location":"uutt/02_PHP/Reto1.html#entrega","title":"Entrega","text":"<ul> <li>Trabajo individual.</li> <li>C\u00f3digo fuente del proyecto.</li> <li>Documentaci\u00f3n breve explicando la estructura del c\u00f3digo y decisiones de dise\u00f1o.</li> </ul>"},{"location":"uutt/02_PHP/Reto1.html#fecha-de-entrega","title":"Fecha de entrega","text":"<p>La entrega ser\u00e1 a trav\u00e9s de Aules al finalizar la UT 03</p>"},{"location":"uutt/03_PHPPOO/0310_GestionErrores.html","title":"Gesti\u00f3n de Errores","text":"<p>PHP clasifica los errores que ocurren en diferentes niveles. Cada nivel se identifica con una constante. Por ejemplo:</p> <ul> <li><code>E_ERROR</code>: errores fatales, no recuperables. Se interrumpe el script.</li> <li><code>E_WARNING</code>: advertencias en tiempo de ejecuci\u00f3n. El script no se interrumpe.</li> <li><code>E_NOTICE</code>: avisos en tiempo de ejecuci\u00f3n.  </li> </ul> <p>Pod\u00e9is comprobar el listado completo de constantes de https://www.php.net/manual/es/errorfunc.constants.php</p> <p>Para la configuraci\u00f3n de los errores podemos hacerlo de dos formas:</p> <ul> <li>A nivel de <code>php.ini</code>:<ul> <li><code>error_reporting</code>: indica los niveles de errores a notificar<ul> <li><code>error_reporting = E_ALL &amp; ~E_NOTICE</code> -&gt; Todos los errores menos los avisos en tiempo de ejecuci\u00f3n.</li> </ul> </li> <li><code>display_errors</code>: indica si mostrar o no los errores por pantalla. En entornos de producci\u00f3n es com\u00fan ponerlo a <code>off</code></li> </ul> </li> <li>mediante c\u00f3digo con las siguientes funciones:<ul> <li><code>error_reporting(codigo)</code> -&gt; Controla qu\u00e9 errores notificar</li> <li><code>set_error_handler(nombreManejador)</code> -&gt; Indica que funci\u00f3n se invocar\u00e1 cada vez que se encuentre un error. El manejador recibe como par\u00e1metros el nivel del error y el mensaje</li> </ul> </li> </ul> <p>A continuaci\u00f3n tenemos un ejemplo mediante c\u00f3digo:</p> Funciones para la gesti\u00f3n de erroresConsola <pre><code>&lt;?php\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE\u00a0&amp;\u00a0~E_WARNING);\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE);\nset_error_handler(\"miManejadorErrores\");\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\nrestore_error_handler();\u00a0//\u00a0vuelve\u00a0al\u00a0anterior\n\nfunction\u00a0miManejadorErrores($nivel,\u00a0$mensaje)\u00a0{\n    switch($nivel)\u00a0{\n        case\u00a0E_WARNING:\n            echo\u00a0\"&lt;strong&gt;Warning&lt;/strong&gt;:\u00a0$mensaje.&lt;br/&gt;\";\n            break;\n        default:\n            echo\u00a0\"Error\u00a0de\u00a0tipo\u00a0no\u00a0especificado:\u00a0$mensaje.&lt;br/&gt;\";\n    }\n}\n</code></pre> <pre><code>Error de tipo no especificado: Undefined variable: dividendo.\nError de tipo no especificado: Undefined variable: divisor.\nError de tipo Warning: Division by zero.\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html","title":"Excepciones","text":"<p>La gesti\u00f3n de excepciones forma parte desde PHP 5. Su funcionamiento es similar a Java, haciendo uso de un bloque <code>try / catch / finally</code>. Si detectamos una situaci\u00f3n an\u00f3mala y queremos lanzar una excepci\u00f3n, deberemos realizar <code>throw new Exception</code> (adjuntando el mensaje que lo ha provocado).</p> <pre><code>&lt;?php\ntry\u00a0{\n    if\u00a0($divisor\u00a0==\u00a00) {\n        throw\u00a0new\u00a0Exception(\"Divisi\u00f3n\u00a0por\u00a0cero.\");\n    }\n    $resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n    echo\u00a0\"Se\u00a0ha\u00a0producido\u00a0el\u00a0siguiente\u00a0error:\u00a0\".$e-&gt;getMessage();\n}\n</code></pre> <p>La clase <code>Exception</code> es la clase padre de todas las excepciones. Su constructor recibe <code>mensaje[,codigoError][,excepcionPrevia]</code>.</p> <p>A partir de un objeto <code>Exception</code>, podemos acceder a los m\u00e9todos <code>getMessage()</code>y <code>getCode()</code> para obtener el mensaje y el c\u00f3digo de error de la excepci\u00f3n capturada.</p> <p>El propio lenguaje ofrece un conjunto de excepciones ya definidas, las cuales podemos capturar (y lanzar desde PHP 7). Se recomienda su consulta en la documentaci\u00f3n oficial.</p>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#creando-excepciones","title":"Creando excepciones","text":"<p>Para crear una excepci\u00f3n, la forma m\u00e1s corta es crear una clase que \u00fanicamente herede de <code>Exception</code>.</p> <pre><code>&lt;?php\nclass\u00a0HolaExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre> <p>Si queremos, y es recomendable dependiendo de los requisitos, podemos sobrecargar los m\u00e9todos m\u00e1gicos, por ejemplo, sobrecargando el constructor y llamando al constructor del padre, o rescribir el m\u00e9todo <code>__toString</code> para cambiar su mensaje:</p> <pre><code>&lt;?php\nclass\u00a0MiExcepcion\u00a0extends\u00a0Exception\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct($msj,\u00a0$codigo\u00a0=\u00a00,\u00a0Exception\u00a0$previa\u00a0=\u00a0null)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0c\u00f3digo\u00a0propio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent::__construct($msj,\u00a0$codigo,\u00a0$previa);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__CLASS__\u00a0.\u00a0\":\u00a0[{$this-&gt;code}]:\u00a0{$this-&gt;message}\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0miFuncion()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Una\u00a0funci\u00f3n\u00a0personalizada\u00a0para\u00a0este\u00a0tipo\u00a0de\u00a0excepci\u00f3n\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n</code></pre> <p>Si definimos una excepci\u00f3n de aplicaci\u00f3n dentro de un namespace, cuando referenciemos a <code>Exception</code>, deberemos referenciarla mediante su nombre totalmente cualificado (<code>\\Exception</code>), o utilizando <code>use</code>:</p> Mediante nombre totalmente cualificadoMediante <code>use</code> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0\\Exception\u00a0{}\n</code></pre> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nuse Exception;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#excepciones-multiples","title":"Excepciones m\u00faltiples","text":"<p>Se pueden usar excepciones m\u00faltiples para comprobar diferentes condiciones. A la hora de capturarlas, se hace de m\u00e1s espec\u00edfica a m\u00e1s general.</p> <pre><code>&lt;?php\n$email\u00a0=\u00a0\"ejemplo@ejemplo.com\";\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0si\u00a0el\u00a0email\u00a0es\u00a0v\u00e1lido\n\u00a0\u00a0\u00a0\u00a0if(filter_var($email,\u00a0FILTER_VALIDATE_EMAIL)\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0MiExcepcion($email);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0la\u00a0palabra\u00a0ejemplo\u00a0en\u00a0la\u00a0direcci\u00f3n\u00a0email\n\u00a0\u00a0\u00a0\u00a0if(strpos($email,\u00a0\"ejemplo\")\u00a0!==\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0Exception(\"$email\u00a0es\u00a0un\u00a0email\u00a0de\u00a0ejemplo no v\u00e1lido\");\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0catch\u00a0(MiExcepcion\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;miFuncion();\n}\u00a0catch(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Si en el mismo <code>catch</code> queremos capturar varias excepciones, hemos de utilizar el operador <code>|</code>:</p> <pre><code>&lt;?php\nclass\u00a0MainException\u00a0extends\u00a0Exception\u00a0{}\nclass\u00a0SubException\u00a0extends\u00a0MainException\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0SubException(\"Lanzada\u00a0SubException\");\n}\u00a0catch\u00a0(MainException\u00a0|\u00a0SubException\u00a0$e\u00a0)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0Exception\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Desde PHP 7, existe el tipo <code>Throwable</code>, el cual es un interfaz que implementan tanto los errores como las excepciones, y nos permite capturar los dos tipos a la vez:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0tu\u00a0codigo\n}\u00a0catch\u00a0(Throwable\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Forma\u00a0de\u00a0capturar\u00a0errores\u00a0y\u00a0excepciones\u00a0a\u00a0la\u00a0vez';\n}\n</code></pre> <p>Si s\u00f3lo queremos capturar los errores fatales, podemos hacer uso de la clase <code>Error</code>:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Genera\u00a0una\u00a0notificaci\u00f3n\u00a0que\u00a0no\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$variableNoAsignada;\n\u00a0\u00a0\u00a0\u00a0//\u00a0Error\u00a0fatal\u00a0que\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0funcionQueNoExiste();\n}\u00a0catch\u00a0(Error\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0capturado:\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#relanzar-excepciones","title":"Relanzar excepciones","text":"<p>En las aplicaciones reales, es muy com\u00fan capturar una excepci\u00f3n de sistema y lanzar una de aplicaci\u00f3n que hemos definido nostros. Tambi\u00e9n podemos lanzar las excepciones sin necesidad de estar dentro de un <code>try/catch</code>.</p> <pre><code>&lt;?php\nclass\u00a0AppException\u00a0extends\u00a0Exception\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0C\u00f3digo\u00a0de\u00a0negocio\u00a0que\u00a0falla\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0AppException(\"AppException:\u00a0\".$e-&gt;getMessage(), $e-&gt;getCode(),\u00a0$e);\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/0311_Excepciones.html#actividades","title":"Actividades","text":"<ul> <li>PR304 (SA). (RA3 RA4 / CE3b CE3c CE3d CE3g CE4f / IC1 / 3p) - El CTO del proyecto te insta a que implementes un control de excepciones \u00f3ptimo en todo lo que llevas desarrollado hasta ahora.</li> </ul>"},{"location":"uutt/03_PHPPOO/0312_SPL.html","title":"SPL","text":"<p>Standard PHP Library es el conjunto de funciones y utilidades que ofrece PHP, como:</p> <ul> <li>Estructuras de datos<ul> <li>Pila, cola, cola de prioridad, lista doblemente enlazada, etc... </li> </ul> </li> <li>Conjunto de iteradores dise\u00f1ados para recorrer estructuras agregadas<ul> <li>arrays, resultados de bases de datos, \u00e1rboles XML, listados de directorios, etc.</li> </ul> </li> </ul> <p>Pod\u00e9is consultar la documentaci\u00f3n en https://www.php.net/manual/es/book.spl.php.</p> <p>Tambi\u00e9n define un conjunto de excepciones que podemos utilizar para que las lancen nuestras aplicaciones:</p> <ul> <li><code>LogicException</code> (<code>extends Exception</code>)<ul> <li><code>BadFunctionCallException</code></li> <li><code>BadMethodCallException</code></li> <li><code>DomainException</code></li> <li><code>InvalidArgumentException</code></li> <li><code>LengthException</code></li> <li><code>OutOfRangeException</code></li> </ul> </li> <li><code>RuntimeException</code> (<code>extends Exception</code>)<ul> <li><code>OutOfBoundsException</code></li> <li><code>OverflowException</code></li> <li><code>RangeException</code></li> <li><code>UnderflowException</code></li> <li><code>UnexpectedValueException</code></li> </ul> </li> </ul> <p>Tambi\u00e9n pod\u00e9is consultar la documentaci\u00f3n de estas excepciones en https://www.php.net/manual/es/spl.exceptions.php.</p>"},{"location":"uutt/03_PHPPOO/0313_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Manual de PHP</li> <li>Manual: Manual de OO en PHP - www.desarrolloweb.com</li> </ul>"},{"location":"uutt/03_PHPPOO/0313_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Tutorial de la librer\u00eda SPL  por Diego L\u00e1zaro</li> </ul>"},{"location":"uutt/03_PHPPOO/0314_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 palabra clave se utiliza en PHP para definir una clase?<ol> <li>class</li> <li>object</li> <li>model</li> <li>struct</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. class.</p> <ol> <li>\u00bfC\u00f3mo se crea una instancia de una clase en PHP?<ol> <li>$objeto = new Clase();</li> <li>$objeto = create Clase();</li> <li>$objeto = construct Clase();</li> <li>$objeto = initiate Clase();</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. $objeto = new Clase();.</p> <ol> <li>\u00bfCu\u00e1l de las siguientes es una caracter\u00edstica de la POO en PHP?<ol> <li>Reutilizaci\u00f3n del c\u00f3digo</li> <li>No permite la herencia</li> <li>Solo admite funciones</li> <li>No soporta encapsulamiento</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. Reutilizaci\u00f3n del c\u00f3digo.</p> <ol> <li>\u00bfQu\u00e9 palabra clave se utiliza para acceder a m\u00e9todos o propiedades de la misma clase en PHP?<ol> <li>self</li> <li>this</li> <li>me</li> <li>own</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. this.</p> <ol> <li>\u00bfQu\u00e9 concepto de POO se refiere a la capacidad de una subclase de heredar los m\u00e9todos y propiedades de una superclase en PHP?<ol> <li>Encapsulamiento</li> <li>Abstracci\u00f3n</li> <li>Polimorfismo</li> <li>Herencia</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. Herencia</p>"},{"location":"uutt/03_PHPPOO/031_ClasesObjetos.html","title":"Clases y Objetos","text":"<p>PHP sigue un paradigma de programaci\u00f3n orientada a objetos (POO) basada en clases.</p> <p>Un clase es un plantilla que define las propiedades y m\u00e9todos para poder crear objetos. De este manera, un objeto es una instancia de una clase.</p> <p>Tanto las propiedades como los m\u00e9todos se definen con una visibilidad (quien puede acceder)</p> <ul> <li>Privado - <code>private</code>:  S\u00f3lo puede acceder la propia clase.</li> <li>Protegido - <code>protected</code>: S\u00f3lo puede acceder la propia clase o sus descendientes.</li> <li>P\u00fablico - <code>public</code>: Puede acceder cualquier otra clase.</li> </ul> <p>Para declarar una clase, se utiliza la palabra clave <code>class</code> seguido del nombre de la clase. Para instanciar un objeto a partir de la clase, se utiliza <code>new</code>:</p> <pre><code>&lt;?php\nclass NombreClase {\n// propiedades\n// y m\u00e9todos\n}\n\n$ob = new NombreClase();\n</code></pre> <p>Clases con may\u00fascula</p> <p>Todas las clases empiezan por letra may\u00fascula.</p> <p>Una vez que hemos creado un objeto, se utiliza el operador <code>-&gt;</code> para acceder a una propiedad o un m\u00e9todo:</p> <pre><code>$objeto-&gt;propiedad;\n$objeto-&gt;m\u00e9todo(par\u00e1metros);\n</code></pre> <p>Si desde dentro de la clase, queremos acceder a una propiedad o m\u00e9todo de la misma clase, utilizaremos la referencia <code>$this</code>;</p> <pre><code>$this-&gt;propiedad;\n$this-&gt;m\u00e9todo(par\u00e1metros);  \n</code></pre> <p>As\u00ed pues, como ejemplo, codificar\u00edamos una persona en el fichero <code>Persona.php</code> como:</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0setNombre(string $nom)\u00a0{\n        $this-&gt;nombre=$nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n        echo\u00a0$this-&gt;nombre;\n        echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$gines\u00a0=\u00a0new\u00a0Persona(); // creamos un objeto\n$gines-&gt;setNombre(\"Gin\u00e9s L\u00f3pez\");\n$gines-&gt;imprimir();\n</code></pre> <p>Aunque se pueden declarar varias clases en el mismo archivo, es una mala pr\u00e1ctica. As\u00ed pues, cada fichero contendr\u00e1 una sola clase, y se nombrar\u00e1 con el nombre de la clase.</p>"},{"location":"uutt/03_PHPPOO/032_Encapsulacion.html","title":"Encapsulaci\u00f3n","text":"<p>Las propiedades se definen privadas o protegidas (si queremos que las clases heredadas puedan acceder).</p> <p>Para cada propiedad, se a\u00f1aden m\u00e9todos p\u00fablicos (getter/setter):</p> <pre><code>public setPropiedad(tipo $param)\npublic getPropiedad() : tipo\n</code></pre> <p>Las constantes se definen p\u00fablicas para que sean accesibles por todos los recursos.</p> <pre><code>&lt;?php\nclass\u00a0MayorMenor\u00a0{\n    private\u00a0int $mayor;\n    private\u00a0int $menor;\n\n    public\u00a0function\u00a0setMayor(int\u00a0$may)\u00a0{\n        $this-&gt;mayor\u00a0=\u00a0$may;\n    }\n\n    public\u00a0function\u00a0setMenor(int\u00a0$men)\u00a0{\n        $this-&gt;menor\u00a0=\u00a0$men;\n    }\n\n    public\u00a0function\u00a0getMayor()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;mayor;\n    }\n\n    public\u00a0function\u00a0getMenor()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;menor;\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/032_Encapsulacion.html#recibiendo-y-enviando-objetos","title":"Recibiendo y enviando objetos","text":"<p>Es recomendable indicarlo en el tipo de par\u00e1metros. Si el objeto puede devolver nulos se pone <code>?</code> delante del nombre de la clase.</p> <p>Objetos por referencia</p> <p>Los objetos que se env\u00edan y reciben como par\u00e1metros siempre se pasan por referencia.</p> <pre><code>&lt;?php\nfunction\u00a0maymen(array\u00a0$numeros)\u00a0:\u00a0?MayorMenor\u00a0{\n    $a\u00a0=\u00a0max($numeros);\n    $b\u00a0=\u00a0min($numeros);\n\n    $result\u00a0=\u00a0new\u00a0MayorMenor();\n    $result-&gt;setMayor($a);\n    $result-&gt;setMenor($b);\n\n    return\u00a0$result;\n}\n\n$resultado\u00a0=\u00a0\u00a0maymen([1,76,9,388,41,39,25,97,22]);\necho\u00a0\"&lt;br&gt;Mayor:\u00a0\".$resultado-&gt;getMayor();\necho\u00a0\"&lt;br&gt;Menor:\u00a0\".$resultado-&gt;getMenor();\n</code></pre>"},{"location":"uutt/03_PHPPOO/032_Encapsulacion.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC301 (AEA). (RA3 / CE3d CE3g / IC1 / 3p) - Crea una clase Empleado con su nombre, apellidos y sueldo. Encapsula las propiedades mediante getters/setters y a\u00f1ade m\u00e9todos para:</p> <ul> <li>Obtener su nombre completo \u2192 <code>getNombreCompleto(): string</code></li> <li>Que devuelva un booleano indicando si debe o no pagar impuestos (se pagan cuando el sueldo es superior a 3333\u20ac) \u2192 <code>debePagarImpuestos(): bool</code></li> </ul> </li> <li> <p>AC302 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una propiedad privada que almacene un array de n\u00fameros de tel\u00e9fonos. A\u00f1ade los siguientes m\u00e9todos:</p> <ul> <li><code>public function anyadirTelefono(int $telefono) : void</code> \u2192 A\u00f1ade un tel\u00e9fono al array</li> <li><code>public function listarTelefonos(): string</code> \u2192 Muestra los tel\u00e9fonos separados por comas</li> <li><code>public function vaciarTelefonos(): void</code>\u2192 Elimina todos los tel\u00e9fonos</li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/033_Constructor.html","title":"El Constructor","text":"<p>El constructor de los objetos se define mediante el m\u00e9todo m\u00e1gico <code>__construct</code>. Puede o no tener par\u00e1metros, pero s\u00f3lo puede haber un \u00fanico constructor.</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0__construct(string $nom)\u00a0{\n        $this-&gt;nombre = $nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n    \u00a0\u00a0echo\u00a0$this-&gt;nombre;\n    \u00a0\u00a0echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$gines\u00a0=\u00a0new\u00a0Persona(\"Gin\u00e9s L\u00f3pez\");\n$gines-&gt;imprimir();\n</code></pre>"},{"location":"uutt/03_PHPPOO/033_Constructor.html#constructores-en-php-8","title":"Constructores en PHP 8","text":"<p>Una de las grandes novedades que ofrece PHP 8 es la simplificaci\u00f3n de los constructores con par\u00e1metros, lo que se conoce como promoci\u00f3n de las propiedades del constructor.</p> <p>Para ello, en vez de tener que declarar las propiedades como privadas o protegidas, y luego dentro del constructor tener que asignar los par\u00e1metros a est\u00e1s propiedades, el propio constructor promociona las propiedades.</p> <p>Ve\u00e1moslo mejor con un ejemplo. Imaginemos una clase <code>Punto</code> donde queramos almacenar sus coordenadas:</p> <pre><code>&lt;?php\nclass Punto {\n    protected float $x;\n    protected float $y;\n    protected float $z;\n\n    public function __construct(\n        float $x = 0.0,\n        float $y = 0.0,\n        float $z = 0.0\n    ) {\n        $this-&gt;x = $x;\n        $this-&gt;y = $y;\n        $this-&gt;z = $z;\n    }\n}\n</code></pre> <p>En PHP 8, quedar\u00eda del siguiente modo (mucho m\u00e1s corto, lo que facilita su legibilidad):</p> <pre><code>&lt;?php\nclass Punto {\n    public function __construct(\n        protected float $x = 0.0,\n        protected float $y = 0.0,\n        protected float $z = 0.0,\n    ) {}\n}\n</code></pre> <p>El orden importa</p> <p>A la hora de codificar el orden de los elementos debe ser:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nclass NombreClase {\n    // propiedades\n\n    // constructor\n\n    // getters - setters\n\n    // resto de m\u00e9todos\n}\n?&gt;\n</code></pre>"},{"location":"uutt/03_PHPPOO/033_Constructor.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC303 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC302 y modif\u00edcala. Elimina los setters de nombre y apellidos, de manera que dichos datos se asignan mediante el constructor (utiliza la sintaxis de PHP7). Si el constructor recibe un tercer par\u00e1metro, ser\u00e1 el sueldo del Empleado. Si no, se le asignar\u00e1 1000\u20ac como sueldo inicial.</p> </li> <li> <p>AC304 (AP). (RA2 / CE1a CE1b CE1c CE1f CE1g / IC1 / 3p) - Modifica la clase de la actividad anterior AC303 y utiliza la sintaxis de PHP 8 de promoci\u00f3n de las propiedades del constructor.</p> </li> </ul>"},{"location":"uutt/03_PHPPOO/034_ClasesEstaticas.html","title":"Clases Est\u00e1ticas","text":"<p>Clases est\u00e1ticas</p> <p>Son aquellas que tienen propiedades y/o m\u00e9todos est\u00e1ticos (tambi\u00e9n se conocen como de clase, por que su valor se comparte entre todas las instancias de la misma clase).</p> <p>Se declaran con <code>static</code> y se referencian con <code>::</code>.</p> <ul> <li>Si queremos acceder a un m\u00e9todo est\u00e1tico, se antepone el nombre de la clase: <code>Producto::nuevoProducto()</code>.</li> <li>Si desde un m\u00e9todo queremos acceder a una propiedad est\u00e1tica de la misma clase, se utiliza la referencia <code>self</code>: <code>self::$numProductos</code></li> </ul> <pre><code>&lt;?php\nclass Producto {\n    const IVA = 0.23;\n    private static $numProductos = 0; \n\n    public static function nuevoProducto() {\n        self::$numProductos++;\n    }\n}\n\nProducto::nuevoProducto();\n$impuesto = Producto::IVA;\n</code></pre> <p>Tambi\u00e9n podemos tener clases normales que tengan alguna propiedad est\u00e1tica:</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    const\u00a0IVA\u00a0=\u00a00.23;\n    private\u00a0static\u00a0$numProductos\u00a0=\u00a00;\u00a0\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0__construct(string\u00a0$cod)\u00a0{\n        self::$numProductos++;\n        $this-&gt;codigo\u00a0=\u00a0$cod;\n    }\n\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"El\u00a0producto\u00a0\".$this-&gt;codigo.\" es\u00a0el\u00a0n\u00famero\u00a0\".self::$numProductos;\n    }\n}\n\n$prod1\u00a0=\u00a0new\u00a0Producto(\"PS5\");\n$prod2\u00a0=\u00a0new\u00a0Producto(\"XBOX\u00a0Series\u00a0X\");\n$prod3\u00a0=\u00a0new\u00a0Producto(\"Nintendo\u00a0Switch\");\necho\u00a0$prod3-&gt;mostrarResumen();\n</code></pre>"},{"location":"uutt/03_PHPPOO/034_ClasesEstaticas.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC305 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Modifica la clase de la actividad anterior AC304. A\u00f1ade una constante <code>SUELDO_TOPE</code> con el valor del sueldo que debe pagar impuestos, y modifica el c\u00f3digo para utilizar la constante.</p> </li> <li> <p>AC306 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC305 y modif\u00edcala. Cambia la constante por una variable est\u00e1tica <code>sueldoTope</code>, de manera que mediante <code>getter/setter</code> puedas modificar su valor.</p> </li> <li> <p>AC307 (AP). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC306 y modif\u00edcala. Completa el siguiente m\u00e9todo con una cadena HTML que muestre los datos de un empleado dentro de un p\u00e1rrafo y todos los tel\u00e9fonos mediante una lista ordenada (para ello, deber\u00e1s crear un getter para los tel\u00e9fonos):</p> <ul> <li><code>public static function toHtml(Empleado $emp): string</code></li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/035_TrabajandoObjetos.html","title":"Trabajando con objetos","text":"<p>Al trabajar con clases y objetos, existen un conjunto de funciones ya definidas por el lenguaje que permiten obtener informaci\u00f3n sobre los objetos:</p> <ul> <li><code>instanceof</code>: permite comprobar si un objeto es de una determinada clase</li> <li><code>get_class</code>: devuelve el nombre de la clase</li> <li><code>get_declared_class</code>: devuelve un array con los nombres de las clases definidas</li> <li><code>class_alias</code>: crea un alias</li> <li><code>class_exists</code> / <code>method_exists</code> / <code>property_exists</code>: <code>true</code> si la clase / m\u00e9todo / propiedad est\u00e1 definida</li> <li><code>get_class_methods</code> / <code>get_class_vars</code> / <code>get_object_vars</code>: Devuelve un array con los nombres de los m\u00e9todos / propiedades de una clase / propiedades de un objeto que son accesibles desde d\u00f3nde se hace la llamada.</li> </ul> <p>Un ejemplo de estas funciones puede ser el siguiente:</p> <pre><code>&lt;?php\n$p\u00a0=\u00a0new\u00a0Producto(\"PS5\");\nif\u00a0($p\u00a0instanceof\u00a0Producto)\u00a0{\n    echo\u00a0\"Es\u00a0un\u00a0producto\";\n    echo\u00a0\"La\u00a0clase\u00a0es\u00a0\".get_class($p);\n\n    class_alias(\"Producto\",\u00a0\"Articulo\");\n    $c\u00a0=\u00a0new\u00a0Articulo(\"Nintendo\u00a0Switch\");\n    echo\u00a0\"Un\u00a0articulo\u00a0es\u00a0un\u00a0\".get_class($c);\n\n    print_r(get_class_methods(\"Producto\"));\n    print_r(get_class_vars(\"Producto\"));\n    print_r(get_object_vars($p));\n\n    if\u00a0(method_exists($p,\u00a0\"mostrarResumen\"))\u00a0{\n        $p-&gt;mostrarResumen();\n    }\n}\n</code></pre> <p>Clonado</p> <p>Al asignar dos objetos no se copian, se crea una nueva referencia. Si queremos una copia, hay que clonarlo mediante el m\u00e9todo <code>clone(object) : object</code></p> <p>Si queremos modificar el clonado por defecto, hay que definir el m\u00e9todo m\u00e1gico <code>__clone()</code> que se llamar\u00e1 despu\u00e9s de copiar todas las propiedades.</p> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.oop5.cloning.php</p>"},{"location":"uutt/03_PHPPOO/036_Herencia.html","title":"Herencia","text":"<p>PHP soporta herencia simple, de manera que una clase solo puede heredar de otra, no de dos clases a la vez. Para ello se utiliza la palabra clave <code>extends</code>. Si queremos que la clase A hereda de la clase B haremos:</p> <pre><code>class A extends B\n</code></pre> <p>El hijo hereda los atributos y m\u00e9todos p\u00fablicos y protegidos.</p> <p>Cada clase en un archivo</p> <p>Como ya hemos comentado, deber\u00edamos colocar cada clase en un archivo diferente para posteriormente utilizarlo mediante <code>include</code>. En los siguiente ejemplo los hemos colocado junto para facilitar su legibilidad.</p> <p>Por ejemplo, tenemos una clase <code>Producto</code> y una <code>Tv</code> que hereda de <code>Producto</code>:</p> <pre><code>&lt;?php\nclass Producto {\n    public $codigo;\n    public $nombre;\n    public $nombreCorto;\n    public $PVP;\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n}\n</code></pre> <p>Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases:</p> <ul> <li><code>get_parent_class(object): string</code></li> <li><code>is_subclass_of(object, string): bool</code></li> </ul> <pre><code>&lt;?php\n$t = new Tv();\n$t-&gt;codigo = 33;\nif ($t instanceof Producto) {\n    echo $t-&gt;mostrarResumen();\n}\n\n$padre = get_parent_class($t);\necho \"&lt;br&gt;La clase padre es: \" . $padre;\n$objetoPadre = new $padre;\necho $objetoPadre-&gt;mostrarResumen();\n\nif (is_subclass_of($t, 'Producto')) {\n    echo \"&lt;br&gt;Soy un hijo de Producto\";\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#sobreescribir-metodos","title":"Sobreescribir m\u00e9todos","text":"<p>Podemos crear m\u00e9todos en los hijos con el mismo nombre que el padre, cambiando su comportamiento. Para invocar a los m\u00e9todos del padre -&gt; <code>parent::nombreMetodo()</code></p> <pre><code>&lt;?php\nclass Tv extends Producto {\n   public $pulgadas;\n   public $tecnologia;\n\n   public function mostrarResumen() {\n      parent::mostrarResumen();\n      echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n   }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#constructor-en-hijos","title":"Constructor en hijos","text":"<p>En los hijos no se crea ning\u00fan constructor de manera autom\u00e1tica. Por lo que si no lo hay, se invoca autom\u00e1ticamente al del padre. En cambio, si lo definimos en el hijo, hemos de invocar al del padre de manera expl\u00edcita.</p> PHP7PHP8 <pre><code>&lt;?php\nclass Producto {\n    public string $codigo;\n\n    public\u00a0function\u00a0__construct(string $codigo) {\n        $this-&gt;codigo =\u00a0$codigo;\n    }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public\u00a0function\u00a0__construct(string\u00a0$codigo,\u00a0int\u00a0$pulgadas,\u00a0string\u00a0$tecnologia)\u00a0{\n        parent::__construct($codigo);\n        $this-&gt;pulgadas\u00a0=\u00a0$pulgadas;\n        $this-&gt;tecnologia\u00a0=\u00a0$tecnologia;\n    }\n\n    public function mostrarResumen() {\n        parent::mostrarResumen();\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre> <pre><code>&lt;?php\nclass Producto {\n    public\u00a0function\u00a0__construct(private string $codigo) { }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }        \n}\n\nclass Tv extends Producto {\n\n    public\u00a0function\u00a0__construct(\n        string\u00a0$codigo,\n        private int\u00a0$pulgadas,\n        private string\u00a0$tecnologia)\n    {\n        parent::__construct($codigo);\n    }\n\n    public function mostrarResumen() {\n        parent::mostrarResumen();\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#clases-abstractas","title":"Clases abstractas","text":"<p>Las clases abstractas obligan a heredar de una clase, ya que no se permite su instanciaci\u00f3n. Se define mediante <code>abstract class NombreClase {</code>. Una clase abstracta puede contener propiedades y m\u00e9todos no-abstractos, y/o m\u00e9todos abstractos.</p> <pre><code>&lt;?php\n//\u00a0Clase\u00a0abstracta\nabstract\u00a0class\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n    //\u00a0M\u00e9todo\u00a0abstracto\n    abstract\u00a0public\u00a0function\u00a0mostrarResumen();\n}\n</code></pre> <p>Cuando una clase hereda de una clase abstracta, obligatoriamente debe implementar los m\u00e9todos que tiene el padre marcados como abstractos.</p> <pre><code>&lt;?php\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public function mostrarResumen() { //obligado a implementarlo\n        echo \"&lt;p&gt;C\u00f3digo \".$this-&gt;getCodigo().\"&lt;/p&gt;\";\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n\n$t = new Tv();\necho $t-&gt;getCodigo();\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#clases-finales","title":"Clases finales","text":"<p>Son clases opuestas a abstractas, ya que evitan que se pueda heredar una clase o m\u00e9todo para sobreescribirlo.</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n\n    final\u00a0public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"Producto\u00a0\".$this-&gt;codigo;\n    }\n}\n\n// No podremos heredar de Microondas\nfinal\u00a0class\u00a0Microondas\u00a0extends\u00a0Producto\u00a0{\n    private\u00a0$potencia;\n\n    public\u00a0function\u00a0getPotencia()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;potencia;\n    }\n\n    // No podemos implementar mostrarResumen()\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/036_Herencia.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC308 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia la clase del ejercicio AC307 y modif\u00edcala. Crea una clase Persona que sea padre de Empleado, de manera que Persona contenga el nombre y los apellidos, y en Empleado quede el salario y los tel\u00e9fonos.</p> </li> <li> <p>AC309 (AEA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia las clases del ejercicio AC308 y modif\u00edcalas. Crea en Persona el m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code>, y modifica en Empleado el mismo m\u00e9todo <code>toHtml(Persona $p)</code>, pero cambia la firma para que reciba una Persona como par\u00e1metro. Para acceder a las propiedades del empleado con la persona que recibimos como par\u00e1metro, comprobaremos su tipo</p> <pre><code>&lt;?php\n    class Empleado extends Persona {\n        /// resto del c\u00f3digo\n\n        public static function toHtml(Persona $p): string {\n            if ($p instanceof Empleado) {\n                // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado\n            }\n        }\n    }\n</code></pre> </li> <li> <p>AC310 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia las clases del ejercicio AC310 y modif\u00edcalas. A\u00f1ade en Persona un atributo edad. A la hora de saber si un empleado debe pagar impuestos, lo har\u00e1 siempre y cuando tenga m\u00e1s de 21 a\u00f1os y dependa del valor de su sueldo. Modifica todo el c\u00f3digo necesario para mostrar y/o editar la edad cuando sea necesario.</p> </li> <li> <p>AC311 (AR). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - Copia las clases del ejercicio AC311 y modif\u00edcalas. A\u00f1ade nuevos m\u00e9todos que hagan una representaci\u00f3n de todas las propiedades de las clases Persona y Empleado, de forma similar a los realizados en HTML, pero sin que sean est\u00e1ticos, de manera que obtenga los datos mediante $this.</p> <ul> <li><code>function public __toString(): string</code></li> </ul> </li> <li> <p>PR301 (SA). (RA3 / CE3b CE3c CE3d CE3g / IC1 / 3p) - El CTO del proyecto necesita empezar con \u00e9l. Para ello has de dise\u00f1ar un programa que cuente con las siguientes clases: persona, producto, carrito y pedidoComercial. Una vez realizado esto deber\u00e1s generar las clases: </p> <ul> <li>empleadoTienda, comercial y cliente que heredan de persona</li> <li>pedido que hereda de carrito.</li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/037_Interfaces.html","title":"Interfaces","text":"<p>Permite definir un contrato con las firmas de los m\u00e9todos a cumplir. As\u00ed pues, s\u00f3lo contiene declaraciones de funciones y todas deben ser p\u00fablicas.</p> <p>Se declaran con la palabra clave <code>interface</code> y luego las clases que cumplan el contrato lo realizan mediante la palabra clave <code>implements</code>.</p> <pre><code>&lt;?php\ninterface Nombreable {\n// declaraci\u00f3n de funciones\n}\nclass NombreClase implements NombreInterfaz {\n// c\u00f3digo de la clase\n</code></pre> <p>Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herencia m\u00faltiple, pero s\u00f3lo de interfaces).</p> <pre><code>&lt;?php\ninterface\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string;\n}\n\ninterface\u00a0MostrableTodo\u00a0extends\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarTodo()\u00a0:\u00a0string;\n}\n\ninterface\u00a0Facturable\u00a0{\n    public\u00a0function\u00a0generarFactura()\u00a0:\u00a0string;\n}\n\nclass\u00a0Producto\u00a0implements\u00a0MostrableTodo,\u00a0Facturable\u00a0{\n    //\u00a0Implementaciones\u00a0de\u00a0los\u00a0m\u00e9todos\n    // Obligatoriamente deber\u00e1 implementar public\u00a0function\u00a0mostrarResumen, mostrarTodo y generarFactura\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/037_Interfaces.html#actividades","title":"Actividades","text":"<ul> <li>PR302 (SA). (RA3 RA4 / CE3b CE3c CE3d CE3g CE4f / IC1 / 3p) - Siguiendo con el proyecto de e-commerce, se necesita que implementes la interfaz <code>Facturable</code> para pedido y pedidoComercial.</li> </ul>"},{"location":"uutt/03_PHPPOO/038_Metodos.html","title":"Metodos encadenados y m\u00e1gicos","text":""},{"location":"uutt/03_PHPPOO/038_Metodos.html#metodos-encadenados","title":"M\u00e9todos encadenados","text":"<p>Sigue el planteamiento de la programaci\u00f3n funcional, y tambi\u00e9n se conoce como method chaining. Plantea que sobre un objeto se realizan varias llamadas.</p> <pre><code>&lt;?php\n$p1\u00a0=\u00a0new\u00a0Libro();\n$p1-&gt;setNombre(\"Harry\u00a0Potter\");\n$p1-&gt;setAutor(\"JK\u00a0Rowling\");\necho\u00a0$p1;\n\n// Method chaining\n$p2\u00a0=\u00a0new\u00a0Libro();\n$p2-&gt;setNombre(\"Patria\")-&gt;setAutor(\"Aramburu\");\necho\u00a0$p2;\n</code></pre> <p>Para facilitarlo, vamos a modificar todos sus m\u00e9todos mutadores (que modifican datos, setters, ...) para que devuelvan una referencia a <code>$this</code>:</p> <pre><code>&lt;?php\nclass\u00a0Libro\u00a0{\n    private\u00a0string\u00a0$nombre;\n    private\u00a0string\u00a0$autor;\n\n    public\u00a0function\u00a0getNombre()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre;\n    }\n    public\u00a0function\u00a0setNombre(string\u00a0$nombre)\u00a0:\u00a0Libro\u00a0{\u00a0\n        $this-&gt;nombre\u00a0=\u00a0$nombre;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0getAutor()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;autor;\n    }\n    public\u00a0function\u00a0setAutor(string\u00a0$autor)\u00a0:\u00a0Libro\u00a0{\n        $this-&gt;autor\u00a0=\u00a0$autor;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0__toString()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre.\"\u00a0de\u00a0\".$this-&gt;autor;\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/038_Metodos.html#metodos-magicos","title":"M\u00e9todos m\u00e1gicos","text":"<p>Todas las clases PHP ofrecen un conjunto de m\u00e9todos, tambi\u00e9n conocidos como magic methods que se pueden sobreescribir para sustituir su comportamiento. Algunos de ellos ya los hemos utilizado.</p> <p>Ante cualquier duda, es conveniente consultar la documentaci\u00f3n oficial.</p> <p>Los m\u00e1s destacables son:</p> <ul> <li><code>__construct()</code></li> <li><code>__destruct()</code> \u2192 se invoca al perder la referencia. Se utiliza para cerrar una conexi\u00f3n a la BD, cerrar un fichero, ...</li> <li><code>__toString()</code> \u2192 representaci\u00f3n del objeto como cadena. Es decir, cuando hacemos <code>echo $objeto</code> se ejecuta autom\u00e1ticamente este m\u00e9todo.</li> <li><code>__get(propiedad)</code>, <code>__set(propiedad, valor)</code> \u2192 Permitir\u00eda acceder a las propiedad privadas, aunque siempre es m\u00e1s legible/mantenible codificar los getter/setter.</li> <li><code>__isset(propiedad)</code>, <code>__unset(propiedad)</code> \u2192 Permite averiguar o quitar el valor a una propiedad.</li> <li><code>__sleep()</code>, <code>__wakeup()</code> \u2192 Se ejecutan al recuperar (unserialize^) o almacenar un objeto que se serializa (serialize), y se utilizan para permite definir qu\u00e9 propiedades se serializan.</li> <li><code>__call()</code>, <code>__callStatic()</code> \u2192 Se ejecutan al llamar a un m\u00e9todo que no es p\u00fablico. Permiten sobrecargan m\u00e9todos.</li> </ul>"},{"location":"uutt/03_PHPPOO/038_Metodos.html#actividades","title":"Actividades","text":"<ul> <li>PR303 (SA). (RA3 RA4 / CE3b CE3c CE3d CE3g CE4f / IC1 / 3p) - Tras analizar tu c\u00f3digo, el CTO te comenta que tienes que asegurarte que de implementar los m\u00e9todos m\u00e1gicos que consideres en las clases de la actividad PR301</li> </ul>"},{"location":"uutt/03_PHPPOO/039_Namespace.html","title":"Espacio de nombres (Namespace)","text":"<p>Desde PHP 5.3 y tambi\u00e9n conocidos como Namespaces, permiten organizar las clases/interfaces, funciones y/o constantes de forma similar a los paquetes en Java.</p> <p>Recomendaci\u00f3n</p> <p>Un s\u00f3lo namespace por archivo y crear una estructura de carpetas respectando los niveles/subniveles (igual que se hace en Java)</p> <p>Se declaran en la primera l\u00ednea mediante la palabra clave <code>namespace</code> seguida del nombre del espacio de nombres asignado (cada subnivel se separa con la barra invertida <code>\\</code>):</p> <p>Por ejemplo, para colocar la clase <code>Producto</code> dentro del namespace <code>Dwes\\Ejemplos</code> lo har\u00edamos as\u00ed:</p> <pre><code>&lt;?php\nnamespace\u00a0Dwes\\Ejemplos;\n\nconst\u00a0IVA\u00a0=\u00a00.21;\n\nclass\u00a0Producto\u00a0{\n    public\u00a0$nombre;\n    \u00a0\u00a0\n    public\u00a0function\u00a0muestra()\u00a0:\u00a0void\u00a0{\n        echo\"&lt;p&gt;Prod:\"\u00a0.\u00a0$this-&gt;nombre\u00a0.\u00a0\"&lt;/p&gt;\";\n    }\n}\n</code></pre>"},{"location":"uutt/03_PHPPOO/039_Namespace.html#acceso","title":"Acceso","text":"<p>Para referenciar a un recurso que contiene un namespace, primero hemos de tenerlo disponible haciendo uso de <code>include</code> o <code>require</code>. Si el recurso est\u00e1 en el mismo namespace, se realiza un acceso directo (se conoce como acceso sin cualificar).</p> <p>Realmente hay tres tipos de acceso:</p> <ul> <li>sin cualificar: <code>recurso</code></li> <li>cualificado: <code>rutaRelativa\\recurso</code> \u2192 no hace falta poner el namespace completo</li> <li>totalmente cualificado: <code>\\rutaAbsoluta\\recurso</code></li> </ul> <pre><code>&lt;?php\nnamespace\u00a0Dwes\\Ejemplos;\n\ninclude_once(\"Producto.php\");\n\necho\u00a0IVA;\u00a0//\u00a0sin\u00a0cualificar\necho\u00a0Utilidades\\IVA;\u00a0// acceso cualificado. Dar\u00eda error, no existe \\Dwes\\Ejemplos\\Utilidades\\IVA\necho\u00a0\\Dwes\\Ejemplos\\IVA;\u00a0//\u00a0totalmente\u00a0cualificado\n\n$p1\u00a0=\u00a0new\u00a0Producto();\u00a0//\u00a0lo busca en el mismo namespace y encuentra \\Dwes\\Ejemplos\\Producto\n$p2\u00a0=\u00a0new\u00a0Model\\Producto(); // dar\u00eda error, no existe el namespace Model. Est\u00e1 buscando \\Dwes\\Ejemplos\\Model\\Producto\n$p3\u00a0=\u00a0new\u00a0\\Dwes\\Ejemplos\\Producto(); //\u00a0\\Dwes\\Ejemplos\\Producto\n</code></pre> <p>Para evitar la referencia cualificada podemos declarar el uso mediante <code>use</code> (similar a hacer <code>import</code> en Java). Se hace en la cabecera, tras el <code>namespace</code>:</p> <p>Los tipos posibles son:</p> <ul> <li><code>use const nombreCualificadoConstante</code></li> <li><code>use function nombreCualificadoFuncion</code></li> <li><code>use nombreCualificadoClase</code></li> <li><code>use nombreCualificadoClase as NuevoNombre</code> // para renombrar elementos</li> </ul> <p>Por ejemplo, si queremos utilizar la clase <code>\\Dwes\\Ejemplos\\Producto</code> desde un recurso que se encuentra en la ra\u00edz, por ejemplo en <code>inicio.php</code>, har\u00edamos:</p> <pre><code>&lt;?php\ninclude_once(\"Dwes\\Ejemplo\\Producto.php\");\n\nuse\u00a0const\u00a0Dwes\\Ejemplos\\IVA;\nuse\u00a0\\Dwes\\Ejemplos\\Producto;\n\necho\u00a0IVA;\n$p1\u00a0=\u00a0new\u00a0Producto();\n</code></pre> <p>To <code>use</code> or not to <code>use</code></p> <p>En resumen, <code>use</code> permite acceder sin cualificar a recursos que est\u00e1n en otro namespace. Si estamos en el mismo espacio de nombre, no necesitamos <code>use</code>.</p>"},{"location":"uutt/03_PHPPOO/039_Namespace.html#organizacion","title":"Organizaci\u00f3n","text":"<p>Todo proyecto, conforme crece, necesita organizar su c\u00f3digo fuente. Se plantea una organizaci\u00f3n en la que los archivos que interactuan con el navegador se colocan en el ra\u00edz, y las clases que definamos van dentro de un namespace (y dentro de su propia carpeta <code>src</code> o <code>app</code>).</p> <p>Organizaci\u00f3n, includes y usos</p> <ul> <li>Colocaremos cada recurso en un fichero aparte.</li> <li>En la primera l\u00ednea indicaremos su namespace (si no est\u00e1 en el ra\u00edz).</li> <li>Si utilizamos otros recursos, haremos un <code>include_once</code> de esos recursos (clases, interfaces, etc...).<ul> <li>Cada recurso debe incluir todos los otros recursos que referencie: la clase de la que hereda, interfaces que implementa, clases utilizadas/recibidas como par\u00e1metros, etc...</li> </ul> </li> <li>Si los recursos est\u00e1n en un espacio de nombres diferente al que estamos, emplearemos <code>use</code> con la ruta completa para luego utilizar referencias sin cualificar.</li> </ul>"},{"location":"uutt/03_PHPPOO/039_Namespace.html#autoload","title":"Autoload","text":"<p>\u00bfNo es tedioso tener que hacer el <code>include</code> de las clases? El autoload viene al rescate.</p> <p>As\u00ed pues, permite cargar las clases (no las constantes ni las funciones) que se van a utilizar y evitar tener que hacer el <code>include_once</code> de cada una de ellas. Para ello, se utiliza la funci\u00f3n <code>spl_autoload_register</code></p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>\u00bfPor qu\u00e9 se llaman autoload?</p> <p>Porque antes se realizaba mediante el m\u00e9todo m\u00e1gico <code>__autoload()</code>, el cual est\u00e1 deprecated desde PHP 7.2</p> <p>Y \u00bfc\u00f3mo organizamos ahora nuestro c\u00f3digo aprovechando el autoload?</p> <p>Para facilitar la b\u00fasqueda de los recursos a incluir, es recomendable colocar todas las clases dentro de una misma carpeta. Nosotros la vamos a colocar dentro de <code>app</code> (m\u00e1s adelante, cuando estudiemos Laravel veremos el motivo de esta decisi\u00f3n). Otras carpetas que podemos crear son <code>test</code> para colocar las pruebas PhpUnit que luego realizaremos, o la carpeta <code>vendor</code> donde se almacenar\u00e1n las librer\u00edas del proyecto (esta carpeta es un est\u00e1ndard dentro de PHP, ya que Composer la crea autom\u00e1ticamente).</p> <p>Como hemos colocado todos nuestros recursos dentro de <code>app</code>, ahora nuestro <code>autoload.php</code> (el cual colocamos en la carpeta ra\u00edz) s\u00f3lo va a buscar dentro de esa carpeta:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0\"app/\".$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>Autoload y rutas err\u00f3neas</p> <p>En Ubuntu al hacer el include de la clase que recibe como par\u00e1metro, las barras de los namespace (<code>\\</code>) son diferentes a las de las rutas (<code>/</code>). Por ello, es mejor que utilicemos el fichero autoload:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    $ruta = \"app\\\\\".$nombreClase.'.php';\n    $ruta = str_replace(\"\\\\\", \"/\", $ruta); // Sustituimos las barras\n    include_once\u00a0$ruta';\n}\u00a0);\n?&gt;\n</code></pre>"},{"location":"uutt/03_PHPPOO/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/03_PHPPOO/ProgramacionAula.html#resultados-de-aprendizaje","title":"Resultados de aprendizaje","text":"<ul> <li> <p> RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>b. Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>c. Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>d. Se han creado y utilizado funciones.</li> <li>e. Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>f. Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> <li>g. Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ul> </li> <li> <p> RA4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>f. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </li> </ul>"},{"location":"uutt/03_PHPPOO/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 03 01 07/10/2024 <p>Objetos</p> <ul> <li>Clases</li> <li>Encapsulaci\u00f3n</li> </ul> <ul> <li>AC301. Creaci\u00f3n clase empleado</li> <li>AC302. Modificando clase empleado</li> </ul> 02 08/10/2024 <p>Constructores</p> <ul> <li>__construct</li> <li>Constructores en PHP8</li> </ul> <ul> <li>AC303. Refactorizando AC302</li> <li>AC304. Refactorizando AC303 en PHP8</li> </ul> 03 10/10/2024 <p>Clases</p> <ul> <li>Clases est\u00e1ticas</li> </ul> <ul> <li>AC305. Modificar AC304 a\u00f1adiendo constante</li> <li>AC306. Modificar AC305 para uso de setters/getters</li> <li>AC307. Modificar AC306 para a\u00f1adir m\u00e9todo con formato HTML</li> </ul> 04 14/10/2024 <p>POO en PHP</p> <ul> <li>Trabajando con objetos</li> <li>Herencia</li> </ul> <ul> <li>AC308. Herencia entre persona y empleado</li> <li>AC309. A\u00f1adiendo m\u00e9todos a empleado</li> </ul> 05 15/10/2024 <p>Herencia</p> <ul> <li>Clases abstractas</li> <li>Clases finales</li> </ul> <ul> <li>AC310. A\u00f1adiendo atributos a persona y si empleado debe pagar o no impuestos</li> <li>AC311. A\u00f1adiendo m\u00e9todos a persona y a empleados</li> <li>PR301. SA definici\u00f3n de clases bases</li> </ul> 06 16/10/2024 <p>Interfaces y m\u00e9todos encadenados y m\u00e1gicos</p> <ul> <li>Interfaces</li> <li>M\u00e9todos encadenados y m\u00e1gicos</li> </ul> <ul> <li>PR302. SA implementar interfaz de facturaci\u00f3n.</li> <li>PR303. Adapatar la SA a m\u00e9todos m\u00e1gicos</li> </ul> 07 17/10/2024 <p>Coonceptos avanzados</p> <ul> <li>Namespace</li> <li>Errores</li> <li>Excepciones</li> <li>SPL</li> </ul> <ul> <li>PR304. Implementar la gesti\u00f3n de errores y excepciones en la SA.</li> </ul> 08 21/10/2024 <p>Prueba de conocimiento</p> <ul> <li>Test</li> </ul> <p>Prueba de conocimiento</p> <ul> <li>Pr\u00e1ctico</li> </ul>"},{"location":"uutt/03_PHPPOO/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 03. Programaci\u00f3n Orientada a Objetos en PHP.</p> <p>Horas</p> <p>8 Sesiones - 16H</p> <p>Resultados de Aprendizaje</p> <p>RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. RA4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>Preconocimiento</p> <p>Conocimientos del m\u00f3dulo de Programaci\u00f3n de 1\u00ba y conceptos b\u00e1sicos de PHP.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Desarrollar programas orientados a objetos.</li> <li>OD2: Implementar herencia en programas.</li> <li>OD3: Gestionar errores y excepciones.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones.</li> <li>h. Desarrollar componentes multimedia para su integraci\u00f3n en aplicaciones web, empleando herramientas espec\u00edficas y siguiendo las especificaciones establecidas.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Diferencias entre clase y objeto</li> <li>CES2. Aplicar la encapsulaci\u00f3n</li> <li>CES3. Dise\u00f1ar programas con herencia</li> <li>CES4. Implementar interfaces</li> <li>CES5. Gestionar errores y excepciones</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC301. Creaci\u00f3n clase empleado.</p> <p>CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC302. Modificando clase empleado.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC305. Modificar AC304 a\u00f1adiendo constante.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC308. Herencia entre persona y empleado.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC309. A\u00f1adiendo m\u00e9todos a empleado.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC303. Refactorizando AC302.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC306. Modificar AC305 para uso de <code>setters/getters</code>.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC310. A\u00f1adiendo atributos a persona y si empleado debe pagar o no impuestos.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC311. A\u00f1adiendo m\u00e9todos a persona y a empleados.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC304. Refactorizando AC303 en PHP8.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>AC307. Modificar AC306 para a\u00f1adir m\u00e9todo con formato HTML.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>PR301. SA definici\u00f3n de clases bases.</p> <p>CE3b, CE3c, CE3d, CE3g</p> <p>IE1</p> <p>IC1</p> <p>PR302. SA implementar interfaz de facturaci\u00f3n.</p> <p>CE3b, CE3c, CE3d, CE3g, CE4f</p> <p>IE1</p> <p>IC1</p> <p>PR303. Adaptar la SA a m\u00e9todos m\u00e1gicos.</p> <p>CE3b, CE3c, CE3d, CE3g, CE4f</p> <p>IE1</p> <p>IC1</p> <p>PR304. Implementar la gesti\u00f3n de errores y excepciones en la SA.</p> <p>CE3b, CE3c, CE3d, CE3g, CE4f</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE3b, CE3c, CE3d, CE3g, CE4f</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/04_ProgramacionWeb/041_VariablesServidor.html","title":"Variables de servidor","text":"<p>PHP almacena la informaci\u00f3n del servidor y de las peticiones HTTP en seis arrays globales:</p> <ul> <li><code>$_ENV</code>: informaci\u00f3n sobre las variables de entorno</li> <li><code>$_GET</code>: par\u00e1metros enviados en la petici\u00f3n GET</li> <li><code>$_POST</code>: par\u00e1metros enviados en el envio POST</li> <li><code>$_COOKIE</code>: contiene las cookies de la petici\u00f3n, las claves del array son los nombres de las cookies</li> <li><code>$_SERVER</code>: informaci\u00f3n sobre el servidor</li> <li><code>$_FILES</code>: informaci\u00f3n sobre los ficheros cargados via upload</li> </ul> <p>Si nos centramos en el array <code>$_SERVER</code> podemos consultar las siguientes propiedades:</p> <ul> <li><code>PHP_SELF</code>: nombre del script ejecutado, relativo al document root (p.ej: <code>/tienda/carrito.php</code>)</li> <li><code>SERVER_SOFTWARE</code>: (p.ej: Apache)</li> <li><code>SERVER_NAME</code>: dominio, alias DNS (p.ej: <code>www.elche.es</code>)</li> <li><code>REQUEST_METHOD</code>: GET</li> <li><code>REQUEST_URI</code>: URI, sin el dominio</li> <li><code>QUERY_STRING</code>: todo lo que va despu\u00e9s de <code>?</code> en la URL (p.ej: <code>heroe=Batman&amp;nombre=Bruce</code>)</li> </ul> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/reserved.variables.server.php</p> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"PHP_SELF\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php\necho\u00a0$_SERVER[\"SERVER_SOFTWARE\"].\"&lt;br&gt;\";\u00a0//\u00a0Apache/2.4.46\u00a0(Win64)\u00a0OpenSSL/1.1.1g\u00a0PHP/7.4.9\necho\u00a0$_SERVER[\"SERVER_NAME\"].\"&lt;br&gt;\";\u00a0//\u00a0localhost\n\necho\u00a0$_SERVER[\"REQUEST_METHOD\"].\"&lt;br&gt;\";\u00a0//\u00a0GET\necho\u00a0$_SERVER[\"REQUEST_URI\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php?heroe=Batman\necho\u00a0$_SERVER[\"QUERY_STRING\"].\"&lt;br&gt;\";\u00a0//\u00a0heroe=Batman\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/041_VariablesServidor.html#propiedades-relacionadas","title":"Propiedades relacionadas","text":"<p>Otras propiedades relacionadas:</p> <ul> <li><code>PATH_INFO</code>: ruta extra tras la petici\u00f3n. Si la URL es <code>http://www.php.com/php/pathInfo.php/algo/cosa?foo=bar</code>, entonces <code>$_SERVER['PATH_INFO']</code> ser\u00e1 <code>/algo/cosa</code>.</li> <li><code>REMOTE_HOST</code>: hostname que hizo la petici\u00f3n</li> <li><code>REMOTE_ADDR</code>: IP del cliente</li> <li><code>AUTH_TYPE</code>: tipo de autenticaci\u00f3n (p.ej: Basic)</li> <li><code>REMOTE_USER</code>: nombre del usuario autenticado</li> </ul> <p>Apache crea una clave para cada cabecera HTTP, en may\u00fasculas y sustituyendo los guiones por subrayados:</p> <ul> <li><code>HTTP_USER_AGENT</code>: agente (navegador)</li> <li><code>HTTP_REFERER</code>: p\u00e1gina desde la que se hizo la petici\u00f3n</li> </ul> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"HTTP_USER_AGENT\"].\"&lt;br&gt;\";\u00a0//\u00a0Mozilla/5.0\u00a0(Windows\u00a0NT\u00a010.0;\u00a0Win64;\u00a0x64)\u00a0AppleWebKit/537.36\u00a0(KHTML,\u00a0like\u00a0Gecko)\u00a0Chrome/87.0.4280.88\u00a0Safari/537.36\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/041_VariablesServidor.html#actividades","title":"Actividades","text":"<ul> <li>AC401 (AEA). (RA4 / CE4a CE4b / IC1 / 3p) -  Se necesita mostrar los valores de <code>$_SERVER</code> al ejecutar un script en tu ordenador. Prueba a pasarle par\u00e1metros por <code>GET</code> (y a no pasarle ninguno). Crea una p\u00e1gina que tenga un enlace al script y comprueba el valor de <code>HTTP_REFERER</code>.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html","title":"Formularios","text":"<p>A la hora de enviar un formulario, debemos tener claro cuando usar GET o POST</p> <ul> <li> <p>GET: los par\u00e1metros se pasan en la URL</p> <ul> <li>&lt;2048 caracteres, s\u00f3lo ASCII</li> <li>Permite almacenar la direcci\u00f3n completa (marcador  / historial)</li> <li>Idempotente: dos llamadas con los mismos datos siempre debe dar el mismo resultado</li> <li>El navegador puede cachear las llamadas</li> </ul> </li> <li> <p>POST: par\u00e1metros ocultos (no encriptados)</p> <ul> <li>Sin l\u00edmite de datos, permite datos binarios.</li> <li>No se pueden cachear</li> <li>No idempotente \u2192 actualizar la BBDD</li> </ul> </li> </ul> <p>As\u00ed pues, para recoger los datos accederemos al array dependiendo del m\u00e9todo del formulario que nos ha invocado:</p> <pre><code>&lt;?php\n$par = $_GET[\"parametro\"]\n$par = $_POST[\"parametro\"]\n</code></pre> <p>Para los siguientes apartados nos vamos a basar en el siguiente ejemplo:</p> <pre><code>&lt;form action=\"formulario.php\" method=\"GET\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"\" /&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\" /&gt;\n        &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\" /&gt;\n        &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#validacion","title":"Validaci\u00f3n","text":"<p>Respecto a la validaci\u00f3n, es conveniente siempre hacer validaci\u00f3n doble:</p> <ul> <li>En el cliente mediante JS</li> <li>En servidor, antes de llamar a negocio, es conveniente volver a validar los datos.</li> </ul> <pre><code>&lt;?php\nif\u00a0(isset($_GET[\"parametro\"]))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$par\u00a0=\u00a0$_GET[\"parametro\"];\n\u00a0\u00a0\u00a0\u00a0//\u00a0comprobar\u00a0si\u00a0$par\u00a0tiene\u00a0el\u00a0formato\u00a0adecuado,\u00a0su\u00a0valor,\u00a0etc...\n}\n</code></pre> <p>Librer\u00edas de validaci\u00f3n</p> <p>Existen diversas librer\u00edas que facilitan la validaci\u00f3n de los formularios, como son respect/validation o particle/validator. Cuando estudiemos Laravel profundizaremos en la validaci\u00f3n de forma declarativa.</p>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#parametro-multivalor","title":"Par\u00e1metro multivalor","text":"<p>Existen elementos HTML que env\u00edan varios valores:</p> <ul> <li><code>select multiple</code></li> <li><code>checkbox</code></li> </ul> <p>Para recoger los datos, el nombre del elemento debe ser un array.</p> <pre><code>&lt;select name=\"lenguajes[]\" multiple=\"true\"&gt;\n    &lt;option value=\"c\"&gt;C&lt;/option&gt;\n    &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n    &lt;option value=\"php\"&gt;PHP&lt;/option&gt;\n    &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"c\" /&gt; C&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"java\" /&gt; Java&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"php\" /&gt; Php&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"python\" /&gt; Python&lt;br /&gt;\n</code></pre> <p>De manera que luego al recoger los datos:</p> <pre><code>&lt;?php\n$lenguajes = $_GET[\"lenguajes\"];\n\nforeach ($lenguajes as $lenguaje) {\n    echo \"$lenguaje &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#volviendo-a-rellenar-un-formulario","title":"Volviendo a rellenar un formulario","text":"<p>Un sticky form es un formulario que recuerda sus valores. Para ello, hemos de rellenar los atributos <code>value</code> de los elementos HTML con la informaci\u00f3n que conten\u00edan:</p> <pre><code>&lt;?php\nif (!empty($_POST['modulos']) &amp;&amp; !empty($_POST['nombre'])) {\n  // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos\n} else {\n  // Generamos el formulario\n  $nombre = $_POST['nombre'] ?? \"\";\n  $modulos = $_POST['modulos'] ?? [];\n  ?&gt;\n  &lt;form action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\" method=\"POST\"&gt;\n   &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"&lt;?= $nombre ?&gt;\" /&gt; \n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\"\n    &lt;?php if(in_array(\"DWES\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\"\n    &lt;?php if(in_array(\"DWEC\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\"/&gt;\n  &lt;/form&gt;\n&lt;?php } ?&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#subiendo-archivos","title":"Subiendo archivos","text":"<p>Se almacenan en el servidor en el array <code>$_FILES</code> con el nombre del campo del tipo <code>file</code> del formulario.</p> <pre><code>&lt;form enctype=\"multipart/form-data\" action=\"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;\"  method=\"POST\"&gt;\n    Archivo: &lt;input name=\"archivoEnviado\" type=\"file\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" name=\"btnSubir\" value=\"Subir\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Configuraci\u00f3n en <code>php.ini</code></p> <ul> <li><code>file_uploads</code>: on / off</li> <li><code>upload_max_filesize</code>: 2M</li> <li><code>upload_tmp_dir</code>: directorio temporal. No es necesario configurarlo, coger\u00e1 el predeterminado del sistema</li> <li><code>post_max_size</code>: tama\u00f1o m\u00e1ximo de los datos POST. Debe ser mayor a upload_max_filesize.</li> <li><code>max_file_uploads</code>: n\u00famero m\u00e1ximo de archivos que se pueden cargar a la vez.</li> <li><code>max_input_time</code>: tiempo m\u00e1ximo empleado en la carga (GET/POST y upload \u2192 normalmente se configura en 60)</li> <li><code>memory_limit</code>: 128M</li> <li><code>max_execution_time</code>: tiempo de ejecuci\u00f3n de un script (no tiene en cuenta el upload)</li> </ul> <p>Para cargar los archivos, accedemos al array <code>$_FILES</code>:</p> <pre><code>&lt;?php\nif (isset($_POST['btnSubir']) &amp;&amp; $_POST['btnSubir'] == 'Subir') {\n    if (is_uploaded_file($_FILES['archivoEnviado']['tmp_name'])) {\n        // subido con \u00e9xito\n        $nombre = $_FILES['archivoEnviado']['name'];\n        move_uploaded_file($_FILES['archivoEnviado']['tmp_name'], \"./uploads/{$nombre}\");\n\n        echo \"&lt;p&gt;Archivo $nombre subido con \u00e9xito&lt;/p&gt;\";\n    }\n}\n</code></pre> <p>Cada archivo cargado en <code>$_FILES</code> tiene:</p> <ul> <li><code>name</code>: nombre</li> <li><code>tmp_name</code>: ruta temporal</li> <li><code>size</code>: tama\u00f1o en bytes</li> <li><code>type</code>: tipo MIME</li> <li><code>error</code>: si hay error, contiene un mensaje. Si ok \u2192 0.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/042_Formularios.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC402 (AEA). (RA4 / CE4a CE4b / IC1 / 3p) -  Utilizando el paso por par\u00e1metros GET, crea un formulario que solicite:</p> <ul> <li>Nombre y apellidos.</li> <li>Email.</li> <li>URL p\u00e1gina personal.</li> <li>Sexo (radio).</li> <li>N\u00famero de convivientes en el domicilio.</li> <li>Aficiones (checkboxes) \u2013 poner m\u00ednimo 4 valores.</li> <li>Men\u00fa favorito (lista selecci\u00f3n m\u00faltiple) \u2013 poner m\u00ednimo 4 valores.</li> </ul> </li> </ul> <p>Muestra los valores cargados en una tabla-resumen.</p> <ul> <li> <p>AC403 (AEA). (RA4 / CE4a CE4b / IC1 / 3p) -  Utilizando el paso por par\u00e1metros POST, crea un formulario que solicite:</p> <ul> <li>Nombre y apellidos.</li> <li>Email.</li> <li>URL p\u00e1gina personal.</li> <li>Sexo (radio).</li> <li>N\u00famero de convivientes en el domicilio.</li> <li>Aficiones (checkboxes) \u2013 poner m\u00ednimo 4 valores.</li> <li>Men\u00fa favorito (lista selecci\u00f3n m\u00faltiple) \u2013 poner m\u00ednimo 4 valores.</li> </ul> </li> </ul> <p>Muestra los valores cargados en una tabla-resumen.</p> <ul> <li> <p>AC404 (AR). (RA4 / CE4a CE4b / IC1 / 3p) -  Una vez que has aprendido a manejar formularios, un compa\u00f1ero te solicita que, a partir del formulario anterior, introduzcas validaciones en HTML mediante el atributo required de los campos (uso los tipos adecuados para cada campo), y en compruebes los tipos de los datos y que cumplen los valores esperados (por ejemplo, en los checkboxes que los valores recogidos forman parte de todos los posibles). Puedes probar a pasarle datos err\u00f3neos via URL y comprobar su comportamiento.</p> <p>Ayuda</p> <p>Investiga el uso de la funci\u00f3n <code>filter_var</code>.</p> </li> <li> <p>AC405 (AP). (RA4 / CE4a CE4b / IC1 / 3p) - Tu CTO te solicita crear un formulario que permita subir un archivo al servidor para una futura implementaci\u00f3n del proyecto. Adem\u00e1s del fichero, debes pedir en el mismo formulario dos campos num\u00e9ricos que soliciten la anchura y la altura. Comprueba que tanto el fichero como los datos llegan correctamente.</p> </li> <li> <p>AC406 (AP). (RA4 / CE4a CE4b / IC1 / 3p) - Ahora, se te solicita una modificaci\u00f3n sobre el ejercicio anterior para que \u00fanicamente permita subir im\u00e1genes. Si el usuario selecciona otro tipo de archivos, se le debe informar del error y permitir que suba un nuevo archivo. En el caso de subir el tipo correcto, visualizar la imagen con el tama\u00f1o de anchura y altura recibido como par\u00e1metro.</p> <p>Ayuda</p> <p>Comprueba la propiedad <code>type</code> del archivo subido.</p> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/043_CabecerasRespuesta.html","title":"Cabeceras de respuesta","text":"<p>Debe ser lo primero a devolver. Se devuelven mediante la funci\u00f3n <code>header(cadena)</code>. Mediante las cabeceras podemos configurar el tipo de contenido, tiempo de expiraci\u00f3n, redireccionar el navegador, especificar errores HTTP, etc.</p> <pre><code>&lt;?php header(\"Content-Type: text/plain\"); ?&gt;\n&lt;?php header(\"Location: http://www.ejemplo.com/inicio.html\");\nexit(); \n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/043_CabecerasRespuesta.html#configuracion-y-depuracion","title":"Configuraci\u00f3n y depuraci\u00f3n","text":"<p>Se puede comprobar en las herramientas del desarrollador de los navegadores web mediante Developer Tools --&gt; Network --&gt; Headers.</p> Cabecera Aules <p>Es muy com\u00fan configurar las cabeceras para evitar consultas a la cach\u00e9 o provocar su renovaci\u00f3n:</p> <pre><code>&lt;?php\nheader(\"Expires: Sun, 31 Jan 2021 23:59:59 GMT\");\n// tres horas\n$now = time();\n$horas3 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 60 * 60 * 3);\nheader(\"Expires: {$horas3}\");\n// un a\u00f1o\n$now = time();\n$anyo1 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 365 * 86440);\nheader(\"Expires: {$anyo1}\");\n// se marca como expirado (fecha en el pasado)\n$pasado = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\");\nheader(\"Expires: {$pasado}\");\n// evitamos cache de navegador y/o proxy\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/043_CabecerasRespuesta.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC407 (AEA). (RA4 / CE4a CE4b CE4f / IC1 / 3p) - Desde la secretaria del centro se te solicita que desarrolles un script que redirija al usuario a diferentes p\u00e1ginas dependiendo de la hora del d\u00eda. En una deber\u00e1s poner el horario de ma\u00f1anas y en otra el de tardes.</p> </li> <li> <p>AC408 (AP). (RA4 / CE4a CE4b CE4f / IC1 / 3p) - Desde la secretar\u00eda del centro necesitan saber cuando se ha modificado cierto fichero. Para ello debes implementar un script PHP que utilice la cabecera <code>Last-Modified</code> para gestionar la cach\u00e9 de manera efectiva y responder de forma condicional a las solicitudes del cliente.</p> <p>Ayuda</p> <p>Hazte uso de un fichero que puedas modificar f\u00e1cilmente como un fichero de texto.</p> </li> <li> <p>PR401 (SA). (RA4 / CE4a CE4b CE4f / IC1 / 3p) - Necesitamos recoger los datos de los trabajadores, para ello se te pide crear un formulario web que permita al usuario introducir varios  datos de contacto como nombre, email y tel\u00e9fono. Una vez que el formulario se env\u00ede, estos datos se recoger\u00e1n en PHP, se convertir\u00e1n en un formato CSV y se presentar\u00e1 un enlace o bot\u00f3n para descargar el archivo CSV generado.     !!! tip \"Ayuda\"         En el caso de servir un archivo CSV para descarga, es importante establecer el <code>Content-Type</code>. Adem\u00e1s, para forzar la descarga del archivo en lugar de que se muestre en el navegador, se utiliza la cabecera <code>Content-Disposition</code> con la directiva <code>attachment</code>.</p> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html","title":"Gesti\u00f3n del estado","text":"<p>HTTP es un protocolo stateless, sin estado. Por ello, se simula el estado mediante el uso de cookies, tokens o la sesi\u00f3n. El estado es necesario para procesos tales como el carrito de la compra, operaciones asociadas a un usuario, etc... El mecanismo de PHP para gestionar la sesi\u00f3n emplea cookies de forma interna. Las cookies se almacenan en el navegador, y la sesi\u00f3n en el servidor web.</p>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html#cookies","title":"Cookies","text":"<p>Las cookies se almacenan en el array global <code>$_COOKIE</code>. Lo que coloquemos dentro del array, se guardar\u00e1 en el cliente. Hay que tener presente que el cliente puede no querer almacenarlas. </p> <p>Existe una limitaci\u00f3 de 20 cookies por dominio y 300 en total en el navegador.</p> <p>En PHP, para crear una cookie se utiliza la funci\u00f3n <code>setcookie</code>:</p> <pre><code>&lt;?php\nsetcookie(nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]);\nsetcookie(nombre [, valor = \"\" [, opciones = [] ]] )\n?&gt;\n</code></pre> <p>Destacar que el nombre no puede contener espacios ni el caracter <code>;</code>. Respecto al contenido de la cookie, no puede superar los 4 KB.</p> <p>Por ejemplo, mediante cookies podemos comprobar la cantidad de visitas diferentes que realiza un usuario:</p> <pre><code>&lt;?php\n$accesosPagina\u00a0=\u00a00;\nif\u00a0(isset($_COOKIE['accesos']))\u00a0{\u00a0\n    $accesosPagina\u00a0=\u00a0$_COOKIE['accesos']; // recuperamos una cookie\n    setcookie('accesos',\u00a0++$accesosPagina); // le asignamos un valor\n}\n?&gt;\n</code></pre> <p>Inspeccionando las cookies</p> <p>Si queremos ver que contienen las cookies que tenemos almacenadas en el navegador, se puede comprobar su valor en Dev Tools --&gt; Application --&gt; Storage</p> <p>El tiempo de vida de las cookies puede ser tan largo como el sitio web en el que residen. Ellas seguir\u00e1n ah\u00ed, incluso si el navegador est\u00e1 cerrado o abierto.</p> <p>Para borrar una cookie se puede poner que expiren en el pasado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0\"\",\u00a01) // pasado\n</code></pre> <p>O que caduquen dentro de un periodo de tiempo deteminado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0valor,\u00a0time() + 3600) // Caducan dentro de una hora\n</code></pre> <p> </p> Comunicaci\u00f3n con cookies <p>Se utilizan para:</p> <ul> <li>Recordar los inicios de sesi\u00f3n</li> <li>Almacenar valores temporales de usuario</li> <li>Si un usuario est\u00e1 navegando por una lista paginada de art\u00edculos, ordenados de cierta manera, podemos almacenar el ajuste de la clasificaci\u00f3n.</li> </ul> <p>La alternativa en el cliente para almacenar informaci\u00f3n en el navegador es el objeto LocalStorage.</p>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html#sesion","title":"Sesi\u00f3n","text":"<p>La sesi\u00f3n a\u00f1ade la gesti\u00f3n del estado a HTTP, almacenando en este caso la informaci\u00f3n en el servidor. Cada visitante tiene un ID de sesi\u00f3n \u00fanico, el cual por defecto se almacena en una cookie denominada <code>PHPSESSID</code>. Si el cliente no tiene las cookies activas, el ID se propaga en cada URL dentro del mismo dominio. Cada sesi\u00f3n tiene asociado un almac\u00e9n de datos mediante el array global <code>$_SESSION</code>, en el cual podemos almacenar y recuperar informaci\u00f3n.</p> <p>La sesi\u00f3n comienza al ejecutar un script PHP. Se genera un nuevo ID y se cargan los datos del almac\u00e9n:</p> <p> </p> Comunicaci\u00f3n con sesi\u00f3n <p>Las operaciones que podemos realizar con la sesi\u00f3n son:</p> <pre><code>&lt;?php\nsession_start(); // carga la sesi\u00f3n\nsession_id() // devuelve el id\n$_SESSION[clave] = valor; // inserci\u00f3n\nsession_destroy(); // destruye la sesi\u00f3n\nunset($_SESSION[clave]; // borrado\n</code></pre> <p>Vamos a ver mediante un ejemplo como podemos insertar en un p\u00e1gina datos en la sesi\u00f3n para posteriormente en otra p\u00e1gina acceder a esos datos. Por ejemplo, en <code>sesion1.php</code> tendr\u00edamos</p> <pre><code>&lt;?php\nsession_start();\u00a0//\u00a0inicializamos\n$_SESSION[\"ies\"]\u00a0=\u00a0\"IES\u00a0Severo\u00a0Ochoa\";\u00a0//\u00a0asignaci\u00f3n\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Estamos\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n&lt;br\u00a0/&gt;\n&lt;a\u00a0href=\"sesion2.php\"&gt;Y\u00a0luego&lt;/a&gt;\n</code></pre> <p>Y posteriormente podemos acceder a la sesi\u00f3n en <code>sesion2.php</code>:</p> <pre><code>&lt;?php\nsession_start();\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Otra\u00a0vez,\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n</code></pre> <p>Configurando la sesi\u00f3n en <code>php.ini</code></p> <p>Las siguiente propiedades de <code>php.ini</code> permiten configurar algunos aspectos de la sesi\u00f3n:</p> <ul> <li><code>session.save_handler</code>: controlador que gestiona c\u00f3mo se almacena (<code>files</code>)</li> <li><code>session.save_path</code>: ruta donde se almacenan los archivos con los datos (si tenemos un cluster, podr\u00edamos usar <code>/mnt/sessions</code> en todos los servidor de manera que apuntan a una carpeta compartida)</li> <li><code>session.name</code>: nombre de la sesi\u00f3n (<code>PHSESSID</code>)</li> <li><code>session.auto_start</code>: Se puede hacer que se autocargue con cada script. Por defecto est\u00e1 deshabilitado</li> <li><code>session.cookie_lifetime</code>: tiempo de vida por defecto</li> </ul> <p>M\u00e1s informaci\u00f3n en la documentaci\u00f3n oficial.</p>"},{"location":"uutt/04_ProgramacionWeb/044_GestionEstado.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC409 (AEA). (RA4 / CE4a CE4b CE4c CE4f / IC1 / 3p) - Mediante el uso de cookies, informa al usuario de si es su primera visita, o si no lo es, muestre su valor (valor de un contador). Adem\u00e1s, debes permitir que el usuario reinicialice su contador de visitas.</p> </li> <li> <p>AC410 (AR). (RA4 / CE4a CE4b CE4c CE4f / IC1 / 3p) - Mediante el uso de cookies, crea una p\u00e1gina con un desplegable con varios colores, de manera que el usuario pueda cambiar el color de fondo de la p\u00e1gina (atributo <code>bgcolor</code>). Al cerrar la p\u00e1gina, \u00e9sta debe recordar, al menos durante 24h, el color elegido y la pr\u00f3xima vez que se cargue la pagina, lo haga con el \u00faltimo color seleccionado.</p> </li> <li> <p>AC411 (AEA). (RA4 / CE4a CE4b CE4c CE4f / IC1 / 3p) - Modifica el ejercicio AC410 para almacenar el color de fondo en la sesi\u00f3n y no emplear cookies. Adem\u00e1s, debe contener un enlace a un archivo que muestre el color y dar la posibilidad de:</p> <ul> <li>volver a la p\u00e1gina anterior mediante un enlace</li> <li>mediante otro enlace, vaciar la sesi\u00f3n y volver a la p\u00e1gina anterior.</li> </ul> </li> <li> <p>AC412 (AR). (RA4 / CE4a CE4b CE4c CE4f / IC1 / 3p) - Haciendo uso de la sesi\u00f3n, vamos a dividir el formulario del ejercicio AC402 en subformularios:</p> <ul> <li>El primero env\u00eda los datos (nombre y apellidos, email, url y sexo) a un segundo formulario.</li> <li>El segundo formulario lee los datos y los mete en la sesi\u00f3n. A continuaci\u00f3n, muestra el resto de campos del formulario a rellenar (convivientes, aficiones y men\u00fa). Env\u00eda estos datos a un tercer formulario.</li> <li>El tercer formulario recoge los datos enviados en el paso anterior y junto a los que ya estaban en la sesi\u00f3n, se muestran todos los datos en una tabla/lista desordenada.</li> </ul> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/045_AutentifcacionUsuarios.html","title":"Autentificaci\u00f3n de usuarios","text":"<p>Una sesi\u00f3n establece una relaci\u00f3n an\u00f3nima con un usuario particular, de manera que podemos saber si es el mismo usuario entre dos peticiones distintas. Si preparamos un sistema de login, podremos saber quien utiliza nuestra aplicaci\u00f3n.</p> <p>Para ello, preparemos un sencillo sistema de autenticaci\u00f3n:</p> <ul> <li>Mostrar el formulario login/password</li> <li>Comprobar los datos enviados</li> <li>A\u00f1adir el login a la sesi\u00f3n</li> <li>Comprobar el login en la sesi\u00f3n para realizar tareas espec\u00edficas del usuario</li> <li>Eliminar el login de la sesi\u00f3n cuando el usuario la cierra.</li> </ul> <p>Vamos a ver en c\u00f3digo cada paso del proceso. Comenzamos con el archivo <code>index.php</code>:</p> <pre><code>&lt;form action='login.php' method='post'&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Login&lt;/legend&gt;\n    &lt;div&gt;&lt;span class='error'&gt;&lt;?php echo $error; ?&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='usuario'&gt;Usuario:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='text' name='inputUsuario' id='usuario' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='password'&gt;Contrase\u00f1a:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='password' name='inputPassword' id='password' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;input type='submit' name='enviar' value='Enviar' /&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n  &lt;/form&gt;\n</code></pre> <p>Al hacer submit nos lleva a <code>login.php</code>, el cual hace de controlador:</p> <pre><code>&lt;?php\n// Comprobamos si ya se ha enviado el formulario\nif (isset($_POST['enviar'])) {\n    $usuario = $_POST['inputUsuario'];\n    $password = $_POST['inputPassword'];\n\n    // validamos que recibimos ambos par\u00e1metros\n    if (empty($usuario) || empty($password)) {\n        $error = \"Debes introducir un usuario y contrase\u00f1a\";\n        include \"index.php\";\n    } else {\n        if ($usuario == \"admin\" &amp;&amp; $password == \"admin\") {\n            // almacenamos el usuario en la sesi\u00f3n\n            session_start();\n            $_SESSION['usuario'] = $usuario;\n            // cargamos la p\u00e1gina principal\n            include \"main.php\";\n        } else {\n            // Si las credenciales no son v\u00e1lidas, se vuelven a pedir\n            $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\";\n            include \"index.php\";\n        }\n    }\n}\n</code></pre> <p>Dependiendo del usuario que se haya logueado, vamos a ir a una vista o a otra. Por ejemplo, en <code>main.php</code> tendr\u00edamos:</p> <pre><code>&lt;?php\n    // Recuperamos la informaci\u00f3n de la sesi\u00f3n\n    if(!isset($_SESSION)) {\n        session_start();\n    }\n\n    // Y comprobamos que el usuario se haya autentificado\n    if (!isset($_SESSION['usuario'])) {\n       die(\"Error - debe &lt;a href='index.php'&gt;identificarse&lt;/a&gt;.&lt;br /&gt;\");\n    }\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Listado de productos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido &lt;?= $_SESSION['usuario'] ?&gt;&lt;/h1&gt;\n    &lt;p&gt;Pulse &lt;a href=\"logout.php\"&gt;aqu\u00ed&lt;/a&gt; para salir&lt;/p&gt;\n    &lt;p&gt;Volver al &lt;a href=\"main.php\"&gt;inicio&lt;/a&gt;&lt;/p&gt;\n    &lt;h2&gt;Listado de productos&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Producto 1&lt;/li&gt;\n        &lt;li&gt;Producto 2&lt;/li&gt;\n        &lt;li&gt;Producto 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finalmente, necesitamos la opci\u00f3n de cerrar la sesi\u00f3n que colocamos en <code>logout.php</code>:</p> <pre><code>&lt;?php\n// Recuperamos la informaci\u00f3n de la sesi\u00f3n\nsession_start();\n\n// Y la destruimos\nsession_destroy();\nheader(\"Location: index.php\");\n?&gt;\n</code></pre> <p>Autenticaci\u00f3n en producci\u00f3n</p> <p>En la actualidad la autenticaci\u00f3n de usuario no se realiza gestionando la sesi\u00f3n direcamente, sino que se realiza mediante alg\u00fan framekwork que abstrae todo el proceso o la integraci\u00f3n de mecanismos de autenticaci\u00f3n tipo OAuth, como  estudiaremos en la \u00faltima unidad mediante Laravel.</p>"},{"location":"uutt/04_ProgramacionWeb/045_AutentifcacionUsuarios.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC413 (AEA). (RA4 RA5 / CE4c CE4d CE4e CE4f CE5a CE5b CE5d / IC1 / 3p) - Genera un formulario de inicio de sesi\u00f3n. Luego, programa el controlador, por lo que debes comprobar los datos recibidos (solo permite la entrada de <code>usuario/usuario</code> y si todo es correcto, mostrar una p\u00e1gina con el mensaje \"Has accedido\". No contiene c\u00f3digo HTML.</p> </li> <li> <p>AC414 (AR). (RA4 RA5 / CE4c CE4d CE4e CE4f CE5a CE5b CE5d / IC1 / 3p) - Desde secretar\u00eda necesitan un formulario de acceso. S\u00f3lo debe dejar pasar con las credenciales <code>secretaria/1234</code>. Si todo es correcto has de generar un documento HTML con un listado de los m\u00f3dulos de DAW del presente curso, si no es satisfactorio, mostrar el horario de secretar\u00eda dependiendo de la hora.</p> </li> <li> <p>AC415 (AP). (RA4 RA5 / CE4c CE4d CE4e CE4f CE5a CE5b CE5d / IC1 / 3p) - Modifica la actividad AC414 para que si no has iniciado sesi\u00f3n, te mande a la p\u00e1gina para introducir las credenciales.</p> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html","title":"Seguridad en el Desarrollo de Aplicaciones PHP","text":"<p>La seguridad en aplicaciones web implica mucho m\u00e1s que simplemente asegurar que las contrase\u00f1as sean fuertes. Aqu\u00ed abordamos c\u00f3mo mejorar la seguridad del lado del cliente y del servidor mediante validaci\u00f3n y limpieza de datos, adem\u00e1s de t\u00e9cnicas para el manejo seguro de contrase\u00f1as.</p>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#mejor-prevenir-que-curar-en-cliente-y-en-servidor","title":"Mejor prevenir que curar (en cliente y en servidor)","text":""},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#validacion-asegurarse-de-que-los-datos-sean-validos","title":"Validaci\u00f3n: Asegurarse de que los datos sean v\u00e1lidos","text":"<ul> <li>Usar expresiones regulares para validar.Es fundamental validar los datos ingresados por el usuario para evitar datos incorrectos o malintencionados. Funci\u00f3n PHP relevante: <ul> <li><code>preg_match</code> <pre><code>if (preg_match(\"/^[a-zA-Z ]*$/\", $name)) {\n    // El nombre es v\u00e1lido\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#limpieza-eliminar-posibles-problemas-con-los-datos","title":"Limpieza: Eliminar posibles problemas con los datos","text":"<ul> <li> <p>Limpiar contenido para eliminar marcas HTML que podr\u00edan ser utilizadas para ataques de inyecci\u00f3n de c\u00f3digo (XSS).    Funciones PHP relevantes:</p> <ul> <li><code>htmlentities</code> <pre><code>$clean_input = htmlentities($input);\n</code></pre></li> <li><code>htmlspecialchars</code> <pre><code>$clean_input = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');\n</code></pre></li> </ul> </li> <li> <p>Uso de funciones de filtrado para cualquier variable.    Funci\u00f3n PHP relevante: </p> <ul> <li><code>filter_var</code>: Aplicar sobre un valor:   <pre><code>$clean_email = filter_var($email, FILTER_SANITIZE_EMAIL);\n</code></pre></li> <li><code>filter_var</code>: Aplica una serie de filtros:   <pre><code>$options = array(\n    'options' =&gt; array(\n        'min_range' =&gt; 1,\n        'max_range' =&gt; 100\n    )\n);\n$age = filter_var($age, FILTER_VALIDATE_INT, $options);\n</code></pre></li> </ul> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/046_SeguridadFiltrado.html#actividades","title":"Actividades","text":"<ul> <li>AC416 (AEA). (RA4 / CE4a CE4b CE4c CE4f / IC1 / 3p) - Modifica la actividad AC415 para que el acceso sea seguro.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html","title":"El patron de dise\u00f1o MVC","text":"<p>El patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC) es una arquitectura de software que separa una aplicaci\u00f3n en tres componentes principales: el Modelo, la Vista y el Controlador. En el contexto de PHP, MVC se utiliza com\u00fanmente para desarrollar aplicaciones web.</p>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#componentes-del-mvc-en-php","title":"Componentes del MVC en PHP","text":""},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#modelo-model","title":"Modelo (Model)","text":"<p>El Modelo representa la capa de datos de la aplicaci\u00f3n. Contiene la l\u00f3gica de negocio, la l\u00f3gica de acceso a datos y cualquier otra l\u00f3gica relacionada con la manipulaci\u00f3n de datos. En PHP, los modelos suelen ser clases que interact\u00faan con la base de datos, realizan consultas y manipulan datos.</p> <pre><code>    &lt;?php\n    class UsuarioModel {\n        public function obtenerUsuarios() {\n            // L\u00f3gica para obtener usuarios de la base de datos\n        }\n    }\n    ?&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#vista-view","title":"Vista (View)","text":"<p>La Vista es la capa de presentaci\u00f3n de la aplicaci\u00f3n. Se encarga de mostrar la informaci\u00f3n al usuario de manera visual. En PHP, las vistas suelen ser archivos de plantilla que contienen c\u00f3digo HTML y pueden incluir fragmentos de PHP para mostrar datos din\u00e1micos.</p> <pre><code>    &lt;!-- archivo vista_usuarios.php --&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Lista de Usuarios&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Lista de Usuarios&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;?php foreach ($usuarios as $usuario): ?&gt;\n                &lt;li&gt;&lt;?= $usuario['nombre'] ?&gt;&lt;/li&gt;\n            &lt;?php endforeach; ?&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#controlador","title":"Controlador","text":"<p>El Controlador act\u00faa como intermediario entre el Modelo y la Vista. Se encarga de procesar las solicitudes del usuario, interactuar con el Modelo para obtener datos y enviar esos datos a la Vista para su presentaci\u00f3n. En PHP, los controladores suelen ser clases que manejan las solicitudes HTTP y llaman a los m\u00e9todos apropiados del Modelo y la Vista.</p> <pre><code>    &lt;?php\n    class UsuarioController {\n        public function listar() {\n            // L\u00f3gica para obtener datos del modelo\n            $usuarioModel = new UsuarioModel();\n            $usuarios = $usuarioModel-&gt;obtenerUsuarios();\n\n            // Cargar la vista con los datos obtenidos\n            include 'vista_usuarios.php';\n        }\n    }\n    ?&gt;\n</code></pre>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#flujo-de-trabajo-en-mvc","title":"Flujo de Trabajo en MVC","text":"<ol> <li>El usuario realiza una solicitud HTTP, por ejemplo, para ver una lista de usuarios.</li> <li>El enrutador (Router) dirige la solicitud al controlador apropiado, en este caso, al m\u00e9todo listar del controlador UsuarioController.</li> <li>El controlador interact\u00faa con el modelo para obtener los datos necesarios, en este caso, la lista de usuarios.</li> <li>El controlador env\u00eda los datos a la vista correspondiente.</li> <li>La vista utiliza los datos proporcionados por el controlador para generar la respuesta HTML, que se env\u00eda al usuario.</li> </ol>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#ventajas-del-patron-mvc-en-php","title":"Ventajas del Patr\u00f3n MVC en PHP","text":"<ul> <li>Separaci\u00f3n de preocupaciones: Permite separar la l\u00f3gica de negocio, la presentaci\u00f3n y el control de flujo en componentes distintos, lo que facilita el mantenimiento y la escalabilidad del c\u00f3digo.</li> <li>Reutilizaci\u00f3n de c\u00f3digo: Al dividir la aplicaci\u00f3n en componentes independientes, se puede reutilizar el c\u00f3digo de manera m\u00e1s eficiente.</li> <li>Facilita la colaboraci\u00f3n: Dado que cada componente tiene responsabilidades claras y definidas, varios desarrolladores pueden trabajar en paralelo en diferentes partes de la aplicaci\u00f3n.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/047_PatronMVC.html#actividades","title":"Actividades","text":"<ul> <li>AC417 (AP). (RA5 / CE5e CE5f CE5g CE5h / IC1 / 3p) - Desarrollar un sistema de registro de usuarios en PHP utilizando el patr\u00f3n de dise\u00f1o MVC y almacenamiento en sesiones o cookies. Una vez registrado el usuario, redir\u00edgelo a una p\u00e1gina de bienvenida o al formulario de inicio de sesi\u00f3n. Aseg\u00farate de implementar pr\u00e1cticas de seguridad como el hash de contrase\u00f1as y la validaci\u00f3n de datos del usuario.</li> <li>PR402 (SA). (RA5 / CE5e CE5f CE5g CE5h / IC1 / 3p) - El CTO del proyecto te comenta que has de aplicar un sistema de inicio de sesi\u00f3n al proyecto. Para ello haz uso de todo lo aprendido en la UT e implementa, de manera segura, un sistema de autentificaci\u00f3n de usuarios. De momento, las \u00fanicas credenciales v\u00e1lidas ser\u00e1n <code>admin/admin</code>.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/048_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Manual de PHP</li> <li>Manual: Manual de OO en PHP - www.desarrolloweb.com</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/048_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Tutorial de la librer\u00eda SPL  por Diego L\u00e1zaro</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/049_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 es una p\u00e1gina din\u00e1mica con PHP?<ol> <li>Una p\u00e1gina que cambia su contenido en funci\u00f3n del c\u00f3digo HTML.</li> <li>Una p\u00e1gina que utiliza JavaScript para mostrar contenido variable.</li> <li>Una p\u00e1gina que modifica su contenido en funci\u00f3n de la interacci\u00f3n del usuario y datos de servidores.</li> <li>Una p\u00e1gina que est\u00e1 escrita \u00fanicamente en PHP sin HTML.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Una p\u00e1gina que modifica su contenido en funci\u00f3n de la interacci\u00f3n del usuario y datos de servidores..</p> <ol> <li>\u00bfPara qu\u00e9 se utilizan principalmente las cabeceras de respuesta en PHP?<ol> <li>Para enviar informaci\u00f3n espec\u00edfica del navegador al servidor.</li> <li>Para modificar la apariencia del contenido de la p\u00e1gina.</li> <li>Para controlar el comportamiento de las p\u00e1ginas web cacheadas.</li> <li>Para establecer par\u00e1metros de conexi\u00f3n con la base de datos.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Para controlar el comportamiento de las p\u00e1ginas web cacheadas..</p> <ol> <li>\u00bfQu\u00e9 son las cookies en PHP?<ol> <li>Datos almacenados en el servidor para identificar al usuario.</li> <li>Peque\u00f1os archivos guardados en el ordenador del usuario que el sitio web utiliza para recordar informaci\u00f3n sobre el usuario.</li> <li>Funciones integradas de PHP para mejorar la velocidad del sitio.</li> <li>Herramientas de desarrollo para depurar el c\u00f3digo PHP.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Peque\u00f1os archivos guardados en el ordenador del usuario que el sitio web utiliza para recordar informaci\u00f3n sobre el usuario..</p> <ol> <li>\u00bfQu\u00e9 es una sesi\u00f3n en PHP?<ol> <li>Una conexi\u00f3n continua entre el cliente y el servidor que permite intercambiar informaci\u00f3n constantemente.</li> <li>Un m\u00e9todo para guardar datos del usuario en una base de datos a trav\u00e9s de PHP.</li> <li>Una forma de guardar informaci\u00f3n que se puede utilizar a trav\u00e9s de m\u00faltiples p\u00e1ginas durante la visita del usuario al sitio.</li> <li>Un tipo de cookie que mejora la seguridad del sitio web.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Una forma de guardar informaci\u00f3n que se puede utilizar a trav\u00e9s de m\u00faltiples p\u00e1ginas durante la visita del usuario al sitio..</p> <ol> <li>\u00bfQu\u00e9 describe mejor el patr\u00f3n de dise\u00f1o MVC utilizado en el desarrollo web con PHP?<ol> <li>MVC separa los datos de los usuarios de la l\u00f3gica de negocio del backend.</li> <li>MVC divide la aplicaci\u00f3n en tres partes interconectadas: modelo, vista y controlador.</li> <li>MVC es un tipo de base de datos utilizado exclusivamente en PHP.</li> <li>MVC combina todas las funciones de la aplicaci\u00f3n en un \u00fanico archivo para mejorar el rendimiento.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. MVC divide la aplicaci\u00f3n en tres partes interconectadas: modelo, vista y controlador..</p>"},{"location":"uutt/04_ProgramacionWeb/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/04_ProgramacionWeb/ProgramacionAula.html#resultados-de-aprendizaje","title":"Resultados de aprendizaje","text":"<ul> <li> <p> RA4. Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas.</li> <li>b. Se han utilizado mecanismos para mantener el estado de las aplicaciones web.</li> <li>c. Se han utilizado mecanismos para almacenar informaci\u00f3n en el cliente web y para recuperar su contenido.</li> <li>d. Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios.</li> <li>e. Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.</li> <li>f. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </li> <li> <p> RA5. Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han identificado las ventajas de separar la l\u00f3gica de negocio de los aspectos de presentaci\u00f3n de la aplicaci\u00f3n.</li> <li>c. Se han utilizado objetos y controles en el servidor para generar el aspecto visual de la aplicaci\u00f3n web en el cliente.</li> <li>d. Se han utilizado formularios generados de forma din\u00e1mica para responder a los eventos de la aplicaci\u00f3n web.</li> <li>e. Se han identificado y aplicado los par\u00e1metros relativos a la configuraci\u00f3n de la aplicaci\u00f3n web.</li> <li>f. Se han utilizado formularios generados de forma din\u00e1mica para responder a los eventos de la aplicaci\u00f3n web.</li> <li>g. Se han aplicado los principios y patrones de dise\u00f1o de la programaci\u00f3n orientada a objetos.</li> <li>h. Se ha probado y documentado el c\u00f3digo.</li> </ul> </li> </ul>"},{"location":"uutt/04_ProgramacionWeb/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 04 01 22/10/2024 <p>Variables en servidor</p> <ul> <li>Arrays globales</li> <li>Arrays globales: $_SERVER</li> <li>Propiedades</li> </ul> <ul> <li>AC401. Valores de $_SERVER y paso de par\u00e1metros por GET</li> </ul> 02 23/10/2024 <p>Formularios</p> <ul> <li>Diferencias entre GET y POST</li> <li>Validaci\u00f3n</li> <li>Par\u00e1metro multivalor</li> </ul> <ul> <li>AC402. Formulario con paso por par\u00e1metros con GET.</li> <li>AC403. Formulario con paso por par\u00e1metros con POST.</li> </ul> 03 24/10/2024 <p>Formularios</p> <ul> <li>Volviendo a rellenar un formulario</li> <li>Subir archivos</li> </ul> <ul> <li>AC404. Validaciones HTML sobre formulario AC403.</li> <li>AC405. Formulario para subir ficheros.</li> <li>AC406. Formulario AC405 s\u00f3lo ha de aceptar im\u00e1genes.</li> </ul> 04 28/10/2024 <p>Cabeceras de respuesta</p> <ul> <li>Introducci\u00f3n</li> <li>Configuraci\u00f3n y depuraci\u00f3n</li> </ul> <ul> <li>AC407. Redirecci\u00f3n en funci\u00f3n de la hora</li> <li>AC408. Obtener la fecha de la \u00faltima modificaci\u00f3n de un fichero.</li> <li>PR401. Formulario para obtener los datos de los trabajadores.</li> </ul> 05 29/10/2024 <p>Gesti\u00f3n de estado</p> <ul> <li>Introducci\u00f3n</li> <li>Cookies</li> </ul> <ul> <li>AC409. Averiguar si es la primera visita del usuario o no.</li> <li>AC410. Cambio de color de fondo y que dure al menos 24 horas.</li> </ul> 06 30/10/2024 <p>Gesti\u00f3n de estado</p> <ul> <li>Sesiones</li> </ul> <ul> <li>AC411. Modificar AC410 para guardar el color del fondo en la sesi\u00f3n.</li> <li>AC412. Modificar AC402 para adaptarlo a sesiones.</li> </ul> 07 31/10/2024 <p>Autentificaci\u00f3n de usuarios</p> <ul> <li>Inicio de sesi\u00f3n</li> <li>Mostrar informaci\u00f3n tras acceder</li> <li>Finalizar sesi\u00f3n</li> </ul> <ul> <li>AC413. Formulario sencillo de inicio de sesi\u00f3n sin HTML.</li> <li>AC414. Inicio de sesi\u00f3n y muestra de informaci\u00f3n.</li> <li>AC415. Gesti\u00f3n completa de acceso a ficheros.</li> </ul> 08 04/11/2024 <p>Seguridad y filtrado</p> <ul> <li>Validaci\u00f3n</li> <li>Limpieza</li> <li>`htmlentities`, `htmlspecialchars` y `filter_var`</li> </ul> <ul> <li>AC416. Modificar la actividad AC415 para un acceso seguro</li> </ul> 09 05/11/2024 <p>Patr\u00f3n MVC en PHP</p> <ul> <li>Componentes del MVC en PHP</li> <li>Flujo de Trabajo en MVC</li> <li>Ventajas del Patr\u00f3n MVC en PHP\u00b6</li> </ul> <ul> <li>AC417. Desarrollar un sistema de registro de usuarios en PHP utilizando el patr\u00f3n de dise\u00f1o MVC y almacenamiento en sesiones o cookies.</li> <li>PR402. Sistema de autentificaci\u00f3n de usuarios en la SA</li> </ul> 10 06/11/2024 <p>Prueba de conocimiento</p> <ul> <li>Test</li> </ul> <p>Prueba de conocimiento</p> <ul> <li>Pr\u00e1ctico</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 04. Programaci\u00f3n web.</p> <p>Horas</p> <p>10 Sesiones - 20H</p> <p>Resultados de Aprendizaje</p> <p>RA4. Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.RA5. Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</p> <p>Preconocimiento</p> <p>Conocimientos b\u00e1sicos de PHP.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar las variables en el servidor.</li> <li>OD2: Analizar la gesti\u00f3n de estados en una aplicaci\u00f3n. </li> <li>OD3: Gestionar de manera segura la informaci\u00f3n en el servidor.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Variables globales en el servidor</li> <li>CES2. Formularios</li> <li>CES3. Cabeceras de respuesta de los formularios</li> <li>CES4. Gesti\u00f3n de estados</li> <li>CES5. Autentificaci\u00f3n segura de usuarios</li> <li>CES6. Patr\u00f3n MVC en PHP</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC401. Valores de <code>$_SERVER</code> y paso de par\u00e1metros por <code>GET</code>.</p> <p>CE4a, CE4b</p> <p>IE1</p> <p>IC1</p> <p>AC402. Formulario con paso por par\u00e1metros con <code>GET</code>.</p> <p>CE4a, CE4b</p> <p>IE1</p> <p>IC1</p> <p>AC403. Formulario con paso por par\u00e1metros con <code>POST</code>.</p> <p>CE4a, CE4b</p> <p>IE1</p> <p>IC1</p> <p>AC407. Redirecci\u00f3n en funci\u00f3n de la hora.</p> <p>CE4a, CE4b, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC409. Averiguar si es la primera visita del usuario o no.</p> <p>CE4a, CE4b, CE4c, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC411. Modificar AC410 para guardar el color del fondo en la sesi\u00f3n.</p> <p>CE4a, CE4b, CE4c, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC413. Formulario sencillo de inicio de sesi\u00f3n sin HTML.</p> <p>CE4c, CE4d, CE4e, CE4f, CE5a, CE5c, CE5d</p> <p>IE1</p> <p>IC1</p> <p>AC416. Modificar AC415 para un acceso seguro.</p> <p>CE4c, CE4d, CE4e, CE4f, CE5a, CE5c, CE5d</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC404. Validaciones HTML sobre formulario AC403.</p> <p>CE4a, CE4b</p> <p>IE1</p> <p>IC1</p> <p>AC410. Cambio de color de fondo y que dure al menos 24 horas.</p> <p>CE4a, CE4b, CE4c, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC412. Modificar AC402 para adaptarlo a sesiones.</p> <p>CE4a, CE4b, CE4c, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC414. Inicio de sesi\u00f3n y muestra de informaci\u00f3n.</p> <p>CE4c, CE4d, CE4e, CE4f, CE5a, CE5c, CE5d</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC405. Formulario para subir ficheros.</p> <p>CE4a, CE4b</p> <p>IE1</p> <p>IC1</p> <p>AC406. Formulario AC405 s\u00f3lo ha de aceptar im\u00e1genes.</p> <p>CE4a, CE4b</p> <p>IE1</p> <p>IC1</p> <p>AC408. Obtener la fecha de la \u00faltima modificaci\u00f3n de un fichero.</p> <p>CE4a, CE4b, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC415. Gesti\u00f3n completa de acceso a ficheros.</p> <p>CE4c, CE4d, CE4e, CE4f, CE5a, CE5c, CE5d</p> <p>IE1</p> <p>IC1</p> <p>PR401. Formulario para la obtenci\u00f3n de datos de los empleados.</p> <p>CE4a, CE4b, CE4f</p> <p>IE1</p> <p>IC1</p> <p>AC417. Sistema de registro de usuarios en PHP utilizando el patr\u00f3n de dise\u00f1o MVC y almacenamiento en sesiones o cookies.</p> <p>CE5e, CE5f, CE5g, CE5h</p> <p>IE1</p> <p>IC1</p> <p>PR402. Sistema de autentificaci\u00f3n de usuarios en la SA.</p> <p>CE5e, CE5f, CE5g, CE5h</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE4a, CE4b, CE4c, CE4d, CE4e, CE4f, CE5a, CE5c, CE5d</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html","title":"Reto 2","text":"<p>Bienvenidos al desaf\u00edo de Desarrollo Web en Entorno Servidor, enfocado en la creaci\u00f3n de un prototipo funcional de una herramienta de comercio electr\u00f3nico utilizando PHP orientado a objetos. Este proyecto te invita a aplicar y profundizar en tus conocimientos en programaci\u00f3n web, enfoc\u00e1ndose en la construcci\u00f3n de un prototipo que simule la funcionalidad b\u00e1sica de una tienda en l\u00ednea. Durante este reto, se espera que desarrolles funcionalidades clave como la navegaci\u00f3n de productos, gesti\u00f3n del carrito de compras y el proceso de checkout, utilizando clases y objetos para organizar el c\u00f3digo de manera eficiente. Este enfoque pr\u00e1ctico te permitir\u00e1 experimentar con el dise\u00f1o y la implementaci\u00f3n de soluciones web, mejorando vuestras habilidades t\u00e9cnicas y prepar\u00e1ndote para futuros proyectos de desarrollo web.</p>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html#objetivo-del-reto","title":"Objetivo del reto","text":"<p>Desarrollar por parejas de un prototipo funcional de una herramienta de comercio electr\u00f3nico utilizando PHP orientado a objetos. Este prototipo servir\u00e1 como una base inicial para entender y aplicar conceptos fundamentales en un entorno de comercio electr\u00f3nico real.</p>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html#requisitos-especificos","title":"Requisitos espec\u00edficos","text":"<ul> <li>Interfaz web funcional.</li> <li>Integrar herramientas web para su documentaci\u00f3n y depuraci\u00f3n.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>Adem\u00e1s de los los criterios de evaluaci\u00f3n que se trabajan en las UT 04 y UT 05, se valorar\u00e1:</p> <ul> <li>Funcionalidad: El prototipo debe ser operativo, permitiendo la interacci\u00f3n b\u00e1sica con productos y el carrito de compras.</li> <li>Adherencia a Est\u00e1ndares: El c\u00f3digo debe seguir buenas pr\u00e1cticas de programaci\u00f3n y estar bien organizado.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html#recursos-disponibles","title":"Recursos disponibles","text":"<ul> <li>Apuntes del m\u00f3dulo.</li> <li>Acceso a recursos en l\u00ednea para investigaci\u00f3n y consulta.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html#entrega","title":"Entrega","text":"<ul> <li>Trabajo en parejas.</li> <li>C\u00f3digo fuente del proyecto.</li> <li>Documentaci\u00f3n breve explicando la estructura del c\u00f3digo y decisiones de dise\u00f1o.</li> </ul>"},{"location":"uutt/04_ProgramacionWeb/Reto2.html#fecha-de-entrega","title":"Fecha de entrega","text":"<p>La entrega ser\u00e1 a trav\u00e9s de Aules al finalizar la UT 05</p>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html","title":"Composer","text":""},{"location":"uutt/05_HerramientasWeb/051_Composer.html#conceptos-previos","title":"Conceptos previos","text":"<p>Librer\u00eda</p> <p>Una librer\u00eda en programaci\u00f3n es un conjunto de funciones, m\u00e9todos o clases preescritas que se pueden utilizar para realizar tareas comunes sin necesidad de reescribir c\u00f3digo desde cero. Las librer\u00edas est\u00e1n dise\u00f1adas para ser reutilizables y para proporcionar una manera de acceder a funcionalidades espec\u00edficas mediante una API (Interfaz de Programaci\u00f3n de Aplicaciones) bien definida. En PHP, las librer\u00edas pueden incluir operaciones para trabajar con fechas, manipulaci\u00f3n de im\u00e1genes, operaciones de red, etc.</p> <p>El uso de librer\u00edas permite a los desarrolladores ahorrar tiempo, reducir errores al depender de c\u00f3digo ya probado y mantenible, y mejorar la calidad general del software.</p> <p>Framework</p> <p>Un framework, en cambio, ofrece una estructura y un enfoque m\u00e1s amplio que una librer\u00eda. No s\u00f3lo proporciona librer\u00edas y APIs, sino tambi\u00e9n un marco de trabajo predefinido para desarrollar aplicaciones. Un framework puede dictar la arquitectura de tu proyecto con patrones de dise\u00f1o espec\u00edficos, componentes integrados y convenciones que deben seguirse.</p> <p>En PHP, frameworks como Laravel, Symfony, y CakePHP ofrecen herramientas y componentes para manejar rutas, solicitudes HTTP, acceso a bases de datos, y m\u00e1s, facilitando el desarrollo de aplicaciones robustas y escalables siguiendo buenas pr\u00e1cticas.</p>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#composer_1","title":"Composer","text":"<p>Herramienta por excelencia en PHP para la gesti\u00f3n de librer\u00edas y dependencias, de manera que instala y las actualiza asegurando que todo el equipo de desarrollo tiene el mismo entorno y versiones. Adem\u00e1s, ofrece autoloading de nuestro c\u00f3digo, de manera que no tengamos que hacerlo nosotros \"a mano\".</p> <p>Est\u00e1 escrito en PHP, y pod\u00e9is consultar toda su documentaci\u00f3n en https://getcomposer.org/.</p> <p>Utiliza Packagist como repositorio de librer\u00edas.</p> <p>Funcionalmente, es similar a Maven (Java) / npm (JS).</p>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#la-necesidad-de-composer","title":"La necesidad de Composer","text":"<p>Con el crecimiento en el uso de librer\u00edas y frameworks, surge el problema de gestionar todas estas dependencias de manera eficiente. Aqu\u00ed es donde entra Composer:</p> <p>Composer es un sistema de gesti\u00f3n de dependencias para PHP que facilita la instalaci\u00f3n y actualizaci\u00f3n de librer\u00edas y frameworks. Permite a los desarrolladores declarar las bibliotecas de las que depende su proyecto y las maneja (instala/actualiza) por ellos. Composer trabaja con \"packagist.org\", que es el repositorio por defecto para paquetes PHP, donde se pueden buscar y descargar las librer\u00edas y frameworks necesarios para un proyecto.</p> <p>Gracias a Composer, los desarrolladores pueden:</p> <ul> <li>Mantener un control claro de las versiones de las librer\u00edas usadas.</li> <li>Automatizar la instalaci\u00f3n y actualizaci\u00f3n de dependencias.</li> <li>Resolver conflictos de dependencias eficientemente.</li> <li>Contribuir a una gesti\u00f3n m\u00e1s profesional y mantenible del c\u00f3digo base.</li> </ul>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Si estamos usando XAMPP, hemos de instalar Composer en el propio sistema operativo. Se recomienda seguir las instrucciones oficiales seg\u00fan el sistema operativo a emplear.</p> <p>En cambio, si usamos Docker, necesitamos modificar la configuraci\u00f3n de nuestro contenedor. En nuestro caso, hemos decidido modificar el archivo <code>Dockerfile</code> y a\u00f1adir el siguiente comando:</p> <pre><code>COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer\n</code></pre> <p>Para facilitar el trabajo, hemos creado una plantilla ya preparada.</p> <p>Es importante que dentro del contenedor comprobemos que tenemos la v2:</p> <pre><code>composer -V\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#primeros-pasos","title":"Primeros pasos","text":"<p>Cuando creemos un proyecto por primera vez, hemos de inicializar el repositorio. Para ello, ejecutaremos el comando <code>composer init</code> donde:</p> <ul> <li>Configuramos el nombre del paquete, descripci\u00f3n, autor (nombre ), tipo de paquete (project), etc... <li>Definimos las dependencias del proyecto (<code>require</code>) y las de desarrollo (<code>require-dev</code>) de manera interactiva.<ul> <li>En las de desarrollo se indica aquellas que no se instalar\u00e1n en el entorno de producci\u00f3n, por ejemplo, las librer\u00edas de pruebas.</li> </ul> </li> <p>Tras su configuraci\u00f3n, se crear\u00e1 autom\u00e1ticamente el archivo <code>composer.json</code> con los datos introducidos y descarga las librer\u00edas en la carpeta <code>vendor</code>. La instalaci\u00f3n de las librer\u00edas siempre se realiza de manera local para cada proyecto.</p> <pre><code>{\n    \"name\": \"dwes/log\",\n    \"description\": \"Pruebas con Monolog\",\n    \"type\": \"project\",\n    \"require\": {\n        \"monolog/monolog\": \"^2.1\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Gin\u00e9s L\u00f3pez\",\n            \"email\": \"g.lopezgarcia2@edu.gva.es\"\n        }\n    ]\n}\n</code></pre> <p>A la hora de indicar cada librer\u00eda introduciremos:</p> <ul> <li>el nombre de la librer\u00eda, compuesta tanto por el creador o \"vendor\", como por el nombre del proyecto. Ejemplos: <code>monolog/monolog</code> o <code>laravel/installer</code>.</li> <li> <p>la versi\u00f3n de cada librer\u00eda. Tenemos diversas opciones para indicarla:</p> <ul> <li>Directamente: 1.4.2</li> <li>Con comodines: 1.*</li> <li>A partir de: &gt;= 2.0.3</li> <li>Sin rotura de cambios: ^1.3.2 // &gt;=1.3.2 &lt;2.0.0</li> </ul> </li> </ul>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#actualizar-librerias","title":"Actualizar librer\u00edas","text":"<p>Podemos definir las dependencias via el archivo <code>composer.json</code> o mediante comandos con el formato <code>composer require vendor/package:version</code>. Por ejemplo, si queremos a\u00f1adir phpUnit como librer\u00eda de desarrollo, haremos:</p> <pre><code>composer require phpunit/phpunit \u2013dev\n</code></pre> <p>Tras a\u00f1adir nuevas librer\u00edas, hemos de actualizar nuestro proyecto:</p> <pre><code>composer update\n</code></pre> <p>Si creamos el archivo <code>composer.json</code> nosotros directamente sin inicializar el repositorio, hemos de instalar las dependencias:</p> <pre><code>composer install\n</code></pre> <p>Al hacer este paso (tanto instalar como actualizar), como ya hemos comentado, se descargan las librer\u00edas en dentro de la carpeta <code>vendor</code>. Es muy importante a\u00f1adir esta carpeta al archivo <code>.gitignore</code> para no subirlas a GitHub.</p> <p>Adem\u00e1s se crea el archivo <code>composer.lock</code>, que almacena la versi\u00f3n exacta que se ha instalado de cada librer\u00eda (este archivo no se toca).</p>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#autoloadphp","title":"<code>autoload.php</code>","text":"<p>Composer crea de forma autom\u00e1tica en <code>vendor/autoload.php</code> el c\u00f3digo para incluir de forma autom\u00e1tica todas las librer\u00edas que tengamos configuradas en <code>composer.json</code>.</p> <p>Para utilizarlo, en la cabecera de nuestro archivos pondremos:</p> <pre><code>&lt;?php\nrequire 'vendor/autoload.php';\n</code></pre> <p>En nuestro caso, de momento s\u00f3lo lo podremos en los archivos donde probamos las clases</p> <p>Si queremos que Composer tambi\u00e9n se encargue de cargar de forma autom\u00e1tica nuestras clases de dominio, dentro del archivo <code>composer.json</code>, definiremos la propiedad <code>autoload</code>:</p> <pre><code>\"autoload\": {\n    \"psr-4\": {\"Dwes\\\\\": \"app/Dwes\"}\n},\n</code></pre> <p>Posteriormente, hemos de volver a generar el autoload de Composer mediante la opci\u00f3n <code>dump-autoload</code> (o <code>du</code>):</p> <pre><code>composer dump-autoload\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/051_Composer.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC501 (AEA). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - Has de introducir el uso de Composer para administrar las dependencias de PHP. Para ello:</p> <ul> <li>Crea un nuevo directorio para el proyecto y navega hasta \u00e9l en la l\u00ednea de comandos.</li> <li>Utiliza Composer para inicializar un nuevo proyecto PHP ejecutando el comando composer init. Sigue las instrucciones para completar la configuraci\u00f3n b\u00e1sica del proyecto.</li> <li>A\u00f1ade una dependencia simple al proyecto. Por ejemplo, puedes utilizar el paquete <code>monolog/monolog</code> para registrar mensajes de registro.</li> <li>Crea un script PHP en el proyecto que utilice la funcionalidad proporcionada por la dependencia agregada.</li> <li>Ejecuta el script PHP y verifica que la dependencia funcione correctamente.</li> </ul> </li> <li> <p>AC502 (AR). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - A ra\u00edz de la actividad AC416, has de realizar la siguiente gesti\u00f3n de dependencias con Composer:</p> <ul> <li>Utiliza un proyecto PHP existente en tu computadora que tenga un archivo composer.json con algunas dependencias predefinidas.</li> <li>Analiza detenidamente el archivo composer.json para comprender las dependencias incluidas en el proyecto.</li> <li>Realiza al menos dos de las siguientes acciones en el proyecto:<ul> <li>Agrega una nueva dependencia al archivo composer.json.</li> <li>Actualiza una dependencia existente a una versi\u00f3n m\u00e1s reciente.</li> <li>Elimina una dependencia del archivo composer.json.</li> </ul> </li> <li>Despu\u00e9s de realizar los cambios, ejecuta composer install para actualizar las dependencias del proyecto seg\u00fan lo modificado en el archivo composer.json.</li> <li>Una vez actualizadas las dependencias, ejecuta pruebas unitarias si est\u00e1n disponibles en el proyecto para asegurarte de que las modificaciones no hayan introducido errores.</li> <li>Documenta los cambios realizados en el archivo composer.json y cualquier problema que hayas encontrado durante el proceso de actualizaci\u00f3n de dependencias.</li> <li>Reflexiona sobre la importancia de utilizar Composer y la gesti\u00f3n adecuada de dependencias en proyectos PHP.</li> </ul> </li> </ul>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html","title":"Monolog","text":"<p>Vamos a probar Composer a\u00f1adiendo la librer\u00eda de Monolog a nuestro proyecto. Se trata de un librer\u00eda para la gesti\u00f3n de logs de nuestras aplicaciones, soportando diferentes niveles (info, warning, etc...), salidas (ficheros, sockets, BBDD, Web Services, email, etc) y formatos (texto plano, HTML, JSON, etc...).</p> <p>Para ello, incluiremos la librer\u00eda en nuestro proyecto con:</p> <pre><code>composer require monolog/monolog\n</code></pre> <p>Monolog 2 requiere al menos PHP 7.2, cumple con el est\u00e1ndar de logging PSR-3, y es la librer\u00eda empleada por Laravel y Symfony para la gesti\u00f3n de logs.</p> <p>Cuando usar un log</p> <ul> <li>Seguir las acciones/movimientos de los usuarios</li> <li>Registrar las transacciones</li> <li>Rastrear los errores de usuario</li> <li>Fallos/avisos a nivel de sistema</li> <li>Interpretar y coleccionar datos para posterior investigaci\u00f3n de patrones</li> </ul>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#niveles","title":"Niveles","text":"<p>A continuaci\u00f3n mostramos los diferentes niveles de menos a m\u00e1s restrictivo:</p> <ul> <li>debug -100: Informaci\u00f3n detallada con prop\u00f3sitos de debug. No usar en entornos de producci\u00f3n.</li> <li>info - 200: Eventos interesantes como el inicio de sesi\u00f3n de usuarios.</li> <li>notice - 250: Eventos normales pero significativos.</li> <li>warning - 300: Ocurrencias excepcionales que no llegan a ser error.</li> <li>error - 400: Errores de ejecuci\u00f3n que permiten continuar con la ejecuci\u00f3n de la aplicaci\u00f3n pero que deben ser monitorizados.</li> <li>critical - 500: Situaciones importantes donde se generan excepciones no esperadas o no hay disponible un componente.</li> <li>alert - 550: Se deben tomar medidas inmediatamente. Ca\u00edda completa de la web, base de datos no disponible, etc... Adem\u00e1s, se suelen enviar mensajes por email.</li> <li>emergency - 600: Es el error m\u00e1s grave e indica que todo el sistema est\u00e1 inutilizable.</li> </ul>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#hola-monolog","title":"Hola Monolog","text":"<p>Por ejemplo, en el archivo <code>pruebaLog.php</code> que colocar\u00edamos en el ra\u00edz, primero incluimos el autoload, importamos las clases a utilizar para finalmente usar los m\u00e9todos de Monolog:</p> <pre><code>&lt;?php\ninclude __DIR__ .\"/vendor/autoload.php\";\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n$log = new Logger(\"MiLogger\");\n$log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Logger::DEBUG));\n\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\");\n$log-&gt;info(\"Esto es un mensaje de INFO\");\n$log-&gt;warning(\"Esto es un mensaje de WARNING\");\n$log-&gt;error(\"Esto es un mensaje de ERROR\");\n$log-&gt;critical(\"Esto es un mensaje de CRITICAL\");\n$log-&gt;alert(\"Esto es un mensaje de ALERT\");\n</code></pre> <p>En todos los m\u00e9todos de registro de mensajes (<code>debug</code>, <code>info</code>, ...), adem\u00e1s del propio mensaje, le podemos pasar informaci\u00f3n como el contenido de alguna variable, usuario de la aplicaci\u00f3n, etc.. como segundo par\u00e1metro dentro de un array, el cual se conoce como array de contexto. Es conveniente hacerlo mediante un array asociativo para facilitar la lectura del log.</p> <pre><code>&lt;?php\n$log-&gt;warning(\"Producto no encontrado\", [$producto]);\n$log-&gt;warning(\"Producto no encontrado\", [\"datos\" =&gt; $producto]);\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#funcionamiento","title":"Funcionamiento","text":"<p>Cada instancia <code>Logger</code> tiene un nombre de canal y una pila de manejadores (handler). Cada mensaje que mandamos al log atraviesa la pila de manejadores, y cada uno decide si debe registrar la informaci\u00f3n, y si se da el caso, finalizar la propagaci\u00f3n. Por ejemplo, un <code>StreamHandler</code> en el fondo de la pila que lo escriba todo en disco, y en el tope a\u00f1ade un <code>MailHandler</code> que env\u00ede un mail s\u00f3lo cuando haya un error.</p>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#manejadores","title":"Manejadores","text":"<p>Cada manejador tambi\u00e9n tiene un formateador (<code>Formatter</code>). Si no se indica ninguno, se le asigna uno por defecto. El \u00faltimo manejador insertado ser\u00e1 el primero en ejecutarse. Luego se van ejecutando conforme a la pila.</p> <p>Los manejadores m\u00e1s utilizados son:</p> <ul> <li><code>StreamHandler(ruta, nivel)</code></li> <li><code>RotatingFileHandler(ruta, maxFiles, nivel)</code></li> <li><code>NativeMailerHandler(para, asunto, desde, nivel)</code></li> <li><code>FirePHPHandler(nivel)</code></li> </ul> <p>Si queremos que los mensajes de la aplicaci\u00f3n salgan por el log del servidor,  en nuestro caso el archivo <code>error.log</code> de Apache utilizaremos como ruta la salida de error:</p> <pre><code>&lt;?php\n// error.log\n$log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Logger::DEBUG));\n</code></pre> <p>FirePHP</p> <p>Por ejemplo, mediante <code>FirePHPHandler</code>, podemos utilizar <code>FirePHP</code>, la cual es una herramienta para hacer debug en la consola de Firefox. Tras instalar la extensi\u00f3n en Firefox, habilitar las opciones y configurar el Handler, podemos ver los mensajes coloreados con sus datos:</p> <pre><code>&lt;?php\n$log = new Logger(\"MiFirePHPLogger\");\n$log-&gt;pushHandler(new FirePHPHandler(Logger::INFO));\n\n$datos = [\"real\" =&gt; \"Bruce Wayne\", \"personaje\" =&gt; \"Batman\"];\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\", $datos);\n$log-&gt;info(\"Esto es un mensaje de INFO\", $datos);\n$log-&gt;warning(\"Esto es un mensaje de WARNING\", $datos);\n// ...\n</code></pre> <p> Ejemplo de uso de FirePHP </p>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#canales","title":"Canales","text":"<p>Se les asigna al crear el <code>Logger</code>. En grandes aplicaciones, se crea un canal por cada subsistema: ventas, contabilidad, almac\u00e9n. No es una buena pr\u00e1ctica usar el nombre de la clase como canal, esto se hace con un procesador.</p> <p>Para su uso, es recomiendo asignar el log a una propiedad privada a Logger, y posteriormente, en el constructor de la clase, asignar el canal, manejadores y formato.</p> <pre><code>&lt;?php\n$this-&gt;log = new Logger(\"MiApp\");\n$this-&gt;log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Logger::DEBUG));\n$this-&gt;log-&gt;pushHandler(new FirePHPHandler(Logger::DEBUG));\n</code></pre> <p>Y dentro de los m\u00e9todos para escribir en el log:</p> <pre><code>&lt;?php\n$this-&gt;log-&gt;warning(\"Producto no encontrado\", [$producto]);\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#procesadores","title":"Procesadores","text":"<p>Los procesadores permiten a\u00f1adir informaci\u00f3n a los mensajes. Para ello, se apilan despu\u00e9s de cada manejador mediante el m\u00e9todo <code>pushProcessor($procesador)</code>.</p> <p>Algunos procesadores conocidos son <code>IntrospectionProcessor</code> (muestran la linea, fichero, clase y metodo desde el que se invoca el log), <code>WebProcessor</code> (a\u00f1ade la URI, m\u00e9todo e IP) o <code>GitProcessor</code> (a\u00f1ade la rama y el commit).</p> PHPConsola en formato texto <pre><code>&lt;?php\n$log = new Logger(\"MiLogger\");\n$log-&gt;pushHandler(new RotatingFileHandler(\"logs/milog.log\", 0, Logger::DEBUG));\n$log-&gt;pushProcessor(new IntrospectionProcessor());\n$log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Logger::WARNING));\n// no usa Introspection pq lo hemos apilado despu\u00e9s, le asigno otro\n$log-&gt;pushProcessor(new WebProcessor());\n</code></pre> <pre><code>[2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":12,\"class\":null,\"function\":null}\n[2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":13,\"class\":null,\"function\":null}\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#formateadores","title":"Formateadores","text":"<p>Se asocian a los manejadores con <code>setFormatter</code>. Los formateadores m\u00e1s utilizados son <code>LineFormatter</code>, <code>HtmlFormatter</code> o <code>JsonFormatter</code>.</p> PHPConsola en JSON <pre><code>&lt;?php\n$log = new Logger(\"MiLogger\");\n$rfh = new RotatingFileHandler(\"logs/milog.log\", Logger::DEBUG);\n$rfh-&gt;setFormatter(new JsonFormatter());\n$log-&gt;pushHandler($rfh);\n</code></pre> <pre><code>{\"message\":\"Esto es un mensaje de DEBUG\",\"context\":{},\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747211+01:00\",\"extra\":{}}\n{\"message\":\"Esto es un mensaje de INFO\",\"context\":{},\"level\":200,\"level_name\":\"INFO\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747538+01:00\",\"extra\":{}}\n</code></pre> <p>M\u00e1s informaci\u00f3n</p> <p>M\u00e1s informaci\u00f3n sobre manejadores, formateadores y procesadores en https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md</p>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#uso-de-factorias","title":"Uso de Factor\u00edas","text":"<p>En vez de instanciar un log en cada clase, es conveniente crear una factor\u00eda (por ejemplo, siguiendo la idea del patr\u00f3n de dise\u00f1o Factory Method).</p> <p>Para el siguiente ejemplo, vamos a suponer que creamos la factor\u00eda en el namespace <code>Dwes\\Ejemplos\\Util</code>.</p> <pre><code>&lt;?php\nnamespace Dwes\\Ejemplos\\Util\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\nclass LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : Logger {\n        $log = new Logger($canal);\n        $log-&gt;pushHandler(new StreamHandler(\"logs/miApp.log\", Logger::DEBUG));\n\n        return $log;\n    }\n}\n</code></pre> <p>Si en vez de devolver un <code>Monolog\\Logger</code> utilizamos el interfaz de PSR, si en el futuro cambiamos la implementaci\u00f3n del log, no tendremos que modificar nuestro c\u00f3digo. As\u00ed pues, la factor\u00eda ahora devolver\u00e1 <code>Psr\\Log\\LoggerInterface</code>:</p> <pre><code>&lt;?php\nnamespace Dwes\\Ejemplos\\Util\n\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\nuse Psr\\Log\\LoggerInterface;\n\nclass LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : LoggerInterface {\n        $log = new Logger($canal);\n        $log-&gt;pushHandler(new StreamHandler(\"log/miApp.log\", Logger::DEBUG));\n\n        return $log;\n    }\n}\n</code></pre> <p>Finalmente, para utilizar la factor\u00eda, s\u00f3lo cambiamos el c\u00f3digo que ten\u00edamos en el constructor de las clases que usan el log, quedando algo asi:</p> <pre><code>&lt;?php\n\nnamespace Dwes\\Ejemplos\\Model;\n\nuse Dwes\\Ejemplos\\Util\\LogFactory;\nuse Monolog\\Logger;\n\nclass Cliente {\n\n    private $codigo; \n\n    private Logger $log;\n\n    function __construct($codigo){ \n        $this-&gt;codigo=$codigo; \n\n        $this-&gt;log = LogFactory::getLogger();\n    }\n\n    /// ... resto del c\u00f3digo\n}\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/052_Monolog.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC503 (AEA). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - Crea un nuevo proyecto con Composer llamado <code>Monologos</code>:</p> <ul> <li>Incluye como librer\u00eda la \u00faltima versi\u00f3n de Monolog.</li> <li>Crea la clase <code>Dwes\\Monologos\\HolaMonolog</code>.</li> <li>Define una propiedad privada nombrada <code>miLog</code> para guardar el log.</li> <li>Define en el constructor un <code>RotatingFileHandler</code> que escriba en la carpeta <code>logs</code> del proyecto, y que almacene los mensajes a partir de debug.</li> <li>Crea los m\u00e9todos <code>saludar</code> y <code>despedir</code> que hagan un log de tipo info con la acci\u00f3n correspondiente.</li> </ul> </li> <li> <p>AC504 (AR). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - Siguiendo con el proyecto <code>Monologos</code>:</p> <ul> <li>Crea un archivo llamado <code>inicio.php</code> que permita probar <code>HolaMonolog</code>.</li> <li>Comprueba que los mensajes aparecen en el log.</li> <li>Cambia el nivel para que el manejador solo muestre los mensajes a partir de warning.</li> <li>Vuelve a ejectuar <code>inicio.php</code> y comprueba el archivo de log.</li> </ul> </li> </ul>"},{"location":"uutt/05_HerramientasWeb/053_phpDocumentor.html","title":"Documentaci\u00f3n con phpDocumentor","text":"<p>phpDocumentor es la herramienta de facto para documentar el c\u00f3digo PHP. Es similar en prop\u00f3sito y funcionamiento a Javadoc.</p> <p>As\u00ed pues, es un herramienta que facilita la documentaci\u00f3n del c\u00f3digo PHP, creando un sitio web con el API de la aplicaci\u00f3n.</p> <p>Se basa en el uso de anotaciones sobre los <code>docblocks</code>. Para ponerlo en marcha, en nuestro caso nos decantaremos por utilizar la imagen que ya existe de Docker.</p>"},{"location":"uutt/05_HerramientasWeb/053_phpDocumentor.html#instalacion-como-binario","title":"Instalaci\u00f3n como binario","text":"<p>Otra opci\u00f3n es seguir los pasos que recomienda la documentaci\u00f3n oficial para instalarlo como un ejecutable, que son descargar el archivo <code>phpDocumentor.phar</code> y darles permisos de ejecuci\u00f3n:</p> <pre><code>wget https://phpdoc.org/phpDocumentor.phar\nchmod +x phpDocumentor.phar\nmv phpDocumentor.phar /usr/local/bin/phpdoc\nphpdoc --version\n</code></pre> <p>Una vez instalado, desde el ra\u00edz del proyecto, suponiendo que tenemos nuestro c\u00f3digo dentro de <code>app</code> y que queremos la documentaci\u00f3n dentro de <code>docs/api</code> ejecutamos:</p> <pre><code>phpdoc -d ./app -t docs/api\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/053_phpDocumentor.html#uso-en-docker","title":"Uso en Docker","text":"<p>En el caso de usar Docker, usaremos el siguiente comando para ejecutarlo (crea el contenedor, ejecuta el comando que le pidamos, y autom\u00e1ticamente lo borra):</p> <pre><code>docker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3\n</code></pre> <p>A dicho comando, le adjuntaremos los diferentes par\u00e1metros que admite phpDocumentor, por ejemplo:</p> <pre><code># Muestra la versi\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 --version\n# Mediante -d se indica el origen a parsear\n# Mediante -t se indica el destino donde generar la documentaci\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 -d ./src/app -t ./docs/api\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/053_phpDocumentor.html#docblock","title":"DocBlock","text":"<p>Un docblock es el bloque de c\u00f3digo que se coloca encima de un recurso. Su formato es:</p> <pre><code>&lt;?php\n/**\n* *Sumario*, una sola l\u00ednea\n*\n* *Descripci\u00f3n* que puede utilizar varias l\u00edneas\n* y que ofrece detalles del elemento o referencias\n* para ampliar la informaci\u00f3n\n*\n* @param string $miArgumento con una *descripci\u00f3n* del argumento\n* que puede usar varias l\u00edneas.\n*\n* @return void\n*/\nfunction miFuncion(tipo $miArgumento)\n{\n}\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/053_phpDocumentor.html#documentando-el-codigo","title":"Documentando el c\u00f3digo","text":"<p>En todos los elementos, ademas del sumario y/o descripci\u00f3n, pondremos:</p> <ul> <li>En las clases:<ul> <li><code>@author</code> nombre  <li><code>@package</code> ruta del namespace</li> <li>En las propiedades:<ul> <li><code>@var</code> tipo descripci\u00f3n</li> </ul> </li> <li>En los m\u00e9todos:<ul> <li><code>@param</code> tipo $nombre descripci\u00f3n</li> <li><code>@throws</code> ClaseException descripci\u00f3n</li> <li><code>@return</code> tipo descripci\u00f3n</li> </ul> </li> <p>Ve\u00e1moslo con un ejemplo. Supongamos que tenemos una clase que representa un cliente:</p> <pre><code>&lt;?php\n/**\n* Clase que representa un cliente\n* \n* El cliente se encarga de almacenar los soportes que tiene alquilado,\n* de manera que podemos alquilar y devolver productos mediante las operaciones\n* hom\u00f3nimas.\n* \n* @package Dwes\\Videoclub\\Model\n* @author Aitor Medrano &lt;a.medrano@edu.gva.es&gt;\n*/\nclass Cliente {\n\n    public string $nombre; \n    private string $numero;\n\n    /**\n    * Colecci\u00f3n de soportes alquilados\n    * @var array&lt;Soporte&gt; \n    */\n    private $soportesAlquilados[];\n\n    /**\n    * Comprueba si el soporte recibido ya lo tiene alquilado el cliente\n    * @param Soporte $soporte Soporte a comprobar\n    * @return bool true si lo tiene alquilado\n    */\n    public function tieneAlquilado(Soporte $soporte) : bool { \n        // ...\n    }\n</code></pre> <p>Si generamos la documentaci\u00f3n y abrimos con un navegador el archivo <code>docs/api/index.html</code> podremos navegar hasta la clase `Cliente:</p> phpDocumentor de Cliente"},{"location":"uutt/05_HerramientasWeb/053_phpDocumentor.html#actividades","title":"Actividades","text":"<ul> <li>AC505 (AEA). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - Comprueba que en el contenedor de Docker funciona phpDocumentor. Ejecuta phpdoc sobre tu proyecto Monolog y comprueba el api que se crea. Comenta tanto la clase como los m\u00e9todos, y posteriormente, vuelve a ejecutar phpdoc.</li> <li>PR501 (SA). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - Tu CTO te solicita que documentes el proyecto de la Situaci\u00f3n de Aprendizaje, y genera la documentaci\u00f3n.</li> </ul>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html","title":"Pruebas con PHPUnit","text":"<p>El curso pasado, dentro del m\u00f3dulo de Entornos de Desarrollo, estudiamos la importancia de la realizaci\u00f3n de pruebas, as\u00ed como las pruebas unitarias mediante JUnit.</p> <p>A d\u00eda de hoy es de gran importancia seguir una buena metodolog\u00eda de pruebas, siendo el desarrollo dirigido por las pruebas (Test Driven Development / TDD) uno de los enfoques m\u00e1s empleados, el cual consiste en:</p> <ol> <li>Escribir el test, y como no hay c\u00f3digo implementado, la prueba falle (rojo).</li> <li>Escribir el c\u00f3digo de aplicaci\u00f3n para que la prueba funcione (verde).</li> <li>Refactorizar el c\u00f3digo de la aplicaci\u00f3n con la ayuda de la prueba para comprobar que no rompemos nada (refactor).</li> </ol> <p>En el caso de PHP, la herramienta que se utiliza es PHPUnit (https://phpunit.de/), que como su nombre indica, est\u00e1 basada en JUnit. La versi\u00f3n actual es la 9.0</p> <p>Se recomienda consultar su documentaci\u00f3n en https://phpunit.readthedocs.io/es/latest/index.html.</p>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#puesta-en-marcha","title":"Puesta en marcha","text":"<p>Vamos a colocar todas las pruebas en una carpeta <code>tests</code> en el ra\u00edz de nuestro proyecto.</p> <p>En el archivo <code>composer.json</code>, a\u00f1adimos:</p> <pre><code>\"require-dev\": {\n    \"phpunit/phpunit\": \"^9\"\n},\n\"scripts\": {\n    \"test\": \"phpunit --testdox --colors tests\"\n}\n</code></pre> <p>Si quisi\u00e9ramos a\u00f1adir la librer\u00eda desde un comando del terminal, tambi\u00e9n podr\u00edamos ejecutar:</p> <pre><code>composer require --dev phpunit/phpunit ^9\n</code></pre> <p>Librer\u00edas de desarrollo</p> <p>Las librer\u00edas que se colocan en <code>require-dev</code> son las de desarrollo y testing, de manera que no se instalar\u00e1n en un entorno de producci\u00f3n.</p> <p>Como hemos creado un script, podemos lanzar las pruebas mediante:</p> <pre><code>composer test\n</code></pre> <p>Vasmos a realizar nuestra primera prueba:</p> <pre><code>&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass PilaTest extends TestCase\n{\n    public function testPushAndPop()\n    {\n        $pila = [];\n        $this-&gt;assertSame(0, count($pila));\n\n        array_push($pila, 'batman');\n        $this-&gt;assertSame('batman', $pila[count($pila)-1]);\n        $this-&gt;assertSame(1, count($pila));\n\n        $this-&gt;assertSame('batman', array_pop($pila));\n        $this-&gt;assertSame(0, count($pila));\n    }\n}\n</code></pre> <p>Tenemos diferentes formas de ejecutar una prueba:</p> <pre><code>./vendor/bin/phpunit tests/PilaTest.php\n./vendor/bin/phpunit tests\n./vendor/bin/phpunit --testdox tests\n./vendor/bin/phpunit --testdox --colors tests\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#disenando-pruebas","title":"Dise\u00f1ando pruebas","text":"<p>Tal como hemos visto en el ejemplo, la clase de prueba debe heredar de <code>TestCase</code>, y el nombre de la clase debe acabar en <code>Test</code>, de ah\u00ed que hayamos llamado la clase de prueba como <code>PilaTest</code>.</p> <p>Una prueba implica un m\u00e9todo de prueba (p\u00fablico) por cada funcionalidad a probar. Cada un de los m\u00e9todos se les asocia un caso de prueba.</p> <p>Los m\u00e9todos deben nombrarse con el prefijo <code>test</code>, por ejemplo, <code>testPushAndPop</code>. Es muy importante que el nombre sea muy claro y descriptivo del prop\u00f3sito de la prueba. (camelCase).</p> <p>En los casos de prueba prepararemos varias aserciones para toda la casu\u00edstica: rangos de valores, tipos de datos, excepciones, etc...</p>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#aserciones","title":"Aserciones","text":"<p>Las aserciones permiten comprobar el resultado de los m\u00e9todos que queremos probar. Las aserciones esperan que el predicado siempre sea verdadero.</p> <p>PHPUnit ofrece las siguiente aserciones:</p> <ul> <li><code>assertTrue</code> / <code>assertFalse</code>: Comprueba que la condici\u00f3n dada sea evaluada como true / false</li> <li><code>assertEquals</code> / <code>assertSame</code>: Comprueba que dos variables sean iguales</li> <li><code>assertNotEquals</code> / <code>assertNotSame</code>: Comprueba que dos variables NO sean iguales<ul> <li><code>Same</code> \u2192 comprueba los tipos. Si no coinciden los tipos y los valores, la aserci\u00f3n fallar\u00e1</li> <li><code>Equals</code> \u2192 sin comprobaci\u00f3n estricta</li> </ul> </li> <li><code>assertArrayHasKey</code> / <code>assertArrayNotHasKey</code>: Comprueba que un array posea un key determinado / o NO lo posea</li> <li><code>assertArraySubset</code>: Comprueba que un array posea otro array como subset del mismo</li> <li><code>assertAttributeContains</code> / <code>assertAttributeNotContains</code>: Comprueba que un atributo de una clase contenga una variable determinada / o NO contenga una variable determinada</li> <li><code>assertAttributeEquals</code>: Comprueba que un atributo de una clase sea igual a una variable determinada.</li> </ul>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#comparando-la-salida","title":"Comparando la salida","text":"<p>Si los m\u00e9todos a probar generan contenido mediante <code>echo</code> o una instrucci\u00f3n similar, disponemos de las siguiente expectativas:</p> <ul> <li><code>expectOutputString(salidaEsperada)</code></li> <li><code>expectOutputRegex(expresionRegularEsperada)</code></li> </ul> <p>Las expectativas difieren de las aserciones que informan del resultado que se espera antes de invocar al m\u00e9todo. Tras definir la expectativa, se invoca al m\u00e9todo que realiza el <code>echo</code>/<code>print</code>.</p> <pre><code>&lt;?php\nnamespace Dwes\\Videoclub\\Model;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Dwes\\Videoclub\\Model\\CintaVideo;\n\nclass CintaVideoTest extends TestCase {\n    public function testConstructor()\n    {\n        $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n        $this-&gt;assertSame( $cinta-&gt;getNumero(), 23);\n    }\n\n    public function testMuestraResumen()\n    {\n        $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n        $resultado = \"&lt;br&gt;Pel\u00edcula en VHS:\";\n        $resultado .= \"&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 (IVA no incluido)\";\n        $resultado .= \"&lt;br&gt;Duraci\u00f3n: 107 minutos\";\n        // definimos la expectativa\n        $this-&gt;expectOutputString($resultado);\n        // invocamos al m\u00e9todo que har\u00e1 echo\n        $cinta-&gt;muestraResumen();\n    }\n}\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#proveedores-de-datos","title":"Proveedores de datos","text":"<p>Cuando tenemos pruebas que solo cambian respecto a los datos de entrada y de salida, es \u00fatil utilizar proveedores de datos.</p> <p>Se declaran en el docblock mediante <code>@dataProvider nombreMetodo</code>, donde se indica el nombre de un m\u00e9todo p\u00fablico que devuelve un array de arrays, donde cada elemento es un caso de prueba.</p> <p>La clase de prueba recibe como par\u00e1metros los datos a probar y el resultado de la prueba como \u00faltimo par\u00e1metro.</p> <p>El siguiente ejemplo comprueba con diferentes datos el funcionamiento de <code>muestraResumen</code>:</p> <pre><code>&lt;?php\n/**\n * @dataProvider cintasProvider\n */\npublic function testMuestraResumenConProvider($titulo, $id, $precio, $duracion, $esperado)\n{\n    $cinta = new CintaVideo($titulo, $id, $precio, $duracion);\n    $this-&gt;expectOutputString($esperado);\n    $cinta-&gt;muestraResumen();\n}\n\npublic function cintasProvider() {\n    return [\n        \"cazafantasmas\" =&gt; [\"Los cazafantasmas\", 23, 3.5, 107, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 \u20ac(IVA no incluido)&lt;br&gt;Duraci\u00f3n: 107 minutos\"],\n        \"superman\" =&gt; [\"Superman\", 24, 3, 188, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Superman&lt;br&gt;3 \u20ac (IVA no incluido)&lt;br&gt;Duraci\u00f3n: 188 minutos\"],\n    ];\n}\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#probando-excepciones","title":"Probando excepciones","text":"<p>Las pruebas adem\u00e1s de comprobar que las clases funcionan como se espera,  han de cubrir todos los casos posibles. As\u00ed pues, debemos poder hacer pruebas que esperen que se lance una excepci\u00f3n (y que el mensaje contenga cierta informaci\u00f3n):</p> <p>Para ello, se utilizan las siguiente expectativas:</p> <ul> <li><code>expectException(Excepcion::class)</code></li> <li><code>expectExceptionCode(codigoExcepcion)</code></li> <li><code>expectExceptionMessage(mensaje)</code></li> </ul> <p>Del mismo modo que antes, primero se pone la expectativa, y luego se provoca que se lance la excepci\u00f3n:</p> <pre><code>&lt;?php\npublic function testAlquilarCupoLleno() {\n    $soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n    $soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);\n    $soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\"); \n    $soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\"); \n\n    $cliente1 = new Cliente(\"Bruce Wayne\", 23); \n    $cliente1-&gt;alquilar($soporte1); \n    $cliente1-&gt;alquilar($soporte2); \n    $cliente1-&gt;alquilar($soporte3); \n\n    $this-&gt;expectException(CupoSuperadoException::class);\n    $cliente1-&gt;alquilar($soporte4); \n}\n</code></pre>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#cobertura-de-codigo","title":"Cobertura de c\u00f3digo","text":"<p>La cobertura de pruebas indica la cantidad de c\u00f3digo que las pruebas cubren, siendo recomendable que cubran entre el 95 y el 100%.</p> <p>Una de las m\u00e9tricas asociadas a los informes de cobertura es el CRAP (An\u00e1lisis y Predicciones sobre el Riesgo en Cambios), el cual mide la cantidad de esfuerzo, dolor y tiempo requerido para mantener una porci\u00f3n de c\u00f3digo. Esta m\u00e9trica debe mantenerse con un valor inferior a 5.</p> <p>Requisito xdebug</p> <p>Aunque ya viene instalado dentro de PHPUnit, para que funcione la cobertura del c\u00f3digo, es necesario que el c\u00f3digo PHP se ejecute con XDEBUG, y e indicarle a Apache que as\u00ed es (colocando en el archivo de configuraci\u00f3n <code>php.ini</code>la directiva <code>xdebug.mode=coverage</code>).</p> <p>A\u00f1adimos en <code>composer.json</code> un nuevo script:</p> <pre><code>\"coverage\": \"phpunit --coverage-html coverage --coverage-filter app tests\"\n</code></pre> <p>Y posteriormente ejecutamos</p> <pre><code>composer coverage\n</code></pre> <p>Por ejemplo, si accedemos a la clase <code>CintaVideo</code> con la prueba que hab\u00edamos realizado anteriormente, podemos observar la cobertura que tiene al 100% y que su CRAP es 2.</p> Informe de cobertura de la clase CintaVideo <p>Temas pendientes</p> <ul> <li>Dependencia entre casos de prueba con el atributo <code>@depends</code></li> <li>Completamente configurable mediante el archivo <code>phpxml.xml</code>: https://phpunit.readthedocs.io/es/latest/configuration.html</li> <li>Preparando las pruebas con <code>setUpBeforeClass()</code> y <code>tearDownAfterClass()</code></li> <li>Objetos y pruebas Mock (dobles) con <code>createMock()</code></li> </ul>"},{"location":"uutt/05_HerramientasWeb/054_PHPUnit.html#actividades","title":"Actividades","text":"<ul> <li>AC506 (AEA). (RA4 RA5 / CE4f CE5h / IC1 / 3p) - A partir de la clase <code>HolaMonolog</code>, modifica los m\u00e9todos para que adem\u00e1s de escribir en en log, devuelvan el saludo como una cadena. Crea la clase <code>HolaMonologTest</code> y a\u00f1ade diferentes casos de prueba para comprobar que los saludos y despedidas son acordes a la hora con la que se crea la clase.</li> </ul>"},{"location":"uutt/05_HerramientasWeb/055_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Unit Testing con PHPUnit \u2014 Parte 1, de Emiliano Zublena.</li> <li>Manual: PHP Monolog</li> </ul>"},{"location":"uutt/05_HerramientasWeb/055_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Tutorial de Composer</li> </ul>"},{"location":"uutt/05_HerramientasWeb/056_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 es Composer en el contexto de desarrollo PHP?<ol> <li>Un compilador de c\u00f3digo PHP.</li> <li>Un gestor de librer\u00edas y dependencias para PHP.</li> <li>Una herramienta para la integraci\u00f3n continua.</li> <li>Un framework de desarrollo web.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Un gestor de librer\u00edas y dependencias para PHP.</p> <ol> <li>\u00bfCu\u00e1l es el comando para iniciar un nuevo proyecto con Composer?<ol> <li>composer start</li> <li>composer create-project.</li> <li>composer init.</li> <li>composer new.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. composer init.</p> <ol> <li>\u00bfQu\u00e9 es Monolog en el contexto del desarrollo con PHP?<ol> <li>Un framework para desarrollo web.</li> <li>Una librer\u00eda para la gesti\u00f3n de logs.</li> <li>Un gestor de bases de datos.</li> <li>Un compilador de PHP.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Una librer\u00eda para la gesti\u00f3n de logs.</p> <ol> <li>\u00bfC\u00f3mo se a\u00f1adir\u00eda un <code>FirePHPHandler</code> a un logger en Monolog?<ol> <li><code>$logger-&gt;addHandler(new FirePHPHandler());</code></li> <li><code>$logger-&gt;pushHandler(new FirePHPHandler());</code></li> <li><code>$logger-&gt;setHandler('FirePHP');</code></li> <li><code>$logger-&gt;enableFirePHP();</code></li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. <code>$logger-&gt;pushHandler(new FirePHPHandler());</code></p> <ol> <li>\u00bfC\u00f3mo se marca un m\u00e9todo de prueba en PHPUnit?<ol> <li>Debe comenzar con la palabra <code>test</code>.</li> <li>Debe terminar con la palabra <code>Test</code>.</li> <li>Debe ser declarado como privado.</li> <li>Debe retornar un valor booleano.</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: a. Debe comenzar con la palabra <code>test</code>.</p>"},{"location":"uutt/05_HerramientasWeb/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/05_HerramientasWeb/ProgramacionAula.html#resultados-de-aprendizaje","title":"Resultados de aprendizaje","text":"<ul> <li> <p> RA4. Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>f. Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> </li> <li> <p> RA5. Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>h. Se ha probado y documentado el c\u00f3digo.</li> </ul> </li> </ul>"},{"location":"uutt/05_HerramientasWeb/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 05 01 07/11/2024 <p>Composer</p> <ul> <li>Instalaci\u00f3n</li> <li>Primeros pasos</li> <li>Actualizar librer\u00edas y autoload.php</li> </ul> <ul> <li>AC501. Composer para administrar las dependencias de PHP</li> <li>AC502. Composer en AC416</li> </ul> 02 11/11/2024 <p>Monolog</p> <ul> <li>Niveles</li> <li>Funcionamiento</li> <li>Procesadores</li> <li>Formateadores</li> <li>Factor\u00edas</li> </ul> <ul> <li>AC503. Crea un nuevo proyecto con Composer llamado Monologos.</li> <li>AC504. Ampliando AC503.</li> </ul> 03 12/11/2024 <p>phpDocumentor</p> <ul> <li>Instalaci\u00f3n</li> <li>DockBlock</li> <li>Documentando el c\u00f3digo</li> </ul> <ul> <li>AC505. Comprobaci\u00f3n y uso de phpDocumento con Docker.</li> <li>PR501. Documentar la SA.</li> </ul> 04 13/11/2024 <p>PHPUnit</p> <ul> <li>Puesta en marcha</li> <li>Dise\u00f1o de pruebas</li> <li>Aserciones</li> <li>Comparando la salida</li> <li>Proveedores de datos</li> <li>Probando excepciones</li> <li>Cobertura de c\u00f3digo</li> </ul> <ul> <li>AC506. Modificar programa para que adem\u00e1s de escribir en en log, devuelva el saludo como una cadena.</li> </ul>"},{"location":"uutt/05_HerramientasWeb/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 05. Herramientas programaci\u00f3n web.</p> <p>Horas</p> <p>4 Sesiones - 8H</p> <p>Resultados de Aprendizaje</p> <p>RA4. Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.RA5. Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</p> <p>Preconocimiento</p> <p>Conocimientos b\u00e1sicos de PHP.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar m\u00e9todos de documentaci\u00f3n.</li> <li>OD2: Realizar pruebas unitarias. </li> <li>OD3: Interpretar logs.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Configuraci\u00f3n de Composer</li> <li>CES2. Utilizaci\u00f3n de Monolog</li> <li>CES3. Realizaci\u00f3n de documentaci\u00f3n con phpDocumentor</li> <li>CES4. Dise\u00f1o de pruebas unitarias</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC501. Composer para administrar las dependencias de PHP.</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>AC503. Crea un nuevo proyecto con Composer llamado Monologos.</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>AC505. Comprobaci\u00f3n y uso de phpDocumento con Docker.</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>AC506. Modificar programa para que adem\u00e1s de escribir en en log, devuelva el saludo como una cadena..</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC502. Composer en AC416.</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>AC504. Ampliando AC503.</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR501. Documentar la SA.</p> <p>CE4f, CE5h</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE4f, CE5h</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/06_AccesoDatos/0610_Ficheros.html","title":"Acceso a ficheros","text":"<p>Gracias a la funci\u00f3n <code>fopen()</code> desde PHP podemos abrir archivos que se encuentren en nuestros servidor o una URL.</p> <p>A esta funci\u00f3n hay que pasarle 2 par\u00e1metros; el nombre del archivo que queremos abrir y el modo en el que se abrir\u00e1</p> <pre><code>$fp = fopen(\"miarchivo.txt\", \"r\");\n</code></pre> <p>Muchas veces no podemos abrir el archivo porque \u00e9ste no se encuentra o no tenemos acceso a \u00e9l, por eso es recomendable comprobar que podemos hacerlo</p> <pre><code>if (!$fp = fopen(\"miarchivo.txt\", \"r\")){\n    echo \"No se ha podido abrir el archivo\";\n}\n</code></pre>"},{"location":"uutt/06_AccesoDatos/0610_Ficheros.html#modos-de-apertura-de-ficheros","title":"Modos de apertura de ficheros","text":"<ul> <li><code>r</code>:  Modo lectura. Puntero al principio del archivo.</li> <li><code>r+</code>: Apertura para lectura y escritura. Puntero al principio del archivo</li> <li><code>w</code>: Apertura para escritura. Puntero al principio del archivo y lo sobrescribe. Si no existe se intenta crear.</li> <li><code>w+</code>: Apertura para lectura y escritura. Puntero al principio del archivo y lo sobrescribe. Si no existe se intenta crear.</li> <li><code>a</code>: Apertura para escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>a+</code>: Apertura para lectura y escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>x</code>: Creaci\u00f3n y apertura para s\u00f3lo escritura. Puntero al principio del archivo. Si el archivo ya existe dar\u00e1 error E_WARNING. Si no existe se intenta crear.</li> <li><code>x+</code>: Creaci\u00f3n y apertura para lectura y escritura. Mismo comportamiento que x.</li> <li><code>c</code>: Apertura para escritura. Si no existe se crea. Si existe no se sobrescribe ni da ning\u00fan error. Puntero al principio del archivo.</li> <li><code>c+</code>: Apertura para lectura y escritura. Mismo comportamiento que C.</li> <li><code>b</code>: Cuando se trabaja con archivos binarios como jpg, pdf, png y dem\u00e1s. Se suele colocar al final del modo, es decir rb, r+b, x+b, wb...</li> </ul>"},{"location":"uutt/06_AccesoDatos/0610_Ficheros.html#operaciones-con-archivos","title":"Operaciones con archivos","text":"<p>Para poder leer un archivo necesitamos usar la funci\u00f3n <code>fread()</code> de PHP</p> <pre><code>//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Abriendo un archivo y leyendo su contenido \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$fp = fopen($file, \"r\");\n\n// filesize() nos devuelve el tama\u00f1o del archivo en cuesti\u00f3n\n$contents = fread($fp, filesize($file));\n\n// Cerramos la conexi\u00f3n con el archivo\nfclose();\n</code></pre> <p>Si lo que queremos es escribir en un archivo, deberemos hacer uso de la funci\u00f3n <code>fwrite()</code></p> <pre><code>//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Escribiendo en un archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$texto = \"Hola que tal\";\n\n$fp = fopen($file, \"w\");\n\nfwrite($fp, $texto);\nfclose($fp);\n</code></pre>"},{"location":"uutt/06_AccesoDatos/0610_Ficheros.html#informacion-de-un-fichero","title":"Informaci\u00f3n de un fichero","text":"<p>Con PHP y su m\u00e9todo <code>stat()</code> podemos obtener informaci\u00f3n sobre los archivos que le indiquemos. Este m\u00e9todo devuelve hasta un total de 12 elementos con informaci\u00f3n acerca de nuestro archivo.</p> <pre><code>0   dev         n\u00famero de dispositivo\n1   ino         n\u00famero de i-nodo\n2   mode        modo de protecci\u00f3n del i-nodo\n3   nlink       n\u00famero de enlaces\n4   uid         ID de usuario del propietario\n5   gid         ID de grupo del propietario\n6   rdev        tipo de dispositivo, si es un dispositivo i-nodo\n7   size        tama\u00f1o en bytes\n8   atime       momento del \u00faltimo acceso (tiempo Unix)\n9   mtime       momento de la \u00faltima modificaci\u00f3n (tiempo Unix)\n10  ctime       momento de la \u00faltima modificaci\u00f3n del i-nodo (tiempo Unix)\n11  blksize     tama\u00f1o del bloque E/S del sistema de ficheros\n12  blocks      n\u00famero de bloques de 512 bytes asignados\n</code></pre> <p>Unos ejemplos...</p> <pre><code>&lt;?php\n\n//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Informaci\u00f3n del archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\";\n\n$fp = fopen($file, \"w\");\nfwrite($fp, $texto);\n\n$datos = stat($file);\n\necho $datos[3] . \"&lt;br&gt;\"; // N\u00famero de enlaces, 1\necho $datos[7] . \"&lt;br&gt;\"; // Tama\u00f1o en bytes, 85\necho $datos[8] . \"&lt;br&gt;\"; // Momento de \u00faltimo acceso, 1444138104\necho $datos[9] . \"&lt;br&gt;\"; // Momento de \u00faltima modificaci\u00f3n, 1444138251\n\n?&gt;\n</code></pre> <p>Echa un vistazo a las funciones de directorios que tiene PHP, es muy interesante.</p>"},{"location":"uutt/06_AccesoDatos/0610_Ficheros.html#archivos-pdf","title":"Archivos PDF","text":"<p>Con PHP podemos manejar todo tipo de archivos como ya hemos visto pero, \u00bfqu\u00e9 pasa si queremos generar ficheros PDF con datos sacados de una base de datos?</p> <p>Gracias a una clase escrita en PHP, podemos generar archivos PDF sin necesidad de instalar librer\u00edas adicionales en nuestro servidor.</p> <p>Para ello, como tenemos composer dentro de nuestra imagen de Docker, usaremos composer para instalar esta dependencia.</p> <p>Acu\u00e9rdate que debemos haber hecho <code>composer init</code> para empezar un proyecto con composer, de lo contrario no podr\u00e1s a\u00f1adir ning\u00fan paquete.</p> <p>Veamos un ejemplo de Hello World convertido a PDF</p> <p><pre><code>&lt;?php\n\nob_end_clean();\nrequire('fpdf/fpdf.php');\n\n// Instanciamos la clase\n// P = Portrait | mm = unidades en mil\u00edmetros | A4 = formato\n$pdf = new FPDF('P','mm','A4');\n\n// A\u00f1adimos una p\u00e1gina\n$pdf-&gt;AddPage();\n\n// Establecemos la fuente y el tama\u00f1o de letra\n$pdf-&gt;SetFont('Arial', 'B', 18);\n\n// Imprimimos una celda con el texto que nosotros queramos\n$pdf-&gt;Cell(60,20,'Hello World!');\n\n// Terminamos el PDF\n$pdf-&gt;Output();\n\n?&gt;\n</code></pre> Hay muchos ejemplos y tutoriales, as\u00ed como documentaci\u00f3n de la clase FPDF en la p\u00e1gina oficial.</p> <p>Visita la secci\u00f3n de tutoriales y el manual para sacar mayor partido a esta clase.</p> <pre><code>&lt;?php\n\nrequire('fpdf/fpdf.php');\n\nclass PDF extends FPDF {\n\n    // Cabecera\n    function Header() {\n\n        // A\u00f1adimos un logotipo\n        $this-&gt;Image('logo.png',10,8,33);\n\n        // establecemos la fuente y el tama\u00f1o\n        $this-&gt;SetFont('Arial','B',20);\n\n        // Movemos el contenido un poco a la derecha\n        $this-&gt;Cell(80);\n\n        // Pintamos la celda\n        $this-&gt;Cell(50,10,'Cabecera',1,0,'C');\n\n        // Pasamos a la siguiente l\u00ednea\n        $this-&gt;Ln(20);\n    }\n\n    // Pie de p\u00e1gina\n    function Footer() {\n\n        // Nos posicionamos a 1.5 cm  desde abajo del todo de la p\u00e1gina\n        $this-&gt;SetY(-15);\n\n        // Arial italic 8\n        $this-&gt;SetFont('Arial','I',8);\n\n        // N\u00famero de p\u00e1gina\n        $this-&gt;Cell(0,10,'P\u00e1gina ' . \n            $this-&gt;PageNo() . '/{nb}',0,0,'C');\n    }\n}\n\n// Instanciamos la clase\n$pdf = new PDF();\n\n// Definimos un alias para la numeraci\u00f3n de p\u00e1ginas\n$pdf-&gt;AliasNbPages();\n\n$pdf-&gt;AddPage();\n$pdf-&gt;SetFont('Times','',14);\n\nfor($i = 1; $i &lt;= 30; $i++)\n    $pdf-&gt;Cell(0, 10, 'N\u00famero de l\u00ednea ' \n            . $i, 0, 1);\n$pdf-&gt;Output();\n\n?&gt;\n</code></pre> Fichero PDF"},{"location":"uutt/06_AccesoDatos/0610_Ficheros.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC617 (AEA). (RA6 / CE6c CE6g / IC1 / 3p) -  M\u00e9tete en loremipsum.com y genera un texto de 3 p\u00e1rrafos. Copia el texto generado y gu\u00e1rdalo en un archivo nuevo. Genera otro archivo y muestra por pantalla el texto del archivo txt que acabas de crear, su tama\u00f1o en Kilobytes , la fecha de su \u00faltima modificaci\u00f3n y el ID de usuario que cre\u00f3 el archivo.</p> </li> <li> <p>AC618 (AR). (RA6 / CE6c CE6g / IC1 / 3p) -  Vuelve a AC613 y a\u00f1ade estas dos funcionalidades:</p> <ul> <li>Guardar todos los campeanos en un fichero .csv</li> <li>Los detalles de un campe\u00f3n en concreto en PDF</li> </ul> </li> <li> <p>PR606 (SA). (RA6 / CE6f CE6g / IC1 / 5p) - Necesitas a\u00f1adir una serie de funcionalidades a tu e-commerce. Para ello tienes que modificar PR603 para que:</p> <ul> <li>El trabajador pueda sacar todos los pedidos en un CSV.</li> <li>El cliente pueda sacar todos sus pedidos en un CSV.</li> <li>El cliente pueda sacar la factura (contenido del pedido) en formato PDF de cada uno de sus pedidos</li> </ul> </li> </ul>"},{"location":"uutt/06_AccesoDatos/0611_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Unit Testing con PHPUnit \u2014 Parte 1, de Emiliano Zublena.</li> <li>Manual: PHP Monolog</li> </ul>"},{"location":"uutt/06_AccesoDatos/0611_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Tutorial de Composer</li> </ul>"},{"location":"uutt/06_AccesoDatos/0612_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfCu\u00e1l de las siguientes extensiones de PHP es com\u00fanmente utilizada para interactuar con bases de datos relacionales?<ol> <li>PDO</li> <li>XML</li> <li>JSON</li> <li>mysqli</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. mysqli.</p> <ol> <li>\u00bfQu\u00e9 funci\u00f3n de PHP se utiliza para ejecutar una consulta SQL preparada con par\u00e1metros en PDO?<ol> <li><code>mysql_query()</code></li> <li><code>mysqli_prepare()</code></li> <li><code>PDO::prepare()</code></li> <li><code>sql_execute()</code></li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. <code>PDO::prepare()</code>.</p> <ol> <li>\u00bfCu\u00e1l de las siguientes propiedades ACID garantiza que todas las operaciones de una transacci\u00f3n se realicen como una unidad indivisible?<ol> <li>Atomicidad</li> <li>Consistencia</li> <li>Aislamiento</li> <li>Durabilidad</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. Durabilidad.</p> <ol> <li>\u00bfQu\u00e9 m\u00e9todo de PDO se utiliza para iniciar una transacci\u00f3n?<ol> <li><code>begin()</code></li> <li><code>beginTransaction()</code></li> <li><code>startTransaction()</code></li> <li><code>startTransaction()</code></li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. <code>beginTransaction()</code></p> <ol> <li>\u00bfQu\u00e9 funci\u00f3n de PHP se utiliza para obtener el \u00faltimo ID insertado en una tabla autoincremental despu\u00e9s de realizar una inserci\u00f3n con PDO?<ol> <li><code>lastInsertId()</code></li> <li><code>mysqli_insert_id()</code></li> <li><code>mysql_insert_id()</code></li> <li><code>PDO::lastInsertId()</code></li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: d. <code>PDO::lastInsertId()</code>.</p>"},{"location":"uutt/06_AccesoDatos/061_IntroduccionConfiguracion.html","title":"Introducci\u00f3n","text":"<p>En esta unidad vamos a aprender a acceder a datos que se encuentran en un servidor; recuperando, editando y creando dichos datos a trav\u00e9s de una base de datos.</p> <p>A trav\u00e9s de las distintas capas o niveles, de las cuales 2 de ellas ya conocemos (Apache, PHP) y MySQL la que vamos a estudiar en este tema.</p> Modelo de tres capas"},{"location":"uutt/06_AccesoDatos/061_IntroduccionConfiguracion.html#instalacion","title":"Instalaci\u00f3n","text":"<p>A trav\u00e9s de XAMPP es muy sencillo, simplemente nos descargar\u00edamos el programa y lo activar\u00edamos. Para descargar XAMPP pulsa aqu\u00ed.</p> <p>Con Docker nos descargaremos esta imagen de docker y lanzamos </p> <pre><code>docker-compose up -d\n</code></pre> <p>Si todo ha salido bien y el contenedor est\u00e1 en marcha, podremos visitar la p\u00e1gina de phpMyAdmin de la siguiente manera</p> <pre><code>http://localhost:8000\n</code></pre> Inicio phpMyadmin <p>Para acceder debemos utilizar las siguientes credenciales que vienen configuradas en el alrchivo <code>docker-compose.yml</code> </p> <pre><code>usuario: root\ncontrase\u00f1a: 1234\n</code></pre>"},{"location":"uutt/06_AccesoDatos/061_IntroduccionConfiguracion.html#estructura-de-una-base-de-datos","title":"Estructura de una base de datos","text":"<p>Sabemos que una base de datos tiene muchos campos con sus nombres y valores, pero adem\u00e1s sabemos que la base de datos debe tener un nombre. por tanto tendr\u00edamos la siguiente estructura para una base de datos:</p> <pre><code>NombreBaseDeDatos\n    |__Tabla-#1\n    |       |__DatosTabla-#1\n    |\n    |__Tabla-#2\n    |       |__DatosTabla-#2\n    |\n    |__Tabla-#3\n    |       |__DatosTabla-#3\n    [...]\n</code></pre> <p>Ve\u00e1moslo en un ejemplo real</p> <pre><code>Ryanair\n    |__pasajero\n    |    |__id[*]\n    |    |__nombre\n    |    |__apellidos\n    |    |__edad\n    |    |__id_vuelo[^]\n    |\n    |__vuelo\n    |    |__id[*]\n    |    |__n_plazas\n    |    |__disponible\n    |    |__id_pais[^]\n    |\n    |__pais\n         |__id[*]\n         |__nombre\n</code></pre> <p>Leyenda</p> <ul> <li>[*] Clave primaria </li> <li>[^] Clave For\u00e1nea</li> </ul> Estructura base de datos"},{"location":"uutt/06_AccesoDatos/061_IntroduccionConfiguracion.html#actividad","title":"Actividad","text":"<ul> <li>AC601 (AEA). (RA6 / CE6a / IC1 / 3p) - Documenta el proceso de instalaci\u00f3n de MySQL, comentando las dificultades encontradas.</li> </ul>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html","title":"Persistencia datos","text":"<p>La persistencia de datos se refiere a la capacidad de almacenar informaci\u00f3n generada durante la ejecuci\u00f3n de un programa de manera que esta informaci\u00f3n permanezca disponible para futuras ejecuciones del programa, despu\u00e9s de que el proceso actual haya terminado. En el contexto del desarrollo de software, especialmente en aplicaciones web y m\u00f3viles, la persistencia es crucial para garantizar que los datos cr\u00edticos, como las preferencias del usuario, el estado de la aplicaci\u00f3n, y los registros de transacciones, no se pierdan y puedan ser recuperados o mantenidos a trav\u00e9s de reinicios del sistema o sesiones de usuario.</p> <p>Este concepto se implementa generalmente utilizando diferentes m\u00e9todos de almacenamiento, como bases de datos, archivos en un sistema de archivos, almacenamiento en la nube, o mediante el uso de APIs que gestionan la persistencia en servidores remotos. El m\u00e9todo elegido depende de los requisitos espec\u00edficos de la aplicaci\u00f3n, como la necesidad de acceso r\u00e1pido, la seguridad de los datos, la escalabilidad y la capacidad de manejo de grandes vol\u00famenes de datos.</p>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#persistencia-en-la-logica","title":"Persistencia en la l\u00f3gica","text":"<p>En el contexto de una aplicaci\u00f3n web, persistir datos en la l\u00f3gica del programa implica mantenerlos en estructuras de datos durante el ciclo de vida de una solicitud HTTP. Por ejemplo, se pueden utilizar variables y estructuras como listas o diccionarios en PHP para almacenar temporalmente informaci\u00f3n mientras se procesa una solicitud.</p> <p>Adem\u00e1s, la persistencia a trav\u00e9s de sesiones HTTP permite guardar datos entre m\u00faltiples solicitudes del mismo usuario. Esto se logra usando sesiones en PHP, donde se almacenan datos en variables de sesi\u00f3n que son accesibles a lo largo de diferentes p\u00e1ginas y solicitudes hasta que la sesi\u00f3n expire o se cierre.</p>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#persistencia-en-archivos","title":"Persistencia en archivos","text":"<p>Persistir datos en archivos implica escribir y leer datos de archivos en el sistema de archivos del servidor. Esto es \u00fatil para datos que no requieren operaciones complejas y pueden ser almacenados de manera permanente en un formato simple como CSV, JSON, o XML. PHP proporciona funciones como <code>file_put_contents()</code> y <code>file_get_contents()</code> que facilitan la escritura y lectura de archivos.</p> <p>Esta t\u00e9cnica es adecuada para peque\u00f1as cantidades de datos y donde la estructura de los datos es simple, pero no es recomendable para gestionar grandes vol\u00famenes de datos o requerimientos de alta concurrencia debido a limitaciones de escalabilidad y velocidad.</p>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#persistencia-en-un-sgbd","title":"Persistencia en un SGBD","text":"<p>La utilizaci\u00f3n de Sistemas de Gesti\u00f3n de Bases de Datos (SGBD) es el m\u00e9todo m\u00e1s com\u00fan para la persistencia de datos en aplicaciones web. Los SGBD como MySQL, PostgreSQL, o SQLite manejan la persistencia, consistencia, integridad, y seguridad de los datos. PHP se comunica con estos sistemas a trav\u00e9s de extensiones como PDO (PHP Data Objects) o mysqli, que permiten ejecutar consultas SQL, insertar, actualizar, eliminar y recuperar datos de manera eficiente.</p> <p>Este enfoque es altamente recomendable para manejar grandes vol\u00famenes de datos, asegurar la integridad de los datos mediante transacciones y restricciones, y proporcionar un acceso concurrente efectivo.</p>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#persistencia-en-una-api","title":"Persistencia en una API","text":"<p>La persistencia de datos a trav\u00e9s de APIs est\u00e1 ganando popularidad, especialmente con el auge de las arquitecturas basadas en microservicios y la nube. En este modelo, una aplicaci\u00f3n web interact\u00faa con una API externa para gestionar los datos. La API puede estar conectada a un backend que utiliza cualquier forma de almacenamiento mencionada anteriormente o incluso servicios especializados como bases de datos en la nube.</p> <p>Este m\u00e9todo es muy escalable y permite que la l\u00f3gica de gesti\u00f3n de datos sea abstracta y mantenida por un tercero, reduciendo la carga de gestionar directamente la persistencia de los datos en la aplicaci\u00f3n.</p>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#ejemplos-de-uso","title":"Ejemplos de uso","text":"Tipo de Persistencia Uso T\u00edpico en E-commerce Estructuras de datos Almacenar detalles del carrito de compra temporalmente en memoria. Sesi\u00f3n HTTP Mantener informaci\u00f3n de sesi\u00f3n del usuario, como art\u00edculos en el carrito entre visitas a diferentes p\u00e1ginas. Archivos Guardar im\u00e1genes de productos, descripciones en formato JSON/XML o configuraciones del sitio en archivos. Sistema de Gesti\u00f3n de Bases de Datos (SGBD) Almacenar y gestionar inventarios de productos, datos de usuarios, historial de pedidos, y realizar transacciones seguras. API Conectar con sistemas de pago remotos, integrar gesti\u00f3n de env\u00edos y obtener datos de productos de proveedores externos."},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#justificacion","title":"Justificaci\u00f3n","text":"<ul> <li> <p>Estructuras de datos: Durante la navegaci\u00f3n de un usuario, los productos seleccionados se pueden guardar en una estructura de datos como un array en PHP, lo cual permite manipular f\u00e1cilmente los items a\u00f1adidos o eliminados antes de realizar la compra.</p> </li> <li> <p>Sesi\u00f3n HTTP: Al guardar el estado del carrito de compras y las preferencias del usuario (como la \u00faltima categor\u00eda de productos visitada) en una sesi\u00f3n, se mejora la experiencia del usuario permitiendo que, al volver a la p\u00e1gina, encuentre su carrito de compras tal y como lo dej\u00f3.</p> </li> <li> <p>Archivos: Para un e-commerce, es pr\u00e1ctico almacenar archivos est\u00e1ticos como cat\u00e1logos de productos en formato PDF, im\u00e1genes de productos o incluso archivos de configuraci\u00f3n que controlen aspectos del layout o caracter\u00edsticas del sitio web, que no requieren acceso frecuente a una base de datos.</p> </li> <li> <p>Sistema de Gesti\u00f3n de Bases de Datos (SGBD): Las bases de datos son esenciales en e-commerce para gestionar voluminosas y din\u00e1micas informaciones como los detalles de inventarios de productos, precios, usuarios registrados, preferencias de clientes, y registros de transacciones. Permiten realizar consultas complejas, gestionar la integridad de los datos, y asegurar la coherencia a trav\u00e9s de transacciones.</p> </li> <li> <p>API: Integrar APIs permite a una tienda de e-commerce extender su funcionalidad y automatizaci\u00f3n sin tener que manejar todos los datos internamente. Por ejemplo, una API de pagos como Stripe o PayPal gestiona de forma segura las transacciones financieras, mientras que otras APIs pueden ser utilizadas para obtener informaci\u00f3n en tiempo real sobre el estado del env\u00edo o para integrar rese\u00f1as de productos de un servicio externo.</p> </li> </ul>"},{"location":"uutt/06_AccesoDatos/062_PersistenciaDatos.html#actividad","title":"Actividad","text":"<ul> <li>PR601 (SA). (RA6 / CE6a / IC1 / 3p) - Una vez comprendido el concepto de persistencia de datos, realiza una tabla en la que asignes, o no, el uso que le dar\u00edas a cada tipo de persistencia de datos para el proyecto de e-commerce que est\u00e1s realizando. Es necesario que justifiques tus decisiones.</li> </ul>"},{"location":"uutt/06_AccesoDatos/063_SQLphpMyadmin.html","title":"SQL y phpMyadmin","text":""},{"location":"uutt/06_AccesoDatos/063_SQLphpMyadmin.html#sql","title":"SQL","text":"<p>Este lenguaje de consulta estructurada (Structured Query Language) es el que vamos a utilizar para realizar las consultas a nuestras bases de datos para mostrar el contenido en las distintas interfaces web que creemos a lo largo de la unidad. Si quieres saber m\u00e1s detalles visita Wiki SQL</p> <p>Ejemplo de una sentencia SQL donde seleccionamos todas las filas y columnas de nuestra tabla llamada 'pais'</p> <pre><code>SELECT * FROM pais\n</code></pre> <p>Estas sentencias pueden invocarse desde la consola de comandos mediante el int\u00e9rprete mysql (previamente instalado en el sistema) o a trav\u00e9s de la herramienta phpMyAdmin.</p> <p>Las sentencias SQL tambi\u00e9n las podemos usar dentro de nuestro c\u00f3digo php, de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos.</p> <pre><code>&lt;?php\n    // Listado de clientes, ordenados por DNI de manera ASCendente\n    $clientesOrdenadosPorDNI = \"SELECT * FROM `pasajero` ORDER BY `dni`\" ASC;\n?&gt;\n</code></pre>"},{"location":"uutt/06_AccesoDatos/063_SQLphpMyadmin.html#phpmyadmin","title":"phpMyAdmin","text":"<p>Este software funciona bajo Apache y PHP y es m\u00e1s que nada una interfaz web para gestionar las bases de datos que tengamos disponibles en nuestro servidor local. Muchos hostings ofrecen esta herramienta por defecto para poder gestionar las BBDD que tengamos configuradas bajo nuestra cuenta.</p>"},{"location":"uutt/06_AccesoDatos/063_SQLphpMyadmin.html#creando-una-base-de-datos-dentro-de-phpmyadmin","title":"Creando una base de datos dentro de phpMyAdmin","text":"Creaci\u00f3n base datos en phpMyadmin <ol> <li> <p>Para crear una nueva base de datos debemos entrar en phpMyAdmin como usuario root y pinchar en la opci\u00f3n Nueva del men\u00fa de la izquierda.</p> </li> <li> <p>En la nueva ventana de creaci\u00f3n pondremos un nombre a nuestra bbdd.</p> </li> <li> <p>Tambi\u00e9n estableceremos el cotejamiento utf8m4_unicode_ci para que nuestra bbdd soporte todo tipo de caracteres (como los asi\u00e1ticos) e incluso emojis ;)</p> </li> <li> <p>Le damos al bot\u00f3n de Crear para crear la bbdd y empezar a escribir las distintas tablas que vayamos a introducir en ella.</p> </li> </ol> <p>El sistema generar\u00e1 el c\u00f3digo SQL para crear todo lo que le hemos puesto y crear\u00e1 la base de datos con las tablas que le hayamos metido.</p> <pre><code>CREATE TABLE `persona`. ( `id` INT NOT NULL AUTO_INCREMENT , `nombre` TINYTEXT NOT NULL , `apellidos` TEXT NOT NULL , `telefono` TINYTEXT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;\n</code></pre>"},{"location":"uutt/06_AccesoDatos/063_SQLphpMyadmin.html#opciones-en-phpmyadmin","title":"Opciones en phpMyAdmin","text":"<p>Cuando seleccionamos una base de datos de la lista, el sistema nos muestra varias pesta\u00f1as con las cuales interactuar con la base de datos en cuesti\u00f3n:</p> <ul> <li><code>Estructura</code>: Podemos ver las distintas tablas que consolidan nuestra base de datos</li> <li><code>SQL</code>: Por si queremos inyectar c\u00f3digo SQL para que el sistema lo interprete</li> <li><code>Buscar</code>: Sirve para buscar por t\u00e9rminos, en nuestra base de datos, aplicando distintos filtros de b\u00fasqueda</li> <li><code>Generar consulta</code>: parecido a SQL pero de una manera m\u00e1s gr\u00e1fica, sin tener que saber nada del lenguaje</li> <li><code>Exportar e importar</code>: Como su nombre indica, para hacer cualquiera de las 2 operaciones sobre la base de datos</li> <li> <p><code>Operaciones</code>: Distintas opciones avanzadas para realizar en nuestra base de datos, de la cual destacaremos la opci\u00f3n Cotejamiento donde podremos cambiar el cotejamiento de nuestra tabla.</p> <p>Cotejamiento</p> <p>OJO CON \u00c9STO porque podemos eliminar datos sin querer, ya que al cambiar el cotejamiento podemos suprimir caracteres no soportados por el nuevo cotejamiento</p> </li> </ul> <p>No vamos a profundizar en el resto de opciones pero, en la pesta\u00f1a M\u00e1s existe la opci\u00f3n Dise\u00f1ador para poder editar las relaciones entre tablas de una manera gr\u00e1fica (pinchando y arrastrando) que veremos m\u00e1s adelante.</p>"},{"location":"uutt/06_AccesoDatos/063_SQLphpMyadmin.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC602 (AEA). (RA6 / CE6a / IC1 / 3p) - Crea una base de datos llamada <code>libreria</code> y dentro de ella, una tabla libros con las siguientes columnas: <code>id</code>(clave primaria autoincremental), <code>titulo</code>, <code>autor</code>, y <code>anio_publicacion</code>. </p> </li> <li> <p>AC603 (AR). (RA6 / CE6a / IC1 / 3p) - Utilizando \u00fanicamente phpMyAdmin, realiza las siguientes tareas en la base de datos <code>libreria</code>:</p> <ul> <li>Escribe y ejecuta una consulta SQL que liste todos los libros cuyo <code>anio_publicacion</code> sea posterior a 2010. Aseg\u00farate de incluir todos los campos de los registros en los resultados.</li> <li>Modifica el t\u00edtulo de un libro espec\u00edfico cambiando su <code>titulo</code>. Elige un libro cuyo id conozcas y actualiza su t\u00edtulo a uno nuevo.</li> <li>Inserta un nuevo libro en la tabla <code>libros</code>. </li> </ul> </li> <li> <p>AC604 (AP). (RA6 / CE6a / IC1 / 3p) - Modifica la base de datos <code>libreria</code> para incluir una nueva tabla <code>editoriales</code>, que contenga las columnas <code>id</code> y <code>nombre</code>.</p> </li> </ul>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html","title":"Operaciones CRUD","text":"<p>El concepto de operaciones CRUD es fundamental en el desarrollo de aplicaciones que involucran la gesti\u00f3n de datos. CRUD es un acr\u00f3nimo que se refiere a las cuatro funciones b\u00e1sicas que se deben implementar en cualquier sistema de gesti\u00f3n de datos persistente:</p>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html#1-crear-c","title":"1. Crear (C)","text":"<p>Esta operaci\u00f3n se refiere a la capacidad de a\u00f1adir nuevos registros o datos al sistema. En el contexto de una base de datos, esto se traduce t\u00edpicamente en insertar nuevas filas en una tabla. Ejemplo en PHP utilizando una sentencia SQL <code>INSERT</code>:</p> <p><pre><code>$sql = \"INSERT INTO usuarios (nombre, email) VALUES ('Juan', 'juan@example.com')\";\n</code></pre> Este comando a\u00f1adir\u00eda un nuevo usuario con nombre \"Juan\" y correo electr\u00f3nico \"juan@example.com\" a la tabla usuarios.</p>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html#2-leer-r","title":"2. Leer (R)","text":"<p>La operaci\u00f3n de lectura permite recuperar datos del sistema. Esto puede ser tan simple como obtener un \u00fanico valor o tan complejo como ejecutar una consulta que recupere grandes conjuntos de datos basados en criterios espec\u00edficos. Ejemplo en PHP con una sentencia SQL <code>SELECT</code>:</p> <p><pre><code>$sql = \"SELECT * FROM usuarios WHERE nombre = 'Juan'\";\n</code></pre> Este comando recuperar\u00eda todos los datos de los usuarios cuyo nombre sea \"Juan\".</p>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html#3-actualizar-u","title":"3. Actualizar (U)","text":"<p>Actualizar se refiere a modificar datos existentes en el sistema. Esta operaci\u00f3n es crucial para mantener la relevancia y la precisi\u00f3n de la informaci\u00f3n almacenada. Ejemplo en PHP utilizando una sentencia SQL <code>UPDATE</code>:</p> <p><pre><code>$sql = \"UPDATE usuarios SET email = 'nuevoemail@example.com' WHERE nombre = 'Juan'\";\n</code></pre> Este comando actualizar\u00eda el correo electr\u00f3nico del usuario llamado \"Juan\" al nuevo valor proporcionado.</p>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html#4-borrar-d","title":"4. Borrar (D)","text":"<p>La \u00faltima operaci\u00f3n es el borrado de datos. Permite eliminar informaci\u00f3n innecesaria o desactualizada del sistema. Ejemplo en PHP con una sentencia SQL <code>DELETE</code>:</p> <p><pre><code>$sql = \"DELETE FROM usuarios WHERE nombre = 'Juan'\";\n</code></pre> Este comando eliminar\u00eda de la base de datos todos los registros de los usuarios cuyo nombre sea \"Juan\".</p>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html#implementacion-en-el-desarrollo-web","title":"Implementaci\u00f3n en el Desarrollo Web","text":"<p>En el desarrollo web, estas operaciones CRUD son implementadas a menudo a trav\u00e9s de formularios web y APIs que interact\u00faan con la base de datos backend. Cada acci\u00f3n CRUD en el frontend (como un formulario de entrada de datos o un bot\u00f3n de eliminar) se traduce en una de estas operaciones en el servidor, asegurando que los datos del usuario se gestionen adecuadamente.</p> <p>Adem\u00e1s, es esencial implementar medidas de seguridad adecuadas, como la validaci\u00f3n de datos y la protecci\u00f3n contra inyecciones SQL, para asegurar que las operaciones CRUD no se conviertan en un vector de ataques que comprometan la integridad y la seguridad de la aplicaci\u00f3n.</p>"},{"location":"uutt/06_AccesoDatos/064_CRUD.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC605 (AEA). (RA6 / CE6b CE6c / IC1 / 3p) - Crea una tabla llamada <code>clientes</code> con las siguientes columnas: <code>id</code> (clave primaria autoincremental), <code>nombre</code>, <code>apellido</code>, <code>email</code>, y <code>fecha_registro</code> (tipo fecha). Una vez creada la tabla, inserta cinco registros en la tabla con datos ficticios de clientes.</p> </li> <li> <p>AC606 (AEA). (RA6 / CE6b CE6c / IC1 / 3p) - Utiliza la tabla <code>clientes</code> que creaste. Escribe una consulta SQL que muestre todos los campos de todos los clientes. Luego, modifica esta consulta para que solo muestre los clientes que se registraron en el \u00faltimo mes.</p> </li> <li> <p>AC607 (AR). (RA6 / CE6b CE6c / IC1 / 3p) - En la tabla <code>clientes</code>, actualiza el <code>email</code> de uno de los clientes. Escoge un cliente cuyo <code>id</code> conozcas y cambia su email a uno nuevo. Escribe la consulta SQL que utilizaste para realizar esta actualizaci\u00f3n.</p> </li> <li> <p>AC608 (AR). (RA6 / CE6b CE6c / IC1 / 3p) - Escribe una consulta SQL para eliminar un cliente de la tabla <code>clientes</code> cuyo <code>apellido</code> sea \"Gonz\u00e1lez\". Aseg\u00farate de que la consulta solo afecte a los registros que cumplen con esta condici\u00f3n espec\u00edfica.</p> </li> <li> <p>AC609 (AP). (RA6 / CE6b CE6c / IC1 / 3p) - Crea una segunda tabla llamada <code>pedidos</code> que incluya las columnas <code>id</code> (clave primaria autoincremental), <code>id_cliente</code> (clave for\u00e1nea que referencia a <code>clientes.id</code>), <code>producto</code>, <code>cantidad</code> y <code>fecha_pedido</code>. Aseg\u00farate de establecer la relaci\u00f3n de clave for\u00e1nea correctamente. Inserta datos que representen pedidos de los clientes. Despu\u00e9s, escribe una consulta SQL para obtener una lista de todos los clientes junto con los detalles de sus pedidos. Utiliza una consulta de uni\u00f3n (<code>JOIN</code>) para combinar datos de ambas tablas.</p> </li> <li> <p>PR602 (SA). (RA6 / CE6b CE6c / IC1 / 3p) - El CTO necesita que crees la base de datos del e-commerce, en ella deber\u00e1s tener, al menos, las tablas <code>carrito</code>, <code>cliente</code>, <code>producto</code> y <code>pedido</code>. Te han aconsejado que documentes el proceso justificando la creaci\u00f3n de las tablas que te han pedido.</p> </li> </ul>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html","title":"MySQLi","text":"<p>PHP hace uso de esta extensi\u00f3n mejorada para poder comunicarse con las bases de datos, ya sean MySQL (4.1 o superior) o MariaDB.</p> <p>Cualquier consulta que queramos hacer a una base de datos necesitaremos hacer uso de la extensi\u00f3n mysqli()</p> <p>Veamos como conectarnos con una base de datos a trav\u00e9s del c\u00f3digo PHP</p> <pre><code>&lt;?php\n    // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    // \"SERVIDOR\", \"USUARIO\", \"CONTRASE\u00d1A\", \"BASE DE DATOS\"\n    $conexion = mysqli_connect(\"d939ebf6a741\",\"tuUsuario\",\"1234\",\"pruebas\");\n\n    // COMPROBAMOS LA CONEXI\u00d3N\n    if(mysqli_connect_errno()) {\n        echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n        exit();\n    }\n\n    echo \"&lt;h1&gt;Bienvenid@ a MySQL !!&lt;/h1&gt;\";\n?&gt;\n</code></pre> <ul> <li> <p><code>servidor</code>: El servidor donde se encuentra la base de datos que queremos usar suele ser localhost, pero en nuestro caso, al utilizar Docker ser\u00e1 el nombre de la imagen mysql:8.0 que aparece al dejar el rat\u00f3n encima en el Visual Studio Code</p> </li> <li> <p><code>usuarioDB</code>: El usuario de la base de datos</p> </li> <li><code>passwordDB</code>: La contrase\u00f1a para ese usuario de la base de datos</li> <li><code>baseDeDatos</code>: Nombre de la base de datos que queramos usar</li> </ul> <p>Si todo ha salido bien habr\u00e9is visto un mensaje diciendo Bienvenid@ a MySQL !!</p>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#recuperando-datos-de-una-bd","title":"Recuperando datos de una BD","text":"<p>Ahora que ya sabemos c\u00f3mo conectarnos a una base de datos alojada en nuestro servidor, lo que necesitamos saber es c\u00f3mo recuperar datos almacenados en la base de datos.</p> <p>Durante la instalaci\u00f3n de la imagen de Docker, se ha creado una tabla llamada Pruebas que contiene varios registros de distintas personas.</p> <p>Vamos a recuperar esos datos para ver de qu\u00e9 forma se hace con PHP.</p> <pre><code>&lt;?php\n    // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $conexion = mysqli_connect(\"d939ebf6a741\", \"lupa\", \"1234\", \"pruebas\");\n\n    // COMPROBAMOS LA CONEXI\u00d3N\n    if (mysqli_connect_errno()) {\n        echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n        exit();\n    }\n\n    // CONSULTA A LA BASE DE DATOS\n    $consulta = \"SELECT * FROM `Person`\";\n    $listaUsuarios = mysqli_query($conexion, $consulta);\n\n    // COMPROBAMOS SI EL SERVIDOR NOS HA DEVUELTO RESULTADOS\n    if($listaUsuarios) {\n\n        // RECORREMOS CADA RESULTADO QUE NOS DEVUELVE EL SERVIDOR\n        foreach ($listaUsuarios as $usuario) {\n            echo \"\n                $usuario[id]\n                $usuario[name]\n                &lt;br&gt;\n            \";\n        }\n    }\n?&gt;\n</code></pre> <p>Si todo ha salido bien, por pantalla ver\u00e1s el siguiente listado</p> <pre><code>\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 http://localhost/pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n1 William\n2 Marc\n3 John\n4 Antonio Moreno\n</code></pre>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#flujo-de-trabajo","title":"Flujo de trabajo","text":""},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#definir-los-parametros-de-la-cadena-de-conexion","title":"Definir los par\u00e1metros de la cadena de conexi\u00f3n","text":"<p>Antes de realizar la conexi\u00f3n, es necesario definir los par\u00e1metros de la cadena de conexi\u00f3n, que incluyen el nombre del servidor, el nombre de usuario, la contrase\u00f1a y el nombre de la base de datos. Estos par\u00e1metros se utilizan para establecer la conexi\u00f3n con el servidor MySQL.</p>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#realizar-la-conexion","title":"Realizar la conexi\u00f3n","text":"<p>Una vez que se han definido los par\u00e1metros de la cadena de conexi\u00f3n, se puede establecer la conexi\u00f3n con el servidor MySQL utilizando la funci\u00f3n <code>mysqli_connect()</code> en PHP.</p>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#comprobar-errores-usando-excepciones","title":"Comprobar errores usando excepciones","text":"<p>Es importante manejar los posibles errores que puedan ocurrir durante la conexi\u00f3n a la base de datos. En este ejemplo, se utiliza un bloque try...catch para capturar cualquier excepci\u00f3n que pueda ser lanzada durante la conexi\u00f3n y mostrar un mensaje de error apropiado.</p>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#cerrar-la-conexion","title":"Cerrar la conexi\u00f3n","text":"<p>Una vez que hayamos terminado de realizar todas las operaciones necesarias en la base de datos, es importante cerrar la conexi\u00f3n para liberar los recursos del servidor MySQL y mejorar el rendimiento.</p>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#ejemplo","title":"Ejemplo","text":"<pre><code>&lt;?php\n$servername = \"localhost\";\n$username = \"usuario\";\n$password = \"contrase\u00f1a\";\n$database = \"basededatos\";\n\ntry {\n    $conn = mysqli_connect($servername, $username, $password, $database);\n    if (!$conn) {\n        throw new Exception(\"Error al conectar a la base de datos: \" . mysqli_connect_error());\n    } else {\n        echo \"Conexi\u00f3n establecida correctamente\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e-&gt;getMessage();\n}\n\n// Realizar acciones pertinentes\n\nmysqli_close($conn);\n?&gt;\n</code></pre>"},{"location":"uutt/06_AccesoDatos/065_MySQLi.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC610 (AEA). (RA6 / CE6b CE6c/ IC1 / 3p) - Crea una nueva base de datos con el nombre <code>lol</code> y cotejamiento de datos <code>utf8mb4_unicode_ci</code>. En nuestra base de datos <code>lol</code>,  vamos a crear la tabla <code>campeon</code> con los siguientes campos.</p> <ul> <li>id [*]</li> <li>nombre</li> <li>rol</li> <li>dificultad</li> <li>descripcion</li> </ul> <p>Recordatorio</p> <p>Acu\u00e9rdate que [*] significa que es clave primaria y no olvides poner el tipo de datos de cada uno de los campos.</p> <p>Manera de proceder</p> <p>No se ha de realizar sobre phpMyadmin, si no sobre un archivo.</p> </li> <li> <p>AC611 (AR). (RA6 / CE6b CE6c/ IC1 / 3p) - Rellena la tabla <code>campeon</code> con, al menos 5 registros, con los datos que t\u00fa quieras o si lo prefieres, puedes basarte en la p\u00e1gina oficial del juego.</p> </li> <li> <p>AC612 (AEA). (RA6 / CE6b CE6c CE6d/ IC1 / 3p) - Crea una aplicaci\u00f3n donde listes todos los campeones del LOL que has metido en tu base de datos. Acu\u00e9rdate que para ello deber\u00e1s hacer una conexi\u00f3n con la base de datos y un <code>foreach</code> para cada campe\u00f3n que tengas albergado en la tabla <code>campeon</code>.</p> </li> <li> <p>AC613 (AP). (RA6 / CE6b CE6c CE6d/ IC1 / 5p) - Modifica el archivo creado en AC612 pero pon al lado de cada uno de los campeones listados un bot\u00f3n para <code>editar</code> y otro para <code>borrar</code>. Cada uno de esos botones har\u00e1 la correspondiente funci\u00f3n dependiendo del <code>id</code> del campe\u00f3n seleccionado.</p> <ul> <li>Al pinchar en editar, el usuario ser\u00e1 redirigido a un archivo donde mostrar\u00e1 un formulario con los campos rellenos por los datos del campe\u00f3n seleccionado. Al darle al bot\u00f3n de <code>guardar</code> los datos se guardar\u00e1n en la base de datos y el usuario ser\u00e1 redirigido a la lista de campeones para poder ver los cambios.</li> <li>Al pinchar en borrar, el usuario ser\u00e1 preguntado a trav\u00e9s de un mensaje de JavaScript (prompt) si est\u00e1 seguro de que quiere borrar al campe\u00f3n seleccionado. En el mensaje de confirmaci\u00f3n debe aparecer el nombre del campe\u00f3n seleccionado. Si el usuario pincha en <code>Aceptar</code> el campe\u00f3n ser\u00e1 eliminado de la base de datos y el usuario ser\u00e1 redirigido nuevamente al listado de campeones para comprobar que, efectivamente dicho campe\u00f3n se ha eliminado de la lista.</li> </ul> </li> <li> <p>PR603 (SA). (RA6 / CE6b CE6c CE6d/ IC1 / 5p) - Realiza una aplicaci\u00f3n que te permita recuperar los datos del e-commerce. Para ello deber\u00e1s mostrar en una tabla los productos que tiene y a su lado el bot\u00f3n de a\u00f1adir al carrito. Adem\u00e1s, tienes que dar la posibilidad de ver tu carrito y de finalizar el pedido. Todo tiene que quedar reflejado en la base de datos que creaste en PR602.</p> <p>Recordatorio</p> <p>Si durante el proceso te das cuenta que necesitas modificar tu base de datos, hazla. Puede que durante su dise\u00f1o no tuvieras en cuenta ciertos aspectos que ahora te hacen falta, si lo haces docum\u00e9ntalo.</p> </li> </ul>"},{"location":"uutt/06_AccesoDatos/066_PDO.html","title":"PHP Data Objects :: PDO","text":"<p>PDO proporciona una capa de abstracci\u00f3n de acceso a datos, lo que significa que, independientemente de la base de datos que se est\u00e9 utilizando, se usan las mismas funciones para realizar consultas y obtener datos.</p> <p>De la misma manera que hemos visto con mysqli, PHP Data Objects (o PDO) es un driver de PHP que se utiliza para trabajar bajo una interfaz de objetos con la base de datos. A d\u00eda de hoy es lo que m\u00e1s se utiliza para manejar informaci\u00f3n desde una base de datos, ya sea relacional o no relacional.</p> <p>De igual manera que pasaba con los objetos en PHP nativos, en la interfaz de MySQL la cosa cambia la hora de conectarnos con una base de datos.</p> <pre><code>&lt;?php\n    $conexion = new PDO('mysql:host=localhost; dbname=dwes', 'dwes', 'abc123');\n</code></pre> <p>Adem\u00e1s, con PDO podemos usar las excepciones con try catch para gestionar los errores que se produzcan en nuestra aplicaci\u00f3n, para ello, como hac\u00edamos antes, debemos encapsular el c\u00f3digo entre bloques try / catch.</p> <p><pre><code>&lt;?php\n\n    $dsn = 'mysql:dbname=prueba;host=127.0.0.1';\n    $usuario = 'usuario';\n    $contrase\u00f1a = 'contrase\u00f1a';\n\n    try {\n        $mbd = new PDO($dsn, $usuario, $contrase\u00f1a);\n        $mbd-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        echo 'Fall\u00f3 la conexi\u00f3n: ' . $e-&gt;getMessage();\n    }\n</code></pre> En primer lugar, creamos la conexi\u00f3n con la base de datos a trav\u00e9s del constructor PDO pas\u00e1ndole la informaci\u00f3n de la base de datos.</p> <p>En segundo lugar, establecemos los par\u00e1metros para manejar las excepciones, en este caso hemos utilizado:</p> <ul> <li><code>PDO::ATTR_ERRMODE</code> indic\u00e1ndole a PHP que queremos un reporte de errores.</li> <li><code>PDO::ERRMODE_EXCEPTION</code> con este atributo obligamos a que lance excepciones, adem\u00e1s de ser la opci\u00f3n m\u00e1s humana y legible que hay a la hora de controlar errores.</li> </ul> <p>PDOException</p> <p>Cualquier error que se lance a trav\u00e9s de PDO, el sistema lanzar\u00e1 una PDOException.</p>"},{"location":"uutt/06_AccesoDatos/066_PDO.html#fichero-de-configuracion-de-la-bd","title":"Fichero de configuraci\u00f3n de la BD","text":"<p>De la misma manera que creamos nuestro archivo de funciones <code>funciones-php</code> y albergamos todas las funciones que se usan de manera global en la aplicaci\u00f3n, podemos establecer un archivo de constantes donde definamos los par\u00e1metros de conexi\u00f3n con la base de datos.</p> <pre><code>&lt;?php\n\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 conexion.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    constDSN = \"mysql:host=localhost;dbname=dwes\";\n    constUSUARIO = \"dwes\";\n    constPASSWORD = \"abc123\";\n\n    /*  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 NO SUBAS ESTE ARCHIVO A git \u2592\u2592\u2592\u2592\u2592\n\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 */\n</code></pre> <p>Este archivo contiene informaci\u00f3n muy sensible as\u00ed que no es recomendable que subas este archivo a git.</p>"},{"location":"uutt/06_AccesoDatos/066_PDO.html#sentencias-preparadas","title":"Sentencias preparadas","text":"<p>Se trata de sentencias que se establecen como si fueran plantillas de la SQL que vamos a lanzar, aceptando par\u00e1metros que son establecidos a posteriori de la declaraci\u00f3n de la sentencia preparada.</p> <p>Las sentencias preparadas evitan la injecci\u00f3n de SQL (SQL Injection) y mejoran el rendimiento de nuestras aplicaci\u00f3nes o p\u00e1ginas web.</p> <pre><code>&lt;?php\n    $sql = \"INSERT INTO Clientes VALUES (?, ?, ?, ?)\";\n</code></pre> <p>Cada interrogante es un par\u00e1metro que estableceremos despu\u00e9s, unas cuantas l\u00edneas m\u00e1s abajo.</p> <p>Una vez tenemos la plantilla de nuestra consulta, debemos seguir con la preparaci\u00f3n junto con 3 m\u00e9todos m\u00e1s de PHP para su completa ejecuci\u00f3n:</p> <ul> <li><code>prepare:</code> prepara la sentenci\u00e1n antes de ser ejecutada</li> <li><code>bind</code>: el tipo de uni\u00f3n (bind) de dato que puede ser mediante ' ? ' o ' :parametro '</li> <li><code>execute</code> se ejecuta la consulta uniendo la plantilla con las bariables o par\u00e1metros que hemos establecido.</li> </ul>"},{"location":"uutt/06_AccesoDatos/066_PDO.html#ejemplo-parametros","title":"Ejemplo par\u00e1metros","text":"<pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Borrando con par\u00e1metros \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    include \"config/database.inc.php\";\n\n    $conexion = null;\n\n    try { \n        $cantidad = $_GET[\"cantidad\"];\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"DELETE FROM stock WHERE unidades = ?\";\n        $sentencia = $conexion -&gt; prepare($sql);\n\n        $isOk = $sentencia -&gt; execute([$cantidad]);\n        $cantidadAfectada = $sentencia -&gt; rowCount();\n\n        echo $cantidadAfectada;\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null\n</code></pre>"},{"location":"uutt/06_AccesoDatos/066_PDO.html#ejemplo-bindparam","title":"Ejemplo bindParam","text":"<p>Muy parecido a utilizar par\u00e1metros pero esta vez la variable est\u00e1 dentro de la sentencia SQL, en este caso la hemos llamado <code>:cant</code></p> <pre><code>&lt;?php\n    include \"config/database.inc.php\";\n\n    $conexion=null;\n\n    try {\n        $cantidad = $_GET[\"cantidad\"] ?? 0;\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"DELETE FROM stock WHERE unidades = :cant\";\n\n        $sentencia = $conexion -&gt; prepare($sql);\n        $sentencia -&gt; bindParam(\":cant\", $cantidad);\n\n        $isOk = $sentencia -&gt; execute();\n\n        $cantidadAfectada = $sentencia -&gt; rowCount();\n\n        echo $cantidadAfectada;\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre>"},{"location":"uutt/06_AccesoDatos/066_PDO.html#bindparam-vs-bindvalue","title":"bindParam VS bindValue","text":"<p>Utilizaremos <code>bindValue()</code> cuando tengamos que insertar datos s\u00f3lo una vez, en cambio, deberemos usar <code>bindParam()</code> cuando tengamos que pasar datos m\u00faltiples, como por ejemplo, un array.</p> <pre><code>&lt;?php\n    // se asignan nombre a los par\u00e1metros\n    $sql = \"DELETE FROM stock WHERE unidades = :cant\";\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    // bindParam enlaza por referencia\n    $cantidad = 0;\n\n    $sentencia -&gt; bindParam(\":cant\", $cantidad);\n    $cantidad = 1;\n\n    // se eliminan con cant = 1\n    $isOk = $sentencia -&gt; execute();\n\n    // bindValue enlaza por valor\n    $cantidad = 0;\n\n    $sentencia -&gt; bindValue(\":cant\", $cantidad);\n    $cantidad = 1;\n\n    // se eliminan con cant = 0\n    $isOk = $sentencia-&gt;execute();\n</code></pre> <p>Para m\u00e1s informaci\u00f3n y uso de las variables PDO consulta el manual de PHP.</p>"},{"location":"uutt/06_AccesoDatos/066_PDO.html#actividades","title":"Actividades","text":"<ul> <li>AC614 (AEA). (RA6 / CE6b CE6c/ IC1 / 3p) - Rehaz lo realizado en las AC610-612 pero esta vez utilizando <code>PDO::FETCH_ASSOC</code>.</li> </ul>"},{"location":"uutt/06_AccesoDatos/067_Autenticacion.html","title":"Autenticaci\u00f3n","text":"Inicio de sesi\u00f3n <p>Para manejar un sistema completo de login y password con contrase\u00f1as cifradas, necesitamos un m\u00e9todo que cifre esos strings que el usuario introduce como contrase\u00f1a; tanto en el formulario de registro como en el del login, ya que al codificar una contrase\u00f1a, despu\u00e9s tenemos que decodificarla para comprobar que ambas contrase\u00f1as (la que introduce el usuario en el login y la que tenemos en la base de datos) coincidan.</p> <p>Necesitamos pues:</p> <ul> <li> <p><code>password_hash()</code> para almacenar la contrase\u00f1a en la base de datos a la hora de hacer el INSERT</p> <ul> <li> <p><code>PASSWORD_DEFAULT</code> almacenamos la contrase\u00f1a usando el m\u00e9todo de encriptaci\u00f3n bcrypt</p> </li> <li> <p><code>PASSWORD_BCRYPT</code> almacenamos la contrase\u00f1a usando el algoritmo CRYPT_BLOWFISH compatible con crypt()</p> </li> </ul> </li> <li> <p><code>password_verify()</code> para verificar el usuario y la contrase\u00f1a</p> </li> </ul> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Almacenando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $usu = $_POST[\"usuario\"];\n    $pas = $_POST[\"password\"];\n\n    $sql = \"INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    $isOk = $sentencia -&gt; execute([\n        \"usuario\" =&gt; $usu,\n        \"password\" =&gt; password_hash($pas,PASSWORD_DEFAULT)\n    ]);\n</code></pre> <p>Ahora que tenemos el usuario codificado y guardado en la base de datos, vamos a recuperarlo para poder loguearlo correctamente.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Recuperando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $usu = $_POST[\"login\"] ?? \"\";\n\n    $sql = \"select * from usuarios where usuario = ?\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; execute([$usu]);\n\n    $usuario = $sentencia -&gt; fetch();\n\n    if($usuario &amp;&amp; password_verify($_POST['pass'], $usuario['password'])) {\n        echo\"OK!\";\n    } else {\n        echo\"KO\";\n    }\n</code></pre>"},{"location":"uutt/06_AccesoDatos/068_OperacionesRegistros.html","title":"Operaciones con registros","text":""},{"location":"uutt/06_AccesoDatos/068_OperacionesRegistros.html#insertando-registros","title":"Insertando registros","text":"<p>A la hora de insertar registros en una base de datos, debemos tener en cuenta que en la tabla puede haber valores autoincrementados. Para salvaguardar \u00e9sto, lo que debemos hacer es dejar ese cambpo autoincrementado vac\u00edo, pero a la hora de hacer la conexi\u00f3n, debemos recuperarlo con el m\u00e9todo <code>lastInsertId()</code>.</p> <pre><code>&lt;?php\n    $nombre = $_GET[\"nombre\"] ?? \"SUCURSAL X\";\n    $telefono = $_GET[\"telefono\"] ?? \"636123456\";\n\n    $sql=\"INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; bindParam(\":nombre\", $nombre);\n    $sentencia -&gt; bindParam(\":telefono\", $telefono);\n\n    $isOk = $sentencia -&gt; execute();\n    $idGenerado = $conexion -&gt; lastInsertId();\n\n    echo $idGenerado;\n</code></pre>"},{"location":"uutt/06_AccesoDatos/068_OperacionesRegistros.html#consultando-registros","title":"Consultando registros","text":"<p>A la hora de recuperar los resultados de una consulta, bastar\u00e1 con invocar al m\u00e9todo <code>PDOStatement::fetch</code> para listar las filas generadas por la consulta.</p> <p>Pero debemos elegir el tipo de dato que queremos recibir entre los 3 que hay disponibles:</p> <ul> <li><code>PDO::FETCH_ASSOC:</code> array indexado cuyos keys son el nombre de las columnas.</li> <li><code>PDO::FETCH_NUM:</code> array indexado cuyos keys son n\u00fameros.</li> <li><code>PDO::FETCH_BOTH:</code> valor por defecto. Devuelve un array indexado cuyos keys son tanto el nombre de las columnas como n\u00fameros.</li> </ul> Consuta Registros <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    include \"config/database.inc.php\";\n\n    $conexion = null;\n\n    try{\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"select * from tienda\";\n\n        $sentencia = $conexion -&gt; prepare($sql);\n        $sentencia -&gt; setFetchMode(PDO::FETCH_ASSOC);\n        $sentencia -&gt; execute();\n\n        while($fila = $sentencia -&gt; fetch()){\n            echo \"Codigo:\" . $fila[\"cod\"] . \"&lt;br /&gt;\";\n            echo \"Nombre:\" . $fila[\"nombre\"] . \"&lt;br /&gt;\";\n            echo \"Tel\u00e9fono:\" . $fila[\"tlf\"] . \"&lt;br /&gt;\";\n        }\n\n    }catch(PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre> <p>Recuperando datos con una matriz como resultado de nuestra consulta</p> <p><pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql=\"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_ASSOC);\n    $sentencia -&gt; execute();\n\n    $tiendas = $sentencia -&gt; fetchAll();\n\n    foreach($tiendasas$tienda) {\n        echo\"Codigo:\" . $tienda[\"cod\"] . \"&lt;br /&gt;\";\n        echo\"Nombre:\" . $tienda[\"nombre\"] . \"&lt;br /&gt;\";\n    }\n</code></pre> Pero si lo que queremos es leer datos con forma de objeto utilizando <code>PDO::FETCH_OBJ</code>, debemos crear un objeto con propiedades p\u00fablicas con el mismo nombre que las columnas de la tabla que vayamos a consultar.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con formato de objeto \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql=\"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_OBJ);\n    $sentencia -&gt; execute();\n\n    while($t = $sentencia -&gt; fetch()) {\n        echo\"Codigo:\" . $t -&gt; cod . \"&lt;br /&gt;\";\n        echo\"Nombre:\" . $t -&gt; nombre . \"&lt;br /&gt;\";\n        echo\"Tel\u00e9fono:\" . $t -&gt; tlf . \"&lt;br /&gt;\";\n    }\n</code></pre>"},{"location":"uutt/06_AccesoDatos/068_OperacionesRegistros.html#consultas-con-modelos","title":"Consultas con modelos","text":"<p>Llevamos tiempo creando clases en PHP y las consultas tambi\u00e9n admiten este tipo de datos mediante el uso de <code>PDO::FETCH_CLASS</code></p> <p>Si usamos este m\u00e9todo, debemos tener en cuenta que los nombres de los atributos privados deben coincidir con los nombres de las columnas de la tabla que vayamos a manejar.</p> <p>A considerar</p> <p>As\u00ed pues, si por lo que sea cambiamos la estructura de la tabla debemos cambiar nuestra clase para que todo siga funcionando.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    classTienda {\n        private int $cod;\n        private string $nombre;\n        private ? string $tlf;\n\n        public function getCodigo() : int {\n            return $this -&gt; cod;\n        }\n\n        public function getNombre() : string {\n            return $this -&gt; nombre;\n        }\n\n        public function getTelefono() : ?string {\n            return $this -&gt; tlf;\n        }\n    }\n</code></pre> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consultando a trav\u00e9s de la clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda\";\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    // Aqu\u00ed 'Tienda' es el nombre de nuestra clase\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS, \"Tienda\");\n    $sentencia -&gt; execute();\n\n    while($t = $sentencia -&gt; fetch()) {\n        echo \"Codigo: \" . $t -&gt; getCodigo() . \"&lt;br /&gt;\";\n        echo \"Nombre: \" . $t -&gt; getNombre() . \"&lt;br /&gt;\";\n        echo \"Tel\u00e9fono: \" . $t -&gt; getTelefono() . \"&lt;br /&gt;\";\n\n        var_dump($t);\n    }\n</code></pre> <p>Pero \u00bfqu\u00e9 pasa si nuestras clases tienen constructor? pues que debemos indicarle, al m\u00e9todo FECTH, que rellene las propiedades despu\u00e9s de llamar al constructor y para ello hacemos uso de <code>PDO::FETCH_PROPS_LATE</code>.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consulta para una clase con constructor \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class);\n    $sentencia -&gt; execute();\n\n    $tiendas = $sentencia -&gt; fetchAll();\n</code></pre>"},{"location":"uutt/06_AccesoDatos/068_OperacionesRegistros.html#consultas-con-like","title":"Consultas con LIKE","text":"<p>Para utilizar el comod\u00edn LIKE u otros comodines, debemos asociarlo al dato y NUNCA en la propia consulta.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Utilizando comodines :: LIKE \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda where nombre like :nombre or tlf like :tlf\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class);\n\n    $cadBuscar = \"%\" . $busqueda . \"%\";\n\n    $sentencia -&gt; execute([\"nombre\" =&gt; $cadBuscar,\"tlf\" =&gt; $cadBuscar]);\n\n    $result = $sentencia -&gt; fetchAll();\n</code></pre> <p>Ten\u00e9is una lista de ejemplos muy completa en la documentaci\u00f3n oficial.</p>"},{"location":"uutt/06_AccesoDatos/068_OperacionesRegistros.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC615 (AP). (RA6 / CE6b CE6c CE6d CE6e CE6f CE6g / IC1 / 5p) - Crea una tabla nueva dentro de la base de datos <code>lol</code> que ya tienes y crea un sistema de login con usuarios. Introduce en la base de datos al menos 3 usuarios diferentes con sus contrase\u00f1as distintas. Recuerda que:</p> <ul> <li>La tabla nueva ha de llamarse <code>usuario</code></li> <li> <p>Los campos a crear en la nueva tabla deben ser</p> <ul> <li><code>id</code> [*]</li> <li><code>nombre</code></li> <li><code>usuario</code></li> <li><code>password</code></li> <li><code>email</code></li> </ul> </li> <li> <p>Las contrase\u00f1as deben ser cifradas antes de guardar el datos en la base de datos.</p> </li> <li>Crea el formulario donde el usuario introduzca los datos de registro y vinc\u00falalo para que recoja los datos mediante POST y los inserte en la base de datos si todo ha ido bien.</li> <li>No se ha de acceder a al archivo de nuevo usuario sin el formulario rellenado.</li> <li>La sentencia de INSERT debe estar controlada para que no pueda introducirse ning\u00fan dato en blanco. Ten en cuenta que est\u00e1s modificando la base de datos y no queremos campos mal rellenados.</li> <li>Si todo ha ido bien, muestra un mensaje por pantalla diciendo <code>El usuario XXX ha sido introducido en el sistema con la contrase\u00f1a YYY</code>.</li> </ul> <p>Estructura de ficheros</p> <p>Las aplicaciones van aumentando de complejidad, es el momento que empieces a pensar la estructura de ficheros antes de empezar a desarrollar. Es por ello que es recomendable separar las acciones en la mayor cantidad de ficheros posibles, pese a que esto aumente la complejidad de la gesti\u00f3n. Una buena documentaci\u00f3n es clave.</p> </li> <li> <p>PR604 (AP). (RA6 / CE6b CE6c CE6d CE6e CE6f CE6g / IC1 / 5p) - Se te ha dado el visto bueno a tu propuesta de e-commerce. Ahora toca aumentar la complejidad y generar las siguientes acciones:</p> <ul> <li>Crear una pantalla de inicio de sesi\u00f3n en el frontal. En el momento del logueo se ha de actualizar la hora de conexi\u00f3n del cliente.</li> <li>Crear una pantalla de inicio de sesi\u00f3n en el backend. En el momento del logueo se ha de actualizar la hora de conexi\u00f3n del trabajador.</li> <li>Una vez que el cliente ha accedido, se ha de mostrar una pantalla con los pedidos y otra con los carritos que tiene pendientes de finalizar.</li> <li>Una vez que el trabajador ha accedido, se ha de mostrar un listado de los pedidos de la tienda ordenados por la fecha de creaci\u00f3n.</li> </ul> <p>Estructura de ficheros</p> <p>Vas a tener que rehacer lo programado en PR603 a <code>PDO::FETCH_ASSOC</code>.</p> </li> </ul>"},{"location":"uutt/06_AccesoDatos/069_Transacciones.html","title":"Transacciones","text":"<p>Una transacci\u00f3n es un grupo de instrucciones que se ejecutan de forma completa o se anulan bajo ciertas condiciones. En un sistema transaccional, se cumplen las propiedades ACID:</p> <ul> <li>Atomicidad: Todas las operaciones de una transacci\u00f3n se realizan como una unidad indivisible. Si alguna operaci\u00f3n falla, todas las operaciones se deshacen (rollback) para mantener la coherencia de los datos.</li> <li>Consistencia: La ejecuci\u00f3n de una transacci\u00f3n lleva el sistema de un estado v\u00e1lido a otro estado v\u00e1lido. La base de datos queda en un estado consistente despu\u00e9s de una transacci\u00f3n exitosa.</li> <li>Aislamiento: Cada transacci\u00f3n se ejecuta de manera aislada de otras transacciones, lo que significa que los cambios realizados por una transacci\u00f3n no son visibles para otras transacciones hasta que se confirme la transacci\u00f3n.</li> <li>Durabilidad: Los cambios realizados por una transacci\u00f3n confirmada permanecen incluso en caso de falla del sistema, asegurando que los datos persistan de forma permanente.</li> </ul>"},{"location":"uutt/06_AccesoDatos/069_Transacciones.html#implementacion-en-php-con-pdo","title":"Implementaci\u00f3n en PHP con PDO","text":"<p>Para a\u00f1adir capacidad transaccional a una aplicaci\u00f3n PHP:</p> <ol> <li>Aseg\u00farate de que el SGBD soporte transacciones ACID.</li> <li>Define la transacci\u00f3n y deshabilita el modo auto-commit para evitar que cada instrucci\u00f3n se ejecute de forma individual.</li> <li>Ejecuta las operaciones dentro de la transacci\u00f3n.</li> <li>Confirma la transacci\u00f3n si no hay problemas, pero revisa si hay errores y realiza un rollback si es necesario.</li> </ol>"},{"location":"uutt/06_AccesoDatos/069_Transacciones.html#ejemplo-de-uso","title":"Ejemplo de uso","text":"<pre><code>&lt;?php\ntry {\n    // Inicio de la transacci\u00f3n\n    $pdo-&gt;beginTransaction();\n\n    // Ejecuci\u00f3n de instrucciones (o una sola, en el caso m\u00e1s simple)\n    $stmt = $pdo-&gt;prepare(\"INSERT INTO tabla (campo1, campo2) VALUES (?, ?)\");\n    $stmt-&gt;execute([$valor1, $valor2]);\n\n    // Confirmaci\u00f3n de la transacci\u00f3n\n    $pdo-&gt;commit();\n\n    echo \"Transacci\u00f3n completada exitosamente\";\n} catch (Exception $e) {\n    // Revisi\u00f3n de errores y rollback en caso necesario\n    $pdo-&gt;rollBack();\n    echo \"Error en la transacci\u00f3n: \" . $e-&gt;getMessage();\n}\n?&gt;\n</code></pre>"},{"location":"uutt/06_AccesoDatos/069_Transacciones.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC616 (AEA). (RA6 / CE6e CE6f CE6g / IC1 / 3p) - Modifica AC615 para que no se inserten registros en la tablas <code>usuario</code> y <code>campeones</code> si hay alg\u00fan fallo.</p> </li> <li> <p>PR605 (SA). (RA6 / CE6e CE6f CE6g / IC1 / 3p) - Modifica AC616 para que no se inserten registros en la tabla <code>pedidos</code> si hay alg\u00fan fallo.</p> </li> </ul>"},{"location":"uutt/06_AccesoDatos/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/06_AccesoDatos/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<ul> <li> <p> RA6. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han analizado las tecnolog\u00edas que permiten el acceso mediante programaci\u00f3n a la informaci\u00f3n disponible en almacenes de datos.</li> <li>b. Se han creado aplicaciones que establezcan conexiones con bases de datos.</li> <li>c. Se ha recuperado informaci\u00f3n almacenada en bases de datos.</li> <li>d. Se ha publicado en aplicaciones web la informaci\u00f3n recuperada.</li> <li>e. Se han utilizado conjuntos de datos para almacenar la informaci\u00f3n.</li> <li>f. Se han creado aplicaciones web que permitan la actualizaci\u00f3n y la eliminaci\u00f3n de informaci\u00f3n disponible en una base de datos.</li> <li>g. Se han probado y documentado las aplicaciones web.</li> </ul> </li> </ul>"},{"location":"uutt/06_AccesoDatos/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 05 01 14/11/2024 <p>Configuraci\u00f3n</p> <ul> <li>Instalaci\u00f3n y configuraci\u00f3n</li> <li>Repaso conceptos clave de bases de datos</li> </ul> <ul> <li>AC601. Documentar instalaci\u00f3n servicio de bases de datos</li> </ul> 02 18/11/2024 <p>Persistencia de datos</p> <ul> <li>L\u00f3gica</li> <li>Archivos</li> <li>SGBD</li> <li>API</li> </ul> <ul> <li>PR601. Asignando los tipos de persistencia a la SA.</li> </ul> 03 19/11/2024 <p>SQL y phpMyadmin</p> <ul> <li>Repaso SQL</li> <li>Conociendo phpMyadmin</li> </ul> <ul> <li>AC602. Crear base de datos `libreria`.</li> <li>AC603. Consultas sobre base de datos AC602.</li> <li>AC604. Modificaci\u00f3n de la base de datos AC602.</li> </ul> 04 20/11/2024 <p>CRUD</p> <ul> <li>Crear</li> <li>Leer</li> <li>Actualizar</li> <li>Borrar</li> </ul> <ul> <li>AC605. Crear tabla `clientes`.</li> <li>AC606. Mostrar datos de la tabla `clientes`.</li> <li>AC607. Actualizar datos de la tabla `clientes`.</li> <li>AC608. Eliminar datos de la tabla `clientes`.</li> <li>AC609. Modificar datos de la tabla `clientes` para consultas m\u00e1s complejas.</li> <li>PR602. Crear tablas del e-commerce.</li> </ul> 05 21/11/2024 <p>MySQLi</p> <ul> <li>Conexi\u00f3n a la BD desde un archivo PHP</li> <li>Recuperando datos de una BD</li> <li>Flujo de trabajo</li> </ul> <ul> <li>AC610. Crear BD `lol`.</li> <li>AC611. Rellenar BD `lol`.</li> <li>AC612. Lista datos de la BD creada en AC610.</li> <li>AC613. Listado interactivo creado en AC612.</li> <li>PR603. En la SA se crea un listado que permita comprar y ver el carrito.</li> </ul> 06 25/11/2024 <p>PDO</p> <ul> <li>Introducci\u00f3n</li> <li>Fichero de configuraci\u00f3n</li> <li>Sentencias preparadas</li> <li>bindParam VS bindValue</li> </ul> <ul> <li>AC614. Rehacer AC610-612 con `PDO::FETCH_ASSOC`.</li> </ul> 07 26/11/2024 <p>Autenticaci\u00f3n</p> <ul> <li>Seguridad</li> <li>Recuperar usuario y password de la BD</li> </ul> <ul> <li>AC615. A\u00f1adir control de usuarios en la base de datos `lol`</li> </ul> 08 27/11/2024 <p>Operaciones con registros</p> <ul> <li>Insertando</li> <li>Consultando</li> <li>Consultas con modelos</li> <li>Consultas con Like</li> </ul> <ul> <li>AC615. A\u00f1adir control de usuarios en la base de datos `lol`</li> <li>PR604. A\u00f1adir control de usuarios y vistas en la SA</li> </ul> 09 28/11/2024 <p>Transacciones</p> <ul> <li>Conceptos b\u00e1sicos</li> <li>Implementaci\u00f3n con PDO</li> </ul> <ul> <li>AC616. Modificar AC615 aplicando transacciones</li> <li>PR605. Modificar la SA aplicando transacciones</li> </ul> 10 02/12/2024 <p>Ficheros</p> <ul> <li>Acceso</li> <li>Modos de apertura</li> <li>Operaciones con archivos</li> <li>Informaci\u00f3n de un fichero</li> <li>Archivos PDF</li> </ul> <ul> <li>AC617. Fichero sencillo con contenido.</li> <li>AC618. A\u00f1adir funcionalidades a AC613.</li> </ul> 11 03/12/2024 <ul> <li>PR606. A\u00f1adir funcionalidades a PR603.</li> </ul> 12 04/12/2024 <p>Prueba te\u00f3rica</p> <ul> <li>Prueba espec\u00edfica</li> </ul> <p>Prueba pr\u00e1ctica</p> <ul> <li>Prueba espec\u00edfica</li> </ul>"},{"location":"uutt/06_AccesoDatos/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 06. Acceso a datos.</p> <p>Horas</p> <p>12 Sesiones - 24H</p> <p>Resultados de Aprendizaje</p> <p>RA6. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n.</p> <p>Preconocimiento</p> <p>Conocimientos adquiridos en el m\u00f3dulo de Base de Datos.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Analizar tecnolog\u00edas que permitan el acceso a la informaci\u00f3n.</li> <li>OD2: Realizar aplicaciones que interact\u00faen con una base de datos. </li> <li>OD3: Documentar y probar aplicaciones web.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Conexi\u00f3n con una base de datos</li> <li>CES2. Recuperaci\u00f3n de informaci\u00f3n de una base de datos</li> <li>CES3. Utilizaci\u00f3n de conjunto de datos para almacenar la informaci\u00f3n</li> <li>CES4. Programaci\u00f3n de aplicaciones que permitan actualizar y eliminar datos</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>A601. Documentar instalaci\u00f3n servicio de bases de datos.</p> <p>CE6a</p> <p>IE1</p> <p>IC1</p> <p>AC602. Crear base de datos <code>libreria</code>.</p> <p>CE6a</p> <p>IE1</p> <p>IC1</p> <p>AC605. Crear tabla <code>clientes</code>.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC606. Mostrar datos de la tabla <code>clientes</code>.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC610. Crear BD <code>lol</code>.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC612. Aplicaci\u00f3n que liste campos de BD <code>lol</code>.</p> <p>CE6b, CE6c, CE6d</p> <p>IE1</p> <p>IC1</p> <p>AC614. Rehacer AC610-612 con <code>PDO:FETCH_ASSOC</code>.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC616. A\u00f1adir transacciones a AC615.</p> <p>CE6e, CE6f, CE6g</p> <p>IE1</p> <p>IC1</p> <p>AC617. Fichero sencillo con contenido.</p> <p>CE6c, CE6g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC603. Consultas sobre base de datos AC602.</p> <p>CE6a</p> <p>IE1</p> <p>IC1</p> <p>AC607. Actualizar tabla <code>clientes</code>.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC608. Eliminar datos tabla <code>clientes</code></p> <p>CE6a</p> <p>IE1</p> <p>IC1</p> <p>AC611. Rellenar DB <code>lol</code>.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC618. A\u00f1adir funcionalidades de fichero a AC613.</p> <p>CE6c, CE6g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR601. Asignando los tipos de persistencia a la SA.</p> <p>CE6a</p> <p>IE1</p> <p>IC1</p> <p>AC604. Modificaci\u00f3n de la base de datos AC602.</p> <p>CE6a</p> <p>IE1</p> <p>IC1</p> <p>AC609. Modificar tabla <code>clientes</code> para consultas complejas.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>PR602. Crear tablas de la SA.</p> <p>CE6b, CE6c</p> <p>IE1</p> <p>IC1</p> <p>AC613. Modificando AC612.</p> <p>CE6b, CE6c, CE6c</p> <p>IE1</p> <p>IC1</p> <p>PR603. Aplicaci\u00f3n que recupere datos de la SA.</p> <p>CE6b, CE6c, CE6d</p> <p>IE1</p> <p>IC1</p> <p>AC615. A\u00f1adir control de acceso a BD <code>lol</code>.</p> <p>CE6b, CE6c, CE6d, CE6e, CE6f, CE6g</p> <p>IE1</p> <p>IC1</p> <p>PR604. A\u00f1adir control de acceso y vistas a la SA.</p> <p>CE6b, CE6c, CE6d, CE6e, CE6f, CE6g</p> <p>IE1</p> <p>IC1</p> <p>PR605. A\u00f1adir transacciones la SA.</p> <p>CE6e, CE6f, CE6g</p> <p>IE1</p> <p>IC1</p> <p>PR606. A\u00f1adir funcionalidades de ficheros a SA.</p> <p>CE6f, CE6g</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad. Ejercicio pr\u00e1ctico</p> <p>CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/06_AccesoDatos/Reto3.html","title":"Reto 3","text":"<p>Bienvenidos al desaf\u00edo de Desarrollo Web en Entorno Servidor, enfocado en la creaci\u00f3n de un prototipo funcional de una herramienta que permita realizar co-evaluaciones y autoevaluaciones. Este enfoque pr\u00e1ctico te permitir\u00e1 experimentar con el dise\u00f1o y la implementaci\u00f3n de soluciones web, mejorando vuestras habilidades t\u00e9cnicas y prepar\u00e1ndote para futuros proyectos de desarrollo web.</p>"},{"location":"uutt/06_AccesoDatos/Reto3.html#objetivo-del-reto","title":"Objetivo del reto","text":"<p>Desarrollar un prototipo funcional que permita realizar co-evaluaciones y autoevaluaciones. Este prototipo ha de estar realizar en un framework de PHP y ha de permitir ver a una persona externa con las credenciales <code>admin\\admin</code> ver un informe y a una persona con las credenciales <code>alumno\\alumno</code> realizar las evaluaciones.</p>"},{"location":"uutt/06_AccesoDatos/Reto3.html#requisitos-especificos","title":"Requisitos espec\u00edficos","text":"<ul> <li>Usar MVC.</li> <li>Usar un framework de PHP.</li> <li>Interfaz web.</li> </ul>"},{"location":"uutt/06_AccesoDatos/Reto3.html#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>Adem\u00e1s de los los criterios de evaluaci\u00f3n que se trabajan en las UT 06 y UT 07, se valorar\u00e1:</p> <ul> <li>Funcionalidad: El prototipo debe ser operativo.</li> <li>Adherencia a Est\u00e1ndares: El c\u00f3digo debe seguir buenas pr\u00e1cticas de programaci\u00f3n y estar bien organizado.</li> </ul>"},{"location":"uutt/06_AccesoDatos/Reto3.html#recursos-disponibles","title":"Recursos disponibles","text":"<ul> <li>Apuntes del m\u00f3dulo.</li> <li>Acceso a recursos en l\u00ednea para investigaci\u00f3n y consulta.</li> </ul>"},{"location":"uutt/06_AccesoDatos/Reto3.html#entrega","title":"Entrega","text":"<ul> <li>Trabajo individual.</li> <li>C\u00f3digo fuente del proyecto.</li> <li>Base de datos dise\u00f1ada.</li> <li>Documentaci\u00f3n breve explicando la estructura del c\u00f3digo y decisiones de dise\u00f1o.</li> </ul>"},{"location":"uutt/06_AccesoDatos/Reto3.html#fecha-de-entrega","title":"Fecha de entrega","text":"<p>La entrega ser\u00e1 a trav\u00e9s de Aules al finalizar la UT 07</p>"},{"location":"uutt/07_ProyectoI/0710_Paginacion.html","title":"Paginaci\u00f3n","text":"<p>En toda aplicaci\u00f3n hay un momento en el que se tienen que listar entidades y en el caso que sean muchos elementos realizar una paginaci\u00f3n. Es por ello que, para mejorar la experiencia del usuario se debe conocer la manera correcta de hacerlo.</p>"},{"location":"uutt/07_ProyectoI/0710_Paginacion.html#listado","title":"Listado","text":"<p>Para realizar el listado de nuestros recursos, nos centraremos en el m\u00e9todo index() y crearemos una vista espec\u00edfica para ello. En el controlador lo que haremos ser\u00e1 pasar los recursos que queramos que sean mostrados.</p> <p>backend\\PostController<pre><code>&lt;?php\n    public function index()\n    {\n        $posts = Post::get();\n\n        return view('backend.index', compact('posts'));\n    }\n</code></pre> En la vista, los mostramos uno a uno gracias al uso del <code>foreach</code>.</p> <p>backend\\index.blade.php<pre><code>@extends('dashboard.master')\n\n@section('content')\n\n    &lt;a href=\"{{ route('post.create') }}\" target=\"blank\"&gt;Create&lt;/a&gt;\n\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Id&lt;/td&gt;\n                &lt;td&gt;Title&lt;/td&gt;\n                &lt;td&gt;Posted&lt;/td&gt;\n                &lt;td&gt;Category&lt;/td&gt;\n                &lt;td&gt;Options&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            @foreach ($posts as $p)\n                &lt;tr&gt;\n                    &lt;td&gt;{{ $p-&gt;id }}&lt;/td&gt;\n                    &lt;td&gt;{{ $p-&gt;title }}&lt;/td&gt;\n                    &lt;td&gt;{{ $p-&gt;posted }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"{{ route('post.show',$p) }}\"&gt;Show&lt;/a&gt;\n                        &lt;a href=\"{{ route('post.edit',$p) }}\"&gt;Edit&lt;/a&gt;\n                        &lt;form action=\"{{ route('post.destroy', $p) }}\" method=\"post\"&gt;\n                            @method('DELETE')\n                            @csrf\n                            &lt;button type=\"submit\"&gt;Delete&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            @endforeach\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n@endsection\n</code></pre> En los listados podremos poner diferentes opciones o acciones de nuestros recursos como son el mostrarlos, editarlos o eliminarlos. </p>"},{"location":"uutt/07_ProyectoI/0710_Paginacion.html#listado-con-paginacion","title":"Listado con paginaci\u00f3n","text":"<p>La paginaci\u00f3n no es m\u00e1s que mostrar conjuntos o subconjuntos de recursos poco a poco. El cambio se realiza en el controlador, donde haremos uso de <code>paginate()</code> que ser\u00e1 el encargado de gestionar el listado con el n\u00famero de elementos que le indiquemos.</p> backend\\PostController<pre><code>&lt;?php\n    public function index()\n    {\n        $posts = Post::paginate(10);\n\n        return view('backend.index', compact('posts'));\n    }\n</code></pre> <p>Mientras que en la vista del index necesitaremos mostrar los links a las siguientes p\u00e1ginas:</p> backend\\index.blade.php<pre><code>@extends('dashboard.master')\n\n@section('content')\n\n    &lt;a href=\"{{ route('post.create') }}\" target=\"blank\"&gt;Create&lt;/a&gt;\n\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Id&lt;/td&gt;\n                &lt;td&gt;Title&lt;/td&gt;\n                &lt;td&gt;Posted&lt;/td&gt;\n                &lt;td&gt;Category&lt;/td&gt;\n                &lt;td&gt;Options&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            @foreach ($posts as $p)\n                &lt;tr&gt;\n                    &lt;td&gt;{{ $p-&gt;id }}&lt;/td&gt;\n                    &lt;td&gt;{{ $p-&gt;title }}&lt;/td&gt;\n                    &lt;td&gt;{{ $p-&gt;posted }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"{{ route('post.show',$p) }}\"&gt;Show&lt;/a&gt;\n                        &lt;a href=\"{{ route('post.edit',$p) }}\"&gt;Edit&lt;/a&gt;\n                        &lt;form action=\"{{ route('post.destroy', $p) }}\" method=\"post\"&gt;\n                            @method('DELETE')\n                            @csrf\n                            &lt;button type=\"submit\"&gt;Delete&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            @endforeach\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    {{ $posts-&gt;links() }}\n@endsection\n</code></pre> <p>Todo el trabajo lo realiza la funci\u00f3n <code>links()</code> que como ves es la que se encarga de gestionar los recursos que se ven por p\u00e1gina.</p>"},{"location":"uutt/07_ProyectoI/0711_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Documentaci\u00f3n en castellano</li> <li>Manual: Documentaci\u00f3n oficial</li> <li>Web: Cross-site request forgery, por Wikipedia</li> </ul>"},{"location":"uutt/07_ProyectoI/0711_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Novedades Laravel 11</li> <li>Video: Novedades Laravel 11 - Todo lo que necesitas saber</li> <li>Curso: Curso Laravel 11 desde cero</li> <li>Web: \u00bfEn qu\u00e9 consiste la vulnerabilidad Cross-Site Request Forgery (CSRF)? por welivesecurity</li> </ul>"},{"location":"uutt/07_ProyectoI/0712_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":""},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html","title":"Laravel: Inicio proyecto con Docker","text":"<p>Laravel, framework de PHP</p> <p>Un framework es un conjunto de herramientas, gu\u00edas y estructuras predefinidas que se utilizan para desarrollar y organizar software de manera eficiente. Funciona como una especie de \"esqueleto\" o plataforma base, sobre la cual los programadores y desarrolladores pueden construir y personalizar sus aplicaciones. Laravel es un framework de PHP para ayudarnos en un tipo de desarrollo sobre aplicaciones escritas en este lenguaje de programaci\u00f3n. Est\u00e9 framework, nos ayuda en muchas cosas al desarrollar una aplicaci\u00f3n, por medio de sus sistema de paquetes y de ser un framework del tipo MVC (Modelo-Vista-Controlador).</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Tener Docker instalado en tu Mac. Puedes descargarlo desde Docker Desktop.</li> </ul>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#entorno-de-desarrollo-docker","title":"Entorno de desarrollo: Docker","text":"<p>Todo proyecto debe comenzar con la creaci\u00f3n de una carpeta en la que tendremos todos nuestros ficheros, por ello la creamos y desde el terminal nos colocamos en ella. Una vez que estemos en ella, haremos uso de la imagen de Docker de Bitnami que incluye todo lo necesario para el desarrollo de de nuestros proyectos.</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#paso-1-creando-la-red-para-conectar-la-base-de-datos-con-la-aplicacion","title":"Paso 1: Creando la red para conectar la base de datos con la aplicaci\u00f3n","text":"<p>Laravel necesita una base de datos, ya sea MySQL o MariaDB, para almacenar la informaci\u00f3n. En este caso, usaremos la imagen de Bitnami de MariaDB para satisfacer este requerimiento. Pero debemos comenzar con el puente de conexi\u00f3n entre la base de datos y nuestro desarrollo.</p> <pre><code>docker network create laravel-network\n</code></pre> <p>Siendo <code>laravel-network</code> el nombre de esta conexi\u00f3n. Este nombre ha de ser \u00fanico en nuestro sistema, por lo que se recomienda que sea lo m\u00e1s significativo posible.</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#paso-2-creando-el-volumen-para-la-base-de-datos-y-la-persistencia-de-datos","title":"Paso 2: Creando el volumen para la base de datos y la persistencia de datos","text":"<pre><code>docker volume create --name mariadb_data\ndocker run -d --name mariadb \\\n  --env ALLOW_EMPTY_PASSWORD=yes \\\n  --env MARIADB_USER=bn_myapp \\\n  --env MARIADB_DATABASE=bitnami_myapp \\\n  --network laravel-network \\\n  --volume mariadb_data:/bitnami/mariadb \\\n  bitnami/mariadb:latest\n</code></pre> <p>Es importante resaltar que del comando anterior debemos de utilizar los datos de nuestra aplicaci\u00f3n. En este caso, hemos usado el usuario <code>bn_myapp</code> para la base de datos <code>bitnami_myapp</code> en la red <code>laravel-network</code> sobre el volumen <code>mariadb_data</code> usando la \u00faltima imagen de Bitnami de MariaDB.</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#paso-3-lanzamos-el-contenedor-usando-el-directorio-actual-en-el-que-estamos","title":"Paso 3: Lanzamos el contenedor usando el directorio actual en el que estamos","text":"<pre><code>docker run -d --name laravel \\\n  -p 8000:8000 \\\n  --env DB_HOST=mariadb \\\n  --env DB_PORT=3306 \\\n  --env DB_USERNAME=bn_myapp \\\n  --env DB_DATABASE=bitnami_myapp \\\n  --network laravel-network \\\n  --volume ${PWD}/mi-proyecto:/app \\\n  bitnami/laravel:latest\n</code></pre> <p>En este comando estamos usando la base de datos anteriormente creada, haciendo el nexo de comunicaci\u00f3n con nuestra red en el directorio que estamos. Finalmente, se despliega la \u00faltima versi\u00f3n de la imagen.</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#paso-4-comprobar-que-todo-esta-listo-para-el-desarrollo","title":"Paso 4: Comprobar que todo est\u00e1 listo para el desarrollo","text":"<p>Si todo ha ido correctamente, al acceder a nuestro localhost, nos aparecer\u00e1 la configuraci\u00f3n la versi\u00f3n de Laravel empleada y la versi\u00f3n de PHP utilizada siempre que el proyecto est\u00e9 vac\u00edo.</p> <p> </p> Inicio Laravel <p>En esta imagen se aprecia que usaremos la versi\u00f3n de Laravel 11.2 y de PHP 8.3.10. En el siguiente apartado veremos el porqu\u00e9 de estas versiones y su implantaci\u00f3n.</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#otros-entornos-de-desarrollo","title":"Otros entornos de desarrollo","text":"<p>Aunque desde el m\u00f3dulo de DWES se ha optado por el uso de Docker, es conveniente nombrar otros posibles entornos de desarrollo, m\u00e1s espec\u00edficos del sistema operativo que se use.</p> <ul> <li>Windows: Laragon y Laravel Herd</li> <li>MacOS: Laravel Herd</li> </ul> <p>Es importante remarcar que el uso de uno u otro no implicar\u00e1 que tu desarrollo sea de mayor o menor calidad, s\u00f3lo afectar\u00e1 a tu flujo de trabajo.</p>"},{"location":"uutt/07_ProyectoI/071_LaravelInicio.html#actividades","title":"Actividades","text":""},{"location":"uutt/07_ProyectoI/072_LaravelDescripcion.html","title":"Laravel 11","text":"<p>Laravel es un destacado framework PHP conocido por su elegante sintaxis, sus potentes funciones y sus herramientas f\u00e1ciles de usar para los desarrolladores. Su arquitectura soporta un desarrollo web PHP eficaz, ayud\u00e1ndote a crear aplicaciones escalables y mantenibles.</p>"},{"location":"uutt/07_ProyectoI/072_LaravelDescripcion.html#justificando-laravel-11","title":"Justificando Laravel 11","text":"<p>El uso en DWES de la versi\u00f3n 11 del framerwork viene dada por su pol\u00edtica de soporte, ya que en el curso actual ser\u00e1, de las que tengan a\u00fan soporte de bugs, la de mayor camino. Si se observa la tabla inferior, veremos como la 9 y la 10 estar\u00e1n en el fin de su ciclo de vida o termin\u00e1ndola:</p> <p> </p> Ciclo vida de versiones Laravel <p>En la versi\u00f3n 11 de Laravel se han implementado mejoras en el sistema de directorios, de seguridad y de depuraci\u00f3n.</p>"},{"location":"uutt/07_ProyectoI/072_LaravelDescripcion.html#actividades","title":"Actividades","text":"<p>realizar investigaci\u00f3n sobre los cambios de laravel 10 a 11 y como se solucionan.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html","title":"Estructura de carpetas","text":"<p>Cada vez que inicializamos un proyecto con Laravel, se crean una serie de carpetas y ficheros que son fundamentales para que nuestra aplicaci\u00f3n, bajo este framework, funcione correctamente. Su conocimiento har\u00e1 que nuestro desarrollo sea mucho m\u00e1s \u00e1gil y \u00f3ptimo.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-app","title":"Carpeta <code>app</code>","text":"<p>Es la que contiene una serie de archivos fundamentales para nuestro proyecto. Esta carpeta contiene tres carpetas:</p> <ul> <li><code>Http</code>: contiene los controladores.</li> <li><code>Models</code>: contiene los modelos.</li> <li><code>Providers</code>: contiene los proveedores de servicios que son necesarios para el correcto funcionamiento del framework.</li> </ul>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-bootstrap","title":"Carpeta <code>bootstrap</code>","text":"<p>Aqu\u00ed se ubica el fichero <code>app.php</code> que es uno de los primeros en cargarse tras el <code>index.php</code>. Adem\u00e1s, contiene una carpeta de <code>cache</code>y el fichero <code>providers.php</code>que es el que debemos modificar si generamos nuestros propios proveedores de servicios. Es una carpeta que por lo general no es necesario realizar muchos cambios en ella.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-config","title":"Carpeta <code>config</code>","text":"<p>En esta carpeta, encontramos todos los ficheros de configuraci\u00f3n de nuestra aplicaci\u00f3n como son:</p> <ul> <li><code>app.php</code>: lugar en el que se definen variables como el nombre de la app, si est\u00e1 en producci\u00f3n o no, si tiene el modo de depuraci\u00f3n activo o la url de nuestra app. Es un fichero que hay que tener en cuenta para el correcto funcionamiento. Suelen ser las variables que tendremos en producci\u00f3n.</li> <li><code>auth.php</code>: todo lo relacionado con la autenticaci\u00f3n se encuentra aqu\u00ed.</li> <li><code>database.php</code>: todo lo relacionado con la base datos est\u00e1 en este fichero, como el tipo de base de datos que usa (por defecto es SQLite) o la conexi\u00f3n al servidor de base de datos.</li> </ul>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-database","title":"Carpeta <code>database</code>","text":"<p>Lugar donde se almacenan las migraciones, seeders y factor\u00edas. Estos conceptos los veremos a lo largo de esta unidad y de la siguiente. Adicionalmente, si us\u00e1semos SQLite, es la carpeta donde se almacena.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-public","title":"Carpeta <code>public</code>","text":"<p>Es la \u00fanica carpeta a la que se puede acceder desde el navegador. Contiene una serie de ficheros que te deber\u00edan sonar del m\u00f3dulo de Despliegue de Aplicaciones Web:</p> <ul> <li><code>.htaccess</code>: gestiona el acceso de las peticiones.</li> <li><code>index.php</code>: primer fichero que se carga de nuestra aplicaci\u00f3n.</li> <li><code>robots.txt</code>: fichero con las directrices para los robots de los distintos buscadores.</li> </ul>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-resource","title":"Carpeta <code>resource</code>","text":"<p>Esta es nuestra carpeta de recursos donde guardaremos, separados en carpetas, los siguientes tipos de ficheros:</p> <ul> <li><code>css</code>: ficheros de hojas de estilos o CSS</li> <li><code>js</code>: ficheros de JavaScript.</li> <li><code>views</code>: las vistas de nuestra aplicaci\u00f3n.</li> </ul>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-routes","title":"Carpeta <code>routes</code>","text":"<p>En ella se albergan todas las rutas (redirecciones web) de nuestro proyecto. El fichero <code>web.php</code> es el que para cada ruta nos cargar\u00e1 una vista. Es una de las carpetas que veremos en profundidad en el siguiente apartado de la unidad de trabajo.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-storage","title":"Carpeta <code>storage</code>","text":"<p>Carpeta que almacena registros y archivos generados por Laravel o nuestra app.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-test","title":"Carpeta <code>test</code>","text":"<p>Los test en PHPUnit estar\u00e1n localizados en esta carpeta.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#carpeta-vendor","title":"Carpeta <code>vendor</code>","text":"<p>Todas las dependencias de nuestro framework se ubican aqu\u00ed. Es una carpeta que no deber\u00edamos modificar o dejaremos de poder recibir actualizaciones de las versiones de Laravel de manera segura.</p>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#otros-ficheros","title":"Otros ficheros","text":"<p>Fuera de estas carpetas se encuentran una serie de ficheros que es necesario conocer de su existencia para un mejor desarrollo:</p> <ul> <li><code>.env</code>: fichero de variables del entorno de desarrollo.</li> <li><code>compose.json</code>: fichero con la configuraci\u00f3n de la app que usa compose.</li> <li><code>readme.md</code>: fichero que se carga en le repositorio a modo de descripci\u00f3n o de explicaci\u00f3n de nuestro proyecto.</li> <li><code>vite.config.js</code>: una de las grandes ventajas que nos permite Laravel es el uso de integraciones de node con PHP. Estas integraciones se hacen en este fichero.</li> </ul>"},{"location":"uutt/07_ProyectoI/073_EstructuraCarpetas.html#actividades","title":"Actividades","text":""},{"location":"uutt/07_ProyectoI/074_Rutas.html","title":"Rutas","text":"<p><pre><code>&lt;?php\n\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n\n/* Vista dentro de una carpeta */\n\nRoute::get('/admin', function () {\n    return view('admin/index');\n});\n</code></pre> En Laravel, las rutas no son m\u00e1s que una instancia de la clase <code>Route</code>que vinculamos a una URI y a la que le pasamos una serie de funciones o m\u00e9todos. Las rutas pueden ser usadas para realizar:</p> <ul> <li>Un callback, que es una funci\u00f3n local definida en las mismas rutas.</li> <li>Un controlador, que es una clase aparte.</li> <li>Un componente, que es como un controlador, pero m\u00e1s flexible.</li> </ul> <p>En la carpeta <code>routes</code> se pueden generar cuatro archivos:</p> <ul> <li><code>api.php</code>: Para definir rutas de nuestras Apis Rest.</li> <li><code>channels.php</code>: Para la comunicaci\u00f3n fullduplex con los canales</li> <li><code>console.php</code>: Para crear comandos con artisan.</li> <li><code>web.php</code>: Las rutas para la aplicaci\u00f3n web.</li> </ul> <p>El que m\u00e1s nos interesa es el de <code>web.php</code> ya que es el que nos permite definir las rutas de nuestra aplicaci\u00f3n web (las que nuestro cliente consume desde el navegador). Las rutas en Laravel son un elemento central, es por ello que existen los siguiente tipos:</p> <pre><code>&lt;?php\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n</code></pre> <p>Cada uno tiene un uso espec\u00edfico que ha de ser consultado en la documentaci\u00f3n en caso de duda.</p>"},{"location":"uutt/07_ProyectoI/074_Rutas.html#nombre-de-la-ruta","title":"Nombre de la ruta","text":"<p>A las rutas se les puede asignar un nombre:</p> <pre><code>&lt;?php\nRoute::get('/', function () {\n    return view('welcome');\n})-&gt;name('bienvenida');\n</code></pre> <p>Con este nombre, podremos hacer uso de esta ruta sin tener en cuenta si en el futuro la ruta var\u00eda a nivel de c\u00f3digo. C</p>"},{"location":"uutt/07_ProyectoI/074_Rutas.html#rutas-con-parametros","title":"Rutas con par\u00e1metros","text":"<p>Ya hemos visto que con PHP podemos pasar par\u00e1metros a trav\u00e9s de la URL, como si fueran variables, que las recuper\u00e1bamos a trav\u00e9s del m\u00e9todo GET o POST. on Laravel tambi\u00e9n podemos introducir par\u00e1metros pero de una forma m\u00e1s vistosa y ordenada, de tal manera que sea visualmente m\u00e1s c\u00f3modo de recordar y de indexar por los motores de b\u00fasqueda como Google.</p> <p>Para configurar este tipo de rutas en nuestro archivo de rutas public/routes/web.php haremos lo siguiente.</p> <pre><code>&lt;?php\n\nRoute::get('cliente/{id}', function($id) {\n    return('Cliente con el id: ' . $id);\n});\n</code></pre> <p>Pero esto nos dar\u00eda un error 404 si el par\u00e1metro <code>$id</code> no existiera, para resolver \u00e9sto, podemos definir una ruta por defecto en caso de que el id (o par\u00e1metro) no sea pasado. Para ello usaremos el s\u00edmbolo ? en nuestro nombre de ruta e inicializaremos la variable con el valor que queramos.</p> <pre><code>&lt;?php\n\nRoute::get('cliente/{id?}', function($id = 1) {\n    return ('Cliente con el id: ' . $id);\n});\n</code></pre> <p>Ahora tenemos otro problema, porque estamos filtrando por id del cliente que, normalmente es un n\u00famero, pero si metemos un par\u00e1metro que no sea un n\u00famero, vamos a obtener un resultado no deseado.</p> <p>Para resolver este caso haremos uso de la cl\u00e1usula where junto con una expresi\u00f3n regular num\u00e9rica.</p> <pre><code>&lt;?php\n\nRoute::get('cliente/{id?}', function($id = 1) {\n    return ('Cliente con el id: ' . $id);\n}) -&gt; where('id', '[0-9]+');\n</code></pre> <p>Adem\u00e1s, podemos pasarle variables a nuestra URL para luego utilzarlas en nuestros archivos de plantillas o en archivos .php haciendo uso de un array asociativo. Veamos un ejemplo con la forma reducida para ahorrarnos c\u00f3digo.</p> <pre><code>&lt;?php\n\nRoute::view('datos', 'usuarios', ['id' =&gt; 5446]);\n</code></pre>"},{"location":"uutt/07_ProyectoI/074_Rutas.html#redirecciones","title":"Redirecciones","text":"<p>Muchas veces necesitamos mandar de una p\u00e1gina a otra, ya sea porqu\u00e9 la p\u00e1gina que est\u00e1 intentando ingresar el usuario no est\u00e1 disponible, o porqu\u00e9 la funci\u00f3n en s\u00ed no devuelve una vista. Para hacer las redirecciones tenemos tres formas:</p> <ul> <li> <p>Con una redirecci\u00f3n directa al URI:</p> <pre><code>&lt;?php\nreturn redirect(\"/post/create\"); \n</code></pre> </li> <li> <p>Una instancia de <code>redirect</code>, que nos permite redireccionar con la ruta con nombre:</p> <pre><code>&lt;?php\nreturn redirect()-\u203aroute(\"post.create\");\n</code></pre> </li> <li> <p>En Laravel 9 se introdujo <code>to_route()</code> que redirecciona a una ruta con nombre, como el caso anterior, pero con una sintaxis m\u00e1s sencilla.</p> <pre><code>&lt;?php\nreturn to_route(\"post.index\");\n</code></pre> </li> </ul>"},{"location":"uutt/07_ProyectoI/075_Controladores.html","title":"Controladores","text":"<p>Los controladores son el lugar perfecto para definir la l\u00f3gica de negocio de nuestra aplicaci\u00f3n o sitio web. Hace de intermediario entre la vista (lo que vemos con nuestro navegador o cliente) y el servidor donde la app est\u00e1 alojada.</p> <p>Por defecto, los controladores se guardan en una carpeta espec\u00edfica situada en <code>app/Http/Controllers</code> y tienen extensi\u00f3n <code>.php</code>.</p>"},{"location":"uutt/07_ProyectoI/075_Controladores.html#creacion","title":"Creaci\u00f3n","text":"<p>Para crear un controlador nuevo debemos hacer uso de nuestro querido aut\u00f3mata <code>artisan</code> donde le diremos que cree un controlador con el nombre que nosotros queramos.</p> <p>Abrimos la consola y nos situamos en la ra\u00edz de nuestro proyecto</p> <p><pre><code>php artisan make:controller PagesController\n</code></pre> Si todo ha salido bien, recibiremos un mensaje por consola con que todo ha ido bien y podremos comprobar que, efectivamente se ha creado el archivo <code>PagesController.php</code> con una estructura b\u00e1sica de controlador, dentro de la carpeta <code>Controllers</code> que hemos descrito anteriormente.</p>"},{"location":"uutt/07_ProyectoI/075_Controladores.html#uso","title":"Uso","text":"<p>Ahora podemos modificar nuestro archivo de rutas <code>web.pbp</code> para dejarlo limpio de l\u00f3gica y trasladar \u00e9sta a nuestro nuevo controlador. La idea de \u00e9sto es dejar el archivo <code>web.php</code> tan limpio como podamos para que, de un vistazo, se entienda todo perfectamente.</p> <p>Info</p> <p>S\u00f3lo movemos la l\u00f3gica, mientras que las cl\u00e1usulas como <code>where</code> y <code>name</code> las seguimos dejando en el archivo de rutas <code>web.php</code></p> <p>Veamos c\u00f3mo quedar\u00eda un refactor del archivo de rutas utilizando un <code>Controller</code> como el que acabamos de crear</p> <p>Ahora nos quedar\u00eda de la siguiente manera</p> <pre><code>&lt;?php\n\n// web.php (v2.0)\n\nuse App\\Http\\Controllers\\PagesController;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/', [ PagesController::class, 'inicio' ]);\nRoute::get('datos', [ PagesController::class, 'datos' ]);\nRoute::get('cliente/{id?}', [ PagesController::class, 'cliente' ]) -&gt; where('id', '[0-9]+');\nRoute::get('nosotros/{nosotros?}', [ PagesController::class, 'nosotros']) -&gt; name('nosotros');\n</code></pre> <p>y en nuestro archivo controlador lo dejar\u00edamos de la siguiente manera</p> <pre><code>&lt;?php\n\n// PagesController.php\n\nnamespace App\\Http\\Controllers;\n\nclass PagesController extends Controller\n{\n    public function inicio() { return view('welcome'); }\n\n    public function datos() { \n        return view('usuarios', ['id' =&gt; 56]);\n    }\n\n    public function cliente($id = 1) {\n        return ('Cliente con el id: ' . $id);\n    }\n\n    public function nosotros($nombre = null) {\n        $equipo = [\n            'Paco',\n            'Enrique',\n            'Maria',\n            'Veronica'\n        ];\n\n        return view('nosotros', @compact('equipo', 'nombre'));\n    }\n}\n</code></pre>"},{"location":"uutt/07_ProyectoI/075_Controladores.html#controladores-resource","title":"Controladores <code>resource</code>","text":"<p>Si a la hora de crear nuestro controlador, lo hacemos con la marca <code>--resource</code>:</p> <pre><code>php artisan make:controller PhotoController --resource\n</code></pre> <p>Este comando generar\u00e1 un controlador en <code>app/Http/Controllers/PhotoController.php</code>. El controlador contendr\u00e1 un m\u00e9todo para cada uno de los recursos disponibles. A continuaci\u00f3n, puedes registrar una ruta de recursos que apunte al controlador:</p> <pre><code>&lt;?php\n\nuse App\\Http\\Controllers\\PhotoController;\n\nRoute::resource('photos', PhotoController::class);\n</code></pre> <p>Esta \u00fanica declaraci\u00f3n de ruta crea m\u00faltiples rutas para manejar una variedad de acciones en el recurso. El controlador generado ya tendr\u00e1 m\u00e9todos para cada una de estas acciones. Recuerda, siempre puedes obtener una visi\u00f3n r\u00e1pida de las rutas de tu aplicaci\u00f3n ejecutando el comando <code>route:list</code> de <code>artisan</code>.</p> M\u00e9todo URI Acci\u00f3n Nombre de la ruta GET /photos index photos.index GET /photos/create create photos.create POST /photos store photos.store GET /photos/{photo} show photos.show GET /photos/{photo}/edit edit photos.edit PUT/PATCH /photos/{photo} update photos.update DELETE /photos/{photo} destroy photos.destroy <p>No olvides consultar la documentaci\u00f3n para profundizar m\u00e1s en los controladores de Laravel.</p>"},{"location":"uutt/07_ProyectoI/076_Vistas.html","title":"Vistas","text":"<p>A trav\u00e9s de las plantillas de Laravel vamos a escribir menos c\u00f3digo PHP y vamos a tener nuestros archivos mejor organizados. Blade es el sistema de plantillas que trae Laravel, por eso los archivos de plantillas que guardamos en el directorio de views llevan la extensi\u00f3n blade.php. De esta manera sabemos inmediatamente que se trata de una plantilla de Laravel y que forma parte de una vista que se mostrar\u00e1 en el navegador.</p>"},{"location":"uutt/07_ProyectoI/076_Vistas.html#directivas","title":"Directivas","text":"<p>Laravel tiene un gran n\u00famero de directivas que podemos utilizar para ahorrarnos mucho c\u00f3digo repetitivo entre otras funciones.</p> <p>Digamos que las directivas son peque\u00f1as funciones ya escritas que aceptan par\u00e1metros y que cada una de ellas hace una funci\u00f3n diferente dentro de Laravel.</p> <ul> <li><code>@yield</code> Define el contenido din\u00e1mico que se va a cargar. Se usa conjuntamente con <code>@section</code>.</li> <li><code>@section</code> y <code>@endsection</code> bloque de c\u00f3digo din\u00e1mico.</li> <li><code>@extends</code> importa el contenido de una plantilla ya creada.</li> </ul>"},{"location":"uutt/07_ProyectoI/076_Vistas.html#ejemplo-practico","title":"Ejemplo pr\u00e1ctico","text":"<p>Veamos un ejemplo de c\u00f3mo hacer uso del poder de Laravel para crear plantillas y no repetir c\u00f3digo. Supongamos que tenemos ciertas estructuras HTML repetidas como puede ser una cabecera header, un men\u00fa de navegaci\u00f3n nav y un par de secciones que hacen uso de este mismo c\u00f3digo. Para este apartado tenemos 2 apartados en la web:</p> <ul> <li>Blog</li> <li>Fotos</li> </ul> <p>Primero de todo tendremos que generar un archivo que haga de plantilla de nuestro sitio web. Para ello creamos el archivo <code>plantilla.blade.php</code> dentro de nuestro directorio de plantillas <code>resources/views</code>. Dicho archivo va a contener el t\u00edpico c\u00f3digo de una p\u00e1gina simple de HTML y en el body a\u00f1adiremos nuestros contenido est\u00e1tico y din\u00e1mico.</p> <pre><code>&lt;body&gt;\n    &lt;!-- CONTENIDO EST\u00c1TICO PARA TODAS LAS SECCIONES --&gt;\n    &lt;h1&gt;Bienvenid@s a Laravel&lt;/h1&gt;\n    &lt;hr&gt;\n\n    &lt;!-- MEN\u00da --&gt;\n    &lt;nav&gt;\n        &lt;a href={{ route('noticias') }}&gt;Blog&lt;/a&gt; | \n        &lt;a href={{ route('galeria') }}&gt;Fotos&lt;/a&gt;\n    &lt;/nav&gt;\n\n    &lt;!-- CONTENIDO DIN\u00c1MICO EN FUNCI\u00d3N DE LA SECCI\u00d3N QUE SE VISITA --&gt;\n    &lt;header&gt;\n        @yield('apartado')\n    &lt;/header&gt;\n&lt;/body&gt;\n</code></pre> <p>Cada secci\u00f3n que haga uso de esta plantilla contendr\u00e1 el texto est\u00e1tico <code>Bienvenid@s a Laravel</code> seguido de un men\u00fa de navegaci\u00f3n con enlaces a cada una de las secciones y el contenido din\u00e1mico de cada secci\u00f3n. Ahora crearemos los archivos din\u00e1micos de cada una de las secciones, en nuestro caso <code>blog.blade.php</code> y <code>fotos.blade.php</code></p> <pre><code>&lt;?php\n\n// blog.blade.php\n\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h2&gt;Est\u00e1s en BLOG&lt;/h2&gt;\n@endsection\n</code></pre> <p>Importamos el contenido de <code>plantilla</code> bajo la directiva <code>@extends</code> para que cargue los elementos est\u00e1ticos que hemos declarado y con la directiva <code>@section</code> y <code>@endsection</code> definimos el bloque de c\u00f3digo din\u00e1mico, en funci\u00f3n de la secci\u00f3n que estemos visitando.</p> <p>Ahora casi lo mismo para la secci\u00f3n de <code>fotos</code></p> <pre><code>&lt;?php\n\n// fotos.blade.html\n\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h2&gt;Est\u00e1s en FOTOS&lt;/h2&gt;\n@endsection\n</code></pre> <p>El \u00faltimo paso que nos queda es configurar el archivo de rutas <code>routes/web.php</code></p> <pre><code>&lt;?php\n\n// web.php\n\nRoute::view('blog', 'blog') -&gt; name('noticias');\nRoute::view('fotos', 'fotos') -&gt; name('galeria');\n</code></pre> <p>De esta manera podremos hacer uso del men\u00fa de navegaci\u00f3n que hemos puesto en nuestra plantilla y gracias a los alias <code>noticias</code> y <code>galeria</code>, la URL ser\u00e1 m\u00e1s amigable.</p>"},{"location":"uutt/07_ProyectoI/076_Vistas.html#estructuras-de-control","title":"Estructuras de control","text":"<p>Como en todo buen lenguaje de programaci\u00f3n, en Laravel tambi\u00e9n tenemos estructuras de control.</p> <p>En Blade (plantillas de Laravel) siempre que iniciemos un bloque de estructura de control debemos cerrarla:</p> <ul> <li><code>@foreach</code> ~ <code>@endforeach</code> lo usamos para recorrer arrays</li> <li><code>@if</code> ~ <code>@endif</code> para comprobar condiciones l\u00f3gicas</li> <li><code>@switch</code> ~ <code>@endswitch</code> en funci\u00f3n del valor de una variable ejecutar un c\u00f3digo</li> <li><code>@case</code> define la casu\u00edstica del switch</li> <li><code>@break</code> rompe la ejecuci\u00f3n del c\u00f3digo en curso</li> <li><code>@default</code> si ninguna casu\u00edstica se cumple</li> </ul> <pre><code>&lt;?php\n\n$equipo = ['Mar\u00eda', 'Alfredo', 'William', 'Ver\u00f3nica'];\n\n@foreach ($equipo as $nombre)\n  &lt;p&gt; {{ $nombre }} &lt;/p&gt;\n@endforeach\n</code></pre>"},{"location":"uutt/07_ProyectoI/076_Vistas.html#compact","title":"<code>@compact</code>","text":"<p>Se puede pasar variables a trav\u00e9s de las rutas como si fueran par\u00e1metros. Pero en este caso, vamos a ver otra directiva m\u00e1s, el uso de <code>@compact</code>.</p> <pre><code>&lt;?php\n\n// Uso de @compact\n$equipo = ['Mar\u00eda', 'Alfredo', 'William', 'Ver\u00f3nica'];\n\n// Route::view('nosotros', ['equipo' =&gt; 'equipo']);\nRoute::view('nosotros', @compact('equipo'));\n</code></pre>"},{"location":"uutt/07_ProyectoI/077_Migraciones.html","title":"Migraciones","text":"<p>Las migraciones se dan en una serie de operaciones con nuestra base datos. Estos ficheros definen una estructura, que luego se crear\u00e1 en el gestor de base de datos sin importar el que sea. Las migraciones de un sitio hecho con Laravel se alojan en la ruta <code>database/migrations</code> y tienen extensi\u00f3n <code>.php</code>.</p>"},{"location":"uutt/07_ProyectoI/077_Migraciones.html#crear-migraciones","title":"Crear migraciones","text":"<p>Para crear una migraci\u00f3n es necesario utilizar el comando <code>make:migration</code> de artisan para generar una migraci\u00f3n de base de datos. La nueva migraci\u00f3n ser\u00e1 colocada en tu directorio <code>database/migrations</code>. Cada nombre de archivo de migraci\u00f3n contiene una marca de tiempo que permite a Laravel determinar el orden de las migraciones:</p> <pre><code>php artisan make:migration create_flights_table\n</code></pre> <p>Laravel utilizar\u00e1 el nombre de la migraci\u00f3n para intentar adivinar el nombre de la tabla y si la migraci\u00f3n crear\u00e1 o no una nueva tabla. Si Laravel es capaz de determinar el nombre de la tabla a partir del nombre de la migraci\u00f3n, Laravel pre-llenar\u00e1 el fichero de migraci\u00f3n generado con la tabla especificada. De lo contrario, puedes simplemente especificar la tabla en el fichero de migraci\u00f3n manualmente.</p> <p>Si deseas especificar una ruta personalizada para la migraci\u00f3n generada, puedes utilizar la opci\u00f3n <code>--path</code> al ejecutar el comando <code>make:migration</code>. La ruta indicada debe ser relativa a la ruta base de la aplicaci\u00f3n.</p>"},{"location":"uutt/07_ProyectoI/077_Migraciones.html#estructura-de-una-migracion","title":"Estructura de una migraci\u00f3n","text":"<p>Una clase de migraci\u00f3n contiene dos m\u00e9todos: <code>up</code> y <code>down</code>. El m\u00e9todo <code>up</code> se utiliza para a\u00f1adir nuevas tablas, columnas o \u00edndices a tu base de datos, mientras que el m\u00e9todo <code>down</code> debe revertir las operaciones realizadas por el m\u00e9todo up.</p> <p>Dentro de ambos m\u00e9todos, puedes utilizar el constructor de <code>schemas</code> de Laravel para crear y modificar tablas de forma expresiva. Veamos como ser\u00eda esta estructura b\u00e1sica en un ejemplo.</p> <pre><code>&lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('flights', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;string('name');\n            $table-&gt;string('airline');\n            $table-&gt;timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::drop('flights');\n    }\n};\n</code></pre> <p>Nuevamente, para el manejo de tablas de la base de datos, consulta la documentaci\u00f3n oficial para todas las posibilidades que te da Laravel.</p>"},{"location":"uutt/07_ProyectoI/077_Migraciones.html#llevar-a-cabo-una-migracion","title":"LLevar a cabo una migraci\u00f3n","text":"<p>Para ejecutar todas las migraciones pendientes, ejecuta el comando <code>migrate</code> de artisan:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"uutt/07_ProyectoI/077_Migraciones.html#deshaciendo-una-migracion","title":"Deshaciendo una migraci\u00f3n","text":"<p>Para deshacer la \u00faltima operaci\u00f3n de migraci\u00f3n, puede utilizar el comando <code>rollback</code> de artisan. Este comando retrocede el \u00faltimo \"lote\" de migraciones, que puede incluir m\u00faltiples archivos de migraci\u00f3n:</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>Y si queremos deshacer todas las migraciones:</p> <pre><code>php artisan migrate:reset\n</code></pre>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html","title":"MVC y CRUD","text":"<p>En la UT anterior vimos lo que era el CRUD, ahora vamos a trasladarlo a nuestro framework para poder trabajar con \u00e9l. El manejo de datos es una parte fundamental en cualquier aplicaci\u00f3n, es por ello, que debemos hacerlo de una manera segura, eficaz y \u00f3ptima. Por suerte, Laravel nos ayuda con todo esto.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#conexion-con-mysql","title":"Conexi\u00f3n con MySQL","text":"<p>Hasta ahora hemos estado trabajando con SQLite, pero para nuestros proyectos a gran escala vamos a necesitar usar un gestor m\u00e1s potente como es MySQL. Para ello, abre el archivo <code>.env</code> en el directorio ra\u00edz de tu proyecto y configura tu conexi\u00f3n de base de datos MySQL actualizando las siguientes l\u00edneas con la informaci\u00f3n de tu base de datos:</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=nombre_de_tu_base_de_datos\nDB_USERNAME=usuario_de_tu_base_de_datos\nDB_PASSWORD=password_de_tu_base_de_datos\n</code></pre> <p>Ejecuta la migraci\u00f3n:</p> <pre><code>php artisan migrate\n</code></pre> <p>Si nos vamos al cliente que utilicemos para manejar la base de datos (phpMyAdmin por ejemplo) veremos que en nuestra base de datos se han creado todas las tablas de la migraci\u00f3n que hemos ejecutado y adem\u00e1s una tabla que se llama <code>migrations</code>. La tabla <code>migrations</code> es simplemente un registro de todas las migraciones llevadas a cabo.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#controlador-tipo-resource","title":"Controlador tipo <code>resource</code>","text":"<p>Aunque ya vimos qu\u00e9 eran este tipo de controladores, su verdadera utilidad se da cuando entramos a trabajar con el CRUD. Para ello comenzaremos creando nuestro controlador:</p> <pre><code>php artisan make:controller PostController -r\n</code></pre> <p>Esto nos crear\u00e1 un controlador del tipo <code>resource</code> vac\u00edo. Pero podemos crear tambi\u00e9n el modelo:</p> <pre><code>php artisan make:controller PostController -r -m\n</code></pre>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#uso-de-crud","title":"Uso de CRUD","text":"<p>Para poder usar los controladores deberemos a\u00f1adirlos al fichero <code>web.php</code>, que como vivos en el apartado de rutas:</p> <pre><code>Route::resource('post', PostController::class);\n</code></pre> <p>Con esto ya podemos ir trabajando en el controlador y en el modelo que hemos creado anteriormente. Ahora seguiremos un ejemplo, un post, para poder comprender c\u00f3mo trabaja Laravel a la hora de interactuar con la base de datos.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#crear-un-registro","title":"Crear un registro","text":"<p>A la hora de crear el registro, modificaremos el modelo ya que debemos indicar los campos que se pueden rellenar, de lo contrario nos dar\u00e1 error.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    use HasFactory;\n\n    protected $fillable = ['title', 'slug', 'content', 'category_id', 'description', 'posted', 'image'];\n}\n</code></pre> <p>Ahora en nuestro controlador, en el momento que consideremos podemos crear nuestro post:</p> <pre><code>&lt;?php\n\nPost::create(\n [\n 'title' =&gt; 'test title',\n 'slug' =&gt; 'test slug',\n 'content' =&gt; 'test content',\n 'category_id' =&gt; 1,\n 'description' =&gt; 'test description',\n 'posted' =&gt; 'not',\n 'image' =&gt; 'test image',\n ]\n);\n</code></pre> <p>Esto ser\u00e1 especialmente \u00fatil en combinaci\u00f3n con los formularios ya que nos permitir\u00e1 recoger datos e insertarlos en la base de datos.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#leer-un-registro","title":"Leer un registro","text":"<p>Esto se hace desde el propio objeto y los m\u00e9todos que se implemente en \u00e9l. Es por ello que ser\u00e1 particular de cada uno de los desarrollos que hagamos.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#actualizar-un-registro","title":"Actualizar un registro","text":"<p>Para actualizar un objeto necesitamos tener la instancia del objeto en concreto. En este ejemplo suponemos que es el de id=1, pero cada programa se registrar\u00e1 de una manera diferente:</p> <pre><code>&lt;?php\n$post = Post::find(1);\n$post = $post-&gt;update(\n    [\n    'title' =&gt; 'test title new',\n    'slug' =&gt; 'test slug',\n    'content' =&gt; 'test content',\n    ]\n    ); \n</code></pre> <p>De este modo, se actualizan los campos que nosotros queremos que se actualicen.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#borrar-un-registro","title":"Borrar un registro","text":"<p>Para borrar un registro debemos tener la instancia del objeto, una vez que lo tengamos, es muy parecido a la actualizaci\u00f3n.</p> <pre><code>&lt;?php\n$post = Post::find(1)-&gt;delete();\n</code></pre> <p>Con esto borrar\u00edamos el post de id=1.</p>"},{"location":"uutt/07_ProyectoI/078_MVCCRUD.html#constructor-de-consultas","title":"Constructor de consultas.","text":"<p>El constructor de consultas de base de datos de Laravel proporciona una interfaz fluida y conveniente para crear y ejecutar consultas de base de datos. Se puede utilizar para realizar la mayor\u00eda de las operaciones de base de datos en su aplicaci\u00f3n y funciona perfectamente con todos los sistemas de base de datos compatibles con Laravel.</p> <p>El constructor de consultas de Laravel utiliza la vinculaci\u00f3n de par\u00e1metros PDO para proteger su aplicaci\u00f3n contra ataques de inyecci\u00f3n SQL. No es necesario limpiar o sanitizar las cadenas pasadas al constructor de consultas como vinculaciones de consulta.</p> <p>Debido a su extensi\u00f3n, veremos un sencillo ejemplo, pero es muy recomendable consultar la documentaci\u00f3n para conocer todas las posibilidades que nos da.</p> <p>Puedes utilizar el m\u00e9todo <code>table</code> proporcionado por el DB facade (o helper) para comenzar una consulta. El m\u00e9todo <code>table</code> devuelve una instancia de constructor de consultas fluido para la tabla dada, lo que le permite encadenar m\u00e1s restricciones a la consulta y luego finalmente recuperar los resultados de la consulta utilizando el m\u00e9todo get:</p> <p><pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Mostrar una lista de todos los usuarios de la aplicaci\u00f3n.\n     */\n    public function index(): View\n    {\n        $users = DB::table('users')-&gt;get();\n\n        return view('user.index', ['users' =&gt; $users]);\n    }\n}\n</code></pre> El m\u00e9todo get devuelve una instancia de <code>Illuminate\\Support\\Collection</code> que contiene los resultados de la consulta donde cada resultado es una instancia del objeto PHP <code>stdClass</code>. Puedes acceder al valor de cada columna accediendo a la columna como una propiedad del objeto:</p> <pre><code>&lt;?php\nuse Illuminate\\Support\\Facades\\DB;\n\n$users = DB::table('users')-&gt;get();\n\nforeach ($users as $user) {\n    echo $user-&gt;name;\n}\n</code></pre>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html","title":"CRUD y formularios","text":"<p>Los formularios es la manera que tiene el usuario de interactuar con la aplicaci\u00f3n, de ah\u00ed su especial importancia y relevancia. En Laravel no iba a ser menos, y para tendremos que tener una serie de elementos que nos permitan recoger la informaci\u00f3n para poder tratarla.</p>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#la-vista","title":"La vista","text":"<p>A la hora de crear un formulario debemos crear una vista que sea la que \"pinte\" esa parte de nuestra web. Es por ello que debemos crear la nuestra en el directorio <code>resources\\views</code>. </p> <p>Respeta las rutas</p> <p>Aunque no es obligatorio, es muy recomendable que tanto vistas como controladores y modelos respeten la estructura de directorios. Si por ejemplo tenemos una carpeta <code>backend</code>con todos los controladores de la parte de la administraci\u00f3n, es recomendable que tengamos un directorio <code>backend</code> con todas las vistas de esta parte. Esto se hace por coherencia.</p> <p>Como no se ha mostrado hasta ahora el uso de plantillas maestras, lo vamos a hacer ahora con el formulario. Esto es especialmente \u00fatil cuando queremos reaprovechar partes de la vista.</p> <p>master.blade.php<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Dashboard&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {{-- &lt;header&gt;\n        Header 2\n    &lt;/header&gt; --}}\n\n    @yield('content')\n\n   &lt;section&gt;\n        @yield('morecontent')\n   &lt;/section&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Supongamos que tenemos nuestro formulario dentro de <code>resources\\views\\backend</code>. Por lo que nuestro formulario de creaci\u00f3n de post ser\u00eda:</p> backend\\create.blade.php<pre><code>@extends('master')\n\n@section('content')\n\n   &lt;form action=\"{{ route('post.store') }}\" method=\"post\"&gt;\n        @csrf\n\n        &lt;label for=\"\"&gt;Title&lt;/label&gt;\n        &lt;input type=\"text\" name=\"title\"&gt;\n\n        &lt;label for=\"\"&gt;Slug&lt;/label&gt;\n        &lt;input type=\"text\" name=\"slug\"&gt;\n\n        &lt;label for=\"\"&gt;Content&lt;/label&gt;\n        &lt;textarea name=\"content\"&gt;&lt;/textarea&gt;\n\n        &lt;label for=\"\"&gt;Description&lt;/label&gt;\n        &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;\n\n        &lt;label for=\"\"&gt;Posted&lt;/label&gt;\n        &lt;select name=\"posted\"&gt;\n            &lt;option selected value=\"not\"&gt;Not&lt;/option&gt;\n            &lt;option value=\"yes\"&gt;Yes&lt;/option&gt;\n        &lt;/select&gt;\n\n        &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n   &lt;/form&gt;\n@endsection\n</code></pre> <p>CSRF</p> <p>De manera interna, Laravel tiene una protecci\u00f3n de ataques csrf, por lo que debemos implementar en nuestros formularios la directiva <code>@csrf</code> que genera un token \u00fanico para comprobar que el formulario es realmente de nuestro sitio web. Este token var\u00eda, no es est\u00e1tico.</p>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#el-controlador","title":"El controlador","text":"<p>El controlador del post, de momento nos quedar\u00eda as\u00ed:</p> backend\\PostController<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Backend;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\Post\\PutRequest;\nuse App\\Http\\Requests\\Post\\StoreRequest;\nuse Illuminate\\Http\\Request;\n\nuse App\\Models\\Post;\n\n\nclass PostController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index()\n    {\n\n        return view('backend/index');\n\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create()\n    {\n        $post = new Post();\n\n        return view('dashboard.post.create', compact('post'));\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(StoreRequest $request)\n    {\n        Post::create($request-&gt;all());\n        return to_route('post.index');\n    }\n\n}\n</code></pre> <p>Los controladores tienen funciones espec\u00edficas para realizar acciones:</p> <ul> <li><code>create()</code>: es la que nos mostrar\u00e1 el formulario para poder crear nuestro recurso.</li> <li><code>store($request)</code>: es lo que se recoge del formulario de creaci\u00f3n y que normalmente se usa para crear el recurso con los datos recogidos. Siendo <code>$request</code> los valores de los diferentes campos del formulario.</li> </ul>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#validaciones","title":"Validaciones","text":"<p>Cuando se trabaja con datos que han de ser introducidos por el usuario, la validaci\u00f3n de los mismos es vital para la integridad y seguridad de nuestra aplicaci\u00f3n. Esto es algo que vimos en la UT 04 y que Laravel va a gestionar por nosotros. Algunas de las validaciones se pueden hacer en diferentes sitios (en lenguaje de marcado o en el cliente), nosotros vamos a ver lo que podemos hacer en el servidor.</p>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#en-el-controlador","title":"En el controlador","text":"<p>En el controlador es el lugar clave de realizar nuestras validaciones. Es el momento justo antes de crear, modificar o borrar. Es por ello que hay dos maneras de hacerlo.</p>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#metodo-1","title":"M\u00e9todo 1","text":"backend\\PostController<pre><code>&lt;?php\n     public function store(StoreRequest $request)\n    {\n        // Si no realiza la validaci\u00f3n realiza un redireccion a la ruta de la que ven\u00eda\n        $request-&gt;validate([\n            'title' =&gt; 'required|min:5|max:500',\n            'slug' =&gt; 'required|min:5|max:500',\n            'content' =&gt; 'required|min:7',\n            'description' =&gt; 'required|min:7',\n            'posted' =&gt; 'required',\n        ]);\n\n        Post::create($request-&gt;all());\n        return to_route('post.index');\n    }\n</code></pre>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#metodo-2","title":"M\u00e9todo 2","text":"<p>El segundo m\u00e9todo es usando un <code>facade</code>, en la actualidad est\u00e1n en desuso, pero qu\u00e9date con que son una clase est\u00e1tica. Para ello usaremos el <code>validator</code>:</p> backend\\PostController<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Backend;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\Post\\PutRequest;\nuse App\\Http\\Requests\\Post\\StoreRequest;\nuse Illuminate\\Http\\Request;\n\nuse App\\Models\\Post;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass PostController extends Controller\n{\n\n    public function store(StoreRequest $request)\n    {\n        // Devuelve un resultado no como en el caso anterior\n\n        $validated = Validator::make($request-&gt;all(),\n        [\n            'title' =&gt; 'required|min:5|max:500',\n            'slug' =&gt; 'required|min:5|max:500',\n            'content' =&gt; 'required|min:7',\n            'description' =&gt; 'required|min:7',\n            'posted' =&gt; 'required',\n        ]\n        );\n    }\n}\n</code></pre>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#mediante-formrequest","title":"Mediante FormRequest","text":"<p>Este es el esquema que generalmente empleamos ya que nos permite tener todas las reglas de validaci\u00f3n en un archivo aparte. Para generar esta clase, tenemos que usar un comando:</p> <pre><code>php artisan make:request \u2039NombreRequest &gt;\n</code></pre> <p>En donde \"NombreRequest\" es el nombre del archivo y clase. Tambi\u00e9n podemos guardarlos en una carpeta, al igual que ocurre con los controladores:</p> <pre><code>php artisan make:request Post/StoreRequest\n</code></pre> <p>Y tendremos un nuevo archivo en <code>App/Http/Requests/Post/StoreRequest.php</code> y que debemos rellenar con la validaci\u00f3n. En nuestro caso:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Requests\\Post;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass StoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true; // debemos modificarlo a true si queremos que solo usuarios autorizados lo puedan hacer.\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array&lt;string, \\Illuminate\\Contracts\\Validation\\ValidationRule|array&lt;mixed&gt;|string&gt;\n     */\n    public function rules(): array\n    {\n        return [\n            'title' =&gt; 'required|min:5|max:500',\n            'slug' =&gt; 'required|min:3|max:500|unique:posts',\n            'content' =&gt; 'required|min:7',\n            'description' =&gt; 'required|min:7',\n            'posted' =&gt; 'required',\n        ];\n    }\n}\n</code></pre> <p>Nuestra funci\u00f3n de <code>store</code> se modifica cambiando el tipo de <code>$request</code>a <code>StoreRequest</code>. Adem\u00e1s, debemos usar la funci\u00f3n <code>validated()</code>:</p> backend\\PostController<pre><code>&lt;?php\n    public function store(StoreRequest $request)\n    {\n        // Si no realiza la validaci\u00f3n realiza un redireccion a la ruta de la que ven\u00eda \n        Post::create($request-&gt;validated());\n        return to_route('post.index');\n    }\n</code></pre>"},{"location":"uutt/07_ProyectoI/079_CRUDFormularios.html#mostrar-errores-en-el-formulario","title":"Mostrar errores en el formulario","text":"<p>Laravel acumula los errores en una variable del sistema <code>$errors</code>. De este modo, lo podremos utilizar sin tener que preguntarnos si hay errores o no. Para ello vamos a modificar nuestra vista:</p> backend\\create.blade.php<pre><code>@extends('master')\n\n@section('content')\n    @if ($errors-&gt;any())\n        @foreach ($errors-&gt;all() as $e)\n            &lt;div&gt;\n                {{ $e }}\n            &lt;/div&gt;\n        @endforeach\n    @endif\n\n   &lt;form action=\"{{ route('post.store') }}\" method=\"post\"&gt;\n        @csrf\n\n        &lt;label for=\"\"&gt;Title&lt;/label&gt;\n        &lt;input type=\"text\" name=\"title\"&gt;\n\n        &lt;label for=\"\"&gt;Slug&lt;/label&gt;\n        &lt;input type=\"text\" name=\"slug\"&gt;\n\n        &lt;label for=\"\"&gt;Content&lt;/label&gt;\n        &lt;textarea name=\"content\"&gt;&lt;/textarea&gt;\n\n        &lt;label for=\"\"&gt;Description&lt;/label&gt;\n        &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;\n\n        &lt;label for=\"\"&gt;Posted&lt;/label&gt;\n        &lt;select name=\"posted\"&gt;\n            &lt;option selected value=\"not\"&gt;Not&lt;/option&gt;\n            &lt;option value=\"yes\"&gt;Yes&lt;/option&gt;\n        &lt;/select&gt;\n\n        &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n   &lt;/form&gt;\n@endsection\n</code></pre> <p>Usa parciales</p> <p>Como he comentado en la vista maestra, podemos usar partes parciales. De este modo, tendremos una serie de ficheros que pueden ser importados en diferentes plantillas. Un ejemplo ser\u00eda la plantilla <code>create.blaze.php</code> que podr\u00eda quedar as\u00ed:</p> <pre><code>@extends('dashboard.master')\n\n@section('content')\n\n    @include('dashboard.fragment._errors-form')\n\n&lt;form action=\"{{ route('post.store') }}\" method=\"post\"&gt;\n        @include('dashboard.post._form')\n&lt;/form&gt;\n@endsection\n</code></pre>"},{"location":"uutt/07_ProyectoI/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/07_ProyectoI/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<ul> <li> <p> RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul> </li> </ul>"},{"location":"uutt/07_ProyectoI/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/07_ProyectoI/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 01. Arquitectura Web y herramientas de programaci\u00f3n.</p> <p>Horas</p> <p>2 Sesiones - 4H</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor. </li> <li>OD3: Configurar entorno de trabajo en local.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Diferencias entre cliente y servidor</li> <li>CES2. Arquitectura de una web din\u00e1mica</li> <li>CES3. Modelo Vista Controlador (MVC)</li> <li>CES4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES5. Configuraci\u00f3n entorno local</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p>CE1a, CE1e, CE1g</p> <p>IE1</p> <p>IC1</p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</p> <p>CE1a, CE1b, CE1c, CE1f, CE1g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR102. Conocer contenido de variables en el fichero php.ini</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE1a, CE1b, CE1c, CE1d, CE1e, CE1f, CE1g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/08_ProyectoII/081_LaravelBreeze.html","title":"Laravel Breeze: Introducci\u00f3n","text":"<p>Laravel Breeze lo definen en la documentaci\u00f3n oficial como:</p> <p>Quote</p> <p>Laravel Breeze es una implementaci\u00f3n m\u00ednima y simple de todas las funciones de autenticaci\u00f3n de Laravel, incluido el inicio de sesi\u00f3n, el registro, el restablecimiento de contrase\u00f1a, la verificaci\u00f3n de correo electr\u00f3nico y la confirmaci\u00f3n de contrase\u00f1a. La capa de vista predeterminada de Laravel Breeze se compone de vistas Blade simples dise\u00f1adas con Tailwind CSS.</p> <p>Y en pocas palabras nos ofrece dos configuraciones a nivel del proyecto:</p> <ol> <li>Instalar y configurar Tailwind.css y Alpine.js.</li> <li>Instalar y configurar un sencillo esquema de autenticaci\u00f3n, registrarse, recuperar la contrase\u00f1a y middleware <sup>1</sup> para el control de acceso. </li> </ol> <p> </p> Ventana registro con Breeze <p>Para instalarlo deberemos hacer uso de la l\u00ednea de comandos artisan:</p> <pre><code>composer require laravel/breeze --dev\n</code></pre> <p>Y lo ejecutamos:</p> <pre><code>php artisan breeze:install\n</code></pre> <p>Durante la instalaci\u00f3n te da la opci\u00f3n de poder instalar directamente React o Vue, pero de momento vamos a utilizar Blade con Alpine. Anotar que Tailwind.css (o las bases para entenderlo) se deber\u00eda haber trabajado en el m\u00f3dulo de Dise\u00f1o de Interfaces, mientras que React o Vue (o las bases para entenderlo) se deber\u00edan haber trabajado en el m\u00f3dulo de Desarrollo Web en Entorno Cliente. No hay que perder el enfoque que estamos dise\u00f1ando un proyecto web y para ello nos hacen falta muchas tecnolog\u00edas para poder desplegar la aplicaci\u00f3n que hemos dise\u00f1ado.</p> <p>Es por ello que Breeze es una ayuda a la hora de implementar partes que de otro modo deber\u00edamos hacer nosotros, adem\u00e1s de realizar una serie de cambios visuales y de ficheros en nuestro proyecto.</p> <p> </p> Cambios tras la instalaci\u00f3n de Breeze <p>Revisa tus rutas</p> <p>Si has instalado Laravel Breeze una vez iniciado tu proyecto, revisa las rutas. Durante la instalaci\u00f3n puede que se hayan borrado y es un buen momento de asegurarnos que todo funciona correctamente.</p> <ol> <li> <p>Los middleware proporcionan un mecanismo pr\u00e1ctico para inspeccionar y filtrar las peticiones HTTP que entran en tu aplicaci\u00f3n..\u00a0\u21a9</p> </li> </ol>"},{"location":"uutt/08_ProyectoII/082_Tailwind.html","title":"Tailwind: dando estilos","text":"<p>Una vez que Breeze nos ha instalado Tailwind, nuestra aplicaci\u00f3n ya tendr\u00e1 otro aspecto visual. En este apartado daremos las pinceladas de uso de este framework de css para poder usarlo de una manera \u00f3ptima.</p>"},{"location":"uutt/08_ProyectoII/082_Tailwind.html#trabajando-con-tailwind","title":"Trabajando con Tailwind","text":"<p>Puesto que Tailwind tiene dependencias de node.js, es recomendable y necesario trabajar con el siguiente comando activo:</p> <pre><code>npm run dev\n</code></pre> <p>Con esto tenemos activos los paquetes <code>npm</code><sup>1</sup> que son necesarios para que se pueda compilar los estilos y componentes de Tailwind.</p>"},{"location":"uutt/08_ProyectoII/082_Tailwind.html#adaptar-estilos-a-tailwind","title":"Adaptar estilos a Tailwind","text":"<p>Laravel esta muy preparado para ir de la mano de Tailwind, es por ello que debemos entender la manera en la que este funciona. Antes de entrar en materia, hay que entender que Tailwind tiene componentes y clases. Esto hace que al renderizarlo, se carguen los estilos y las partes del componente.</p> <p>Lodo componente empieza por x.</p> dashboard.blade.php<pre><code>&lt;x-app-layout&gt;\n    &lt;x-slot name=\"header\"&gt;\n        &lt;h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\"&gt;\n            {{ __('Dashboard') }}\n        &lt;/h2&gt;\n    &lt;/x-slot&gt;\n\n    &lt;div class=\"py-12\"&gt;\n        &lt;div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\"&gt;\n            &lt;div class=\"bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg\"&gt;\n                &lt;div class=\"p-6 text-gray-900 dark:text-gray-100\"&gt;\n                    {{ __(\"You're logged in!\") }}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/x-app-layout&gt;\n</code></pre> <p>Lo interesante es quedarnos con <code>x-app-layout</code>, lo que nos indica es que esta buscando la vista <code>app</code>, que es la siguiente:</p> layouts\\app.blade.php<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"{{ str_replace('_', '-', app()-&gt;getLocale()) }}\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n\n        &lt;title&gt;{{ config('app.name', 'Laravel') }}&lt;/title&gt;\n\n        &lt;!-- Fonts --&gt;\n        &lt;link rel=\"preconnect\" href=\"https://fonts.bunny.net\"&gt;\n        &lt;link href=\"https://fonts.bunny.net/css?family=figtree:400,500,600&amp;display=swap\" rel=\"stylesheet\" /&gt;\n\n        &lt;!-- Scripts --&gt;\n        @vite(['resources/css/app.css', 'resources/js/app.js'])\n    &lt;/head&gt;\n    &lt;body class=\"font-sans antialiased\"&gt;\n        &lt;div class=\"min-h-screen bg-gray-100 dark:bg-gray-900\"&gt;\n            @include('layouts.navigation')\n\n            &lt;!-- Page Heading --&gt;\n            @if (isset($header))\n                &lt;header class=\"bg-white dark:bg-gray-800 shadow\"&gt;\n                    &lt;div class=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\"&gt;\n                        {{ $header }}\n                    &lt;/div&gt;\n                &lt;/header&gt;\n            @endif\n\n            &lt;!-- Page Content --&gt;\n            &lt;main&gt;\n                {{ $slot }}\n            &lt;/main&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Como se aprecia, una vista tira de otra, y ahora tenemos componentes propios de Tailwind. La complejidad de esta parte radicar\u00e1 en las implementaciones que tengamos que hacer. Al final hay que tener claro que los scripts de <code>@vite</code> procesar\u00e1n para que el navegador entienda nuestras plantillas. Para explorar todas las posibilidades que se nos presentan debes consultar la documentaci\u00f3n de Tailwind una vez que tengas afianzado el manejo de las vistas con Blade.</p>"},{"location":"uutt/08_ProyectoII/082_Tailwind.html#anadiendo-nuestros-estilos","title":"A\u00f1adiendo nuestros estilos","text":"<p>Si queremos a\u00f1adir nuestros estilos, deberemos modificar el fichero <code>resources/css/app.css</code>. Aunque podemos hacer uso de CSS, es recomendable conocer c\u00f3mo trabaja Tailwind a la hora de a\u00f1adir estilos extras.</p>"},{"location":"uutt/08_ProyectoII/082_Tailwind.html#actividades","title":"Actividades","text":"<ol> <li> <p>NPM permite crear los archivos necesarios para gestionar los desarrollos con Node o JavaScript en general, generando un archivo llamado package. json con metadatos del proyecto.\u00a0\u21a9</p> </li> </ol>"},{"location":"uutt/08_ProyectoII/083_VarianteVue.html","title":"Variante con Vue","text":"<p>A la hora de instalar Breeze, una de las opciones que da es instalar Vue.js o React.js, es por ello que es una decisi\u00f3n que debemos tomar cuando creemos nuestro proyecto o instalemos Breeze. En cualquier caso, la apariencia ser\u00e1 la misma que hemos visto hasta ahora con Alpine.js. Elegir un framework u otro depende de las especificaciones del proyecto.</p> <p>Lo que s\u00ed que variar\u00e1 ser\u00e1 la manera en la que se trabaja o se nombran los ficheros, pues eso depende del framework que deseemos utilizar. Lo ideal es que esto venga de la mano de lo estudiado en el m\u00f3dulo de Desarrollo Web en Entorno Cliente ya que te permitir\u00e1 trasladar tus conocimientos de ese m\u00f3dulo a este, viendo as\u00ed lo que has aprendido durante el curso.</p> <p>En la siguiente UT consumiremos una API<sup>1</sup> usando Vue 3.</p> <ol> <li> <p>API o Application Programming Interface, es un conjunto de funciones y procedimientos que permite integrar sistemas, permitiendo que sus funcionalidades puedan ser reutilizadas por otras aplicaciones o software.\u00a0\u21a9</p> </li> </ol>"},{"location":"uutt/08_ProyectoII/084_ManejoRoles.html","title":"Manejo de roles de usuario","text":"<p>Hay muchas formas de otorgar privilegios a un usuario para que tengan distintos roles en una aplicaci\u00f3n web; si es una aplicaci\u00f3n grande, o con tareas bien definidas que inclusive puede cambiar en el tiempo. Pero hay que tener en mente que no siempre queremos que todos vean toda la informaci\u00f3n o que alguien puede gestionarlo todo. Por ello, se propone una gesti\u00f3n de roles b\u00e1sica:</p> <ol> <li>Administrador - acceso total (gesti\u00f3n)</li> <li>Regular - acceso lector (web)</li> </ol> <p>Aunque ahora lo haremos de una manera m\u00e1s rudimentaria, m\u00e1s adelante veremos la manera en la que mejor se hace.</p>"},{"location":"uutt/08_ProyectoII/084_ManejoRoles.html#creando-la-migracion-para-modificar-la-tabla-de-usuarios","title":"Creando la migraci\u00f3n para modificar la tabla de usuarios","text":"<p>Si a la hora de crear la tabla de usuarios no tuviste en cuenta la posibilidad de que hubiera roles, ahora te toca modificar la tabla para a\u00f1adir este campo. Es por ello que debes crear la migraci\u00f3n pertinente:</p> <p><pre><code>php artisan make:migration AddRolToUsers\n</code></pre> Quedando el fichero:</p> <p><pre><code>&lt;? php\n// ***\npublic function up(): void\n{\n    Schema::table('users', function (Blueprint $table) {\n        $table-\u203aenum('rol',[\"admin\",\"regular\"])-\u203adefault(\"regular\");\n    });\n}\n\npublic function down() : void\n{\n    Schema::table('users', function (Blueprint $table) {\n        $table-\u203adropColumn('rol');\n    });\n\n}\n</code></pre> Y ejecutamos la migraci\u00f3n.</p>"},{"location":"uutt/08_ProyectoII/084_ManejoRoles.html#creando-el-middleware-para-la-gestion-de-roles","title":"Creando el Middleware para la gesti\u00f3n de roles","text":"<p>El siguiente paso, hayamos hecho la migraci\u00f3n o no, es a\u00f1adir la gesti\u00f3n de la aplicaci\u00f3n mediante un Middleware que nos permita adaptar nuestro esquema de roles a ella. Es por eso que debemos programar el fichero:</p> App\\Http\\Middleware\\UserAccessDashboardMiddleware.php<pre><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass UserAccessDashboardMiddleware\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        if(auth()-&gt;user()-&gt;isAdmin()){\n            return $next($request);\n        }\n\n        return redirect('/');\n    }\n}\n</code></pre> <p>Y en el modelo de usuario, a\u00f1adiremos la siguiente funci\u00f3n:</p> App\\Models\\User.php<pre><code> public function isAdmin(): bool{\n        return $this-&gt;rol == 'admin';\n    }\n</code></pre> <p>Y para poder usarlo, tocar\u00e1 modificar el fichero <code>web.php</code>, esto es novedad de Laravel 11 ya que antes se deb\u00eda modificar el kernel.</p> web.php<pre><code>&lt;?php\n\nuse App\\Http\\Controllers\\ProfileController;\nuse Illuminate\\Support\\Facades\\Route;\n\nuse App\\Http\\Middleware\\UserAccessDashboardMiddleware;\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n\nRoute::middleware('auth')-&gt;group(function () {\n    Route::get('/profile', [ProfileController::class, 'edit'])-&gt;name('profile.edit');\n    Route::patch('/profile', [ProfileController::class, 'update'])-&gt;name('profile.update');\n    Route::delete('/profile', [ProfileController::class, 'destroy'])-&gt;name('profile.destroy');\n});\n\nRoute::group(['prefix' =&gt; 'dashboard', 'middleware' =&gt; ['auth', UserAccessDashboardMiddleware::class]], function () {\n    Route::resources([\n        'post' =&gt; App\\Http\\Controllers\\Dashboard\\PostController::class,\n        'category' =&gt; App\\Http\\Controllers\\Dashboard\\CategoryController::class,\n    ]);\n    Route::get('', function () {\n        return view('dashboard');\n    })-&gt;middleware(['auth'])-&gt;name('dashboard');\n});\n\nrequire __DIR__.'/auth.php';\n</code></pre>"},{"location":"uutt/08_ProyectoII/085_EloquentORM.html","title":"Eloquent (ORM)","text":"<p>Eloquent es el creador de querys de Laravel, su prop\u00f3sito no es m\u00e1s que el de c\u00f3mo realizar operaciones que en alg\u00fan momento vas a necesitar. Con Eloquent podremos ver la consulta que esta haciendo nuestra app o incluso realizar consultas aleatorias de nuestra base de datos.</p>"},{"location":"uutt/08_ProyectoII/085_EloquentORM.html#ver-el-sql","title":"Ver el SQL","text":"<p>Si quieres ver el SQL generado de una consulta, en lugar de usar el m\u00e9todo <code>get()</code>, <code>find()</code> o <code>first()</code>, usaremos el m\u00e9todo <code>toSql()</code>. Hay dos maneras de usarlo, o con el query builder o con el objeto del modelo..</p> <pre><code>DB:table('post')-&gt;toSql();\nPost::get()-&gt;toSql()\n</code></pre>"},{"location":"uutt/08_ProyectoII/085_EloquentORM.html#joins","title":"Joins","text":"<p>Para realizar el ejemplo con joins, supongamos que queremos hacer una consulta entre las tablas <code>posts</code>y <code>categories</code>.</p> <pre><code>DB:table('post')-&gt;toSql();\nPost::join('categories', 'categories.id, '=', 'posts.category_id')-&gt;get()\n</code></pre> <p>De este modo hacemos un join con la tabla <code>categories</code>, y luego se les marca el nexo de uni\u00f3n. En caso de que dos columnas se llamen iguales, prevalece la que est\u00e1 dentro del join. Con esta funci\u00f3n se genera un inner join, si quieres explorar m\u00e1s te recomiendo la documentaci\u00f3n sobre querys</p>"},{"location":"uutt/08_ProyectoII/085_EloquentORM.html#ordenacion","title":"Ordenaci\u00f3n","text":"<p>Como en cualquier consulta, podemos elegir la manera en la que lo queremos ordenar. Para ello usaremos la funci\u00f3n <code>orderBy()</code> <pre><code>Post::orderBy('id', 'desc')-&gt;get();\n</code></pre></p>"},{"location":"uutt/08_ProyectoII/085_EloquentORM.html#clausula-where","title":"Clausula Where","text":"<p>Con el query builder podemos generar una serie de consultas con <code>where</code> muy diversas: Where o orWhere o WhereIn o WhereNotIn.</p> <pre><code>$ids = array( 1, 2, 3, 4, 5, 6);\n// Post mayores que 1\n$posts = Post::where('posts.id', '&gt;' ,'1')-&gt;get():\n// Post en el array de ids\n$posts = Post::whereIn('posts.id',$ids)-&gt;get():\n// Post no en el array de ids\n$posts = Post::whereNotIn('posts.id',$ids)-&gt;get():\n\n// El where() es sumatorio\nPost::where(\"id','\u203a=',1)-\u203awhere('category_id',1)-\u203atoSql()\n\"select * from \"posts\" where \"id\" &gt;=? and \"category_id\" = ?\"\n// Uso de orWhere()\nPost::where(\"id','\u203a=',1)-\u203aorWhere('category_id',1)-\u203atoSql()\n\"select * from \"posts\" where \"id\" &gt;=? or \"category_id\" = ?\"\n</code></pre> <p>Esto son consultas relativamente sencillas, si necesitas algo m\u00e1s complejo te recomiendo consultar la documentaci\u00f3n para que encuentres lo que necesitas.</p>"},{"location":"uutt/08_ProyectoII/085_EloquentORM.html#registros-aleatorios","title":"Registros aleatorios","text":"<p>En alg\u00fan momento puedes necesitar poner un recurso aleatorio, para ello:</p> <pre><code>Post::inRandomOrder-&gt;get();\n</code></pre> <p>Esto nos dar\u00e1 los recursos en modo aleatorio.</p>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html","title":"Seeders y Factories","text":""},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#seeders","title":"Seeders","text":"<p>Los seeders o semilleros son una forma sencilla de agregar datos a tu base de datosEs especialmente \u00fatil durante el desarrollo en el que necesita llenar la base de datos con datos de muestra en vez de generarlos de manera manual. En definitiva, es el mecanismo que tenemos para generar esos datos de prueba que siempre necesitamos al inicio de la aplicaci\u00f3n.</p>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#generar-un-seeder","title":"Generar un seeder","text":"<p>Para generar un seeder, que como puedes suponer no es m\u00e1s que un archivo, tenemos un comando de artisan: <pre><code>php artisan make:seeder \u2039NombreSeeder&gt;\n</code></pre></p> <p>Los seeders se crean en <code>database\\seeders</code>.</p>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#programar-el-seeder","title":"Programar el seeder","text":"<p>Un ejemplo de un seeder para las categor\u00edas ser\u00eda:</p> CategorySeeder.php<pre><code>&lt;?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n\nuse App\\Models\\Category;\n\nclass CategorySeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        DB::statement('SET FOREIGN_KEY_CHECKS=0');\n        Category::truncate();\n        DB::statement('SET FOREIGN_KEY_CHECKS=1');\n\n        for ($i=0; $i &lt; 20; $i++) { \n            Category::create(\n                [\n                    'title' =&gt; \"Category $i\",\n                    'slug' =&gt; \"category-$i\",\n                ]\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#ejecutar-el-seeder","title":"Ejecutar el seeder","text":"<p>Una vez definido, lo ejecutamos de la siguiente manera:</p> <pre><code>php artisan db:seed \u2039NombreSeeder&gt;\n</code></pre> <p>O ejecutamos todos los seeders que tengamos registramos en <code>DatabaseSeeder.php</code>:</p> <pre><code>php artisan db:seed \n</code></pre> <p>Y con esto rellenamos la base de datos con datos de ejemplo que pueden ser \u00fatil para comprobar nuestra aplicaci\u00f3n.</p>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#factories","title":"Factories","text":"<p>Aunque, los seeders son un mecanismo con el cual podemos generar m\u00faltiples datos de prueba, la realidad es que, generar m\u00faltiples datos de pruebas en relaciones m\u00e1s complejas como pueden ser los posts, no viene siendo la mejor opci\u00f3n, ya que, no tenemos un mecanismo sencillo para generar datos de prueba de forma variada y un esquema bien definido para generar N datos de prueba.</p> <p>Los model factories proporcionan una manera f\u00e1cil de definir m\u00faltiples datos que son predecibles y f\u00e1ciles de replicar, lo que lo convierte en aliado para poder desarrollar las distintas fases de una aplicaci\u00f3n e inclusive realizar pruebas.</p> <p>Los model factories tambi\u00e9n utilizan el componente <code>Faker</code> el cual dispone de m\u00faltiples m\u00e9todos que podemos usar para generar datos de prueba como nombres de personas, textos, n\u00fameros, telef\u00f3nicos y un largo etc.</p>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#generar-una-factory","title":"Generar una factory","text":"<p>Para generar un factory, que como puedes suponer no es m\u00e1s que un archivo, tenemos un comando de artisan: <pre><code>php artisan make:factory \u2039NombreFactory&gt;\n</code></pre></p> <p>Los seeders se crean en <code>database\\factory</code>.</p>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#programar-una-factory","title":"Programar una factory","text":"<p>Un ejemplo de un factory para las categor\u00edas ser\u00eda:</p> <pre><code>&lt;?php\n\nnamespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n/**\n * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory&lt;\\App\\Models\\Post&gt;\n */\nclass PostFactory extends Factory\n{\n    /**\n     * Define the model's default state.\n     *\n     * @return array&lt;string, mixed&gt;\n     */\n    public function definition(): array\n    {\n        $name = $this-&gt;faker-&gt;name();\n        return [\n            'title' =&gt; $name,\n            'slug' =&gt; str($name)-&gt;slug(),\n            'content' =&gt; $this-&gt;faker-&gt;paragraph(20),\n            'description' =&gt; $this-&gt;faker-&gt;paragraph(4),\n            'category_id' =&gt; $this-&gt;faker-&gt;randomElement([1,2,3]),\n            'posted' =&gt; $this-&gt;faker-&gt;randomElement(['yes','not']),\n            'image' =&gt; $this-&gt;faker-&gt;imageUrl(),\n        ];\n    }\n}\n</code></pre>"},{"location":"uutt/08_ProyectoII/086_SeedersFactories.html#ejecutar-la-factory","title":"Ejecutar la factory","text":"<p>Una vez definido, debemos modificar el <code>DatabaseSeeder.php</code> incluyendo, dentro de la funci\u00f3n <code>run()</code>:</p> <pre><code>    Post::factory(30)-&gt;create();\n</code></pre> <p>Luego solo quedar\u00eda ejecutar el seeder como hemos visto antes.</p>"},{"location":"uutt/08_ProyectoII/087_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Manual: Documentaci\u00f3n Breeze</li> <li>Manual: Documentaci\u00f3n Tailwind</li> <li>Manual: Eloquent: Getting Started</li> </ul>"},{"location":"uutt/08_ProyectoII/087_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: \u00bfQu\u00e9 es NPM, por Matias Hern\u00e1ndez en freeCodeCamp</li> <li>Web: The Ultimate Guide for Using Vue.js with Laravel por Mostafa Said en vueschool</li> <li>Video: Aprendiendo Tailwind CSS desde Cero. \u00a1Estila m\u00e1s r\u00e1pido! \u26a1 por Miguel \u00c1ngel Dur\u00e1n (midu.dev)</li> </ul>"},{"location":"uutt/08_ProyectoII/088_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":""},{"location":"uutt/08_ProyectoII/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/08_ProyectoII/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<ul> <li> <p> RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul> </li> </ul>"},{"location":"uutt/08_ProyectoII/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/08_ProyectoII/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 01. Arquitectura Web y herramientas de programaci\u00f3n.</p> <p>Horas</p> <p>2 Sesiones - 4H</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor. </li> <li>OD3: Configurar entorno de trabajo en local.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Diferencias entre cliente y servidor</li> <li>CES2. Arquitectura de una web din\u00e1mica</li> <li>CES3. Modelo Vista Controlador (MVC)</li> <li>CES4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES5. Configuraci\u00f3n entorno local</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p>CE1a, CE1e, CE1g</p> <p>IE1</p> <p>IC1</p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</p> <p>CE1a, CE1b, CE1c, CE1f, CE1g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR102. Conocer contenido de variables en el fichero php.ini</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE1a, CE1b, CE1c, CE1d, CE1e, CE1f, CE1g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/08_ProyectoII/Reto4.html","title":"Reto 4","text":"<p>Bienvenidos al desaf\u00edo de Desarrollo Web en Entorno Servidor, enfocado en la creaci\u00f3n de un prototipo funcional de una herramienta de comercio electr\u00f3nico utilizando PHP orientado a objetos. Este proyecto te invita a aplicar y profundizar en tus conocimientos en programaci\u00f3n web, enfoc\u00e1ndose en la construcci\u00f3n de un prototipo que simule la funcionalidad b\u00e1sica de una tienda en l\u00ednea. Durante este reto, se espera que desarrolles funcionalidades clave como la navegaci\u00f3n de productos, gesti\u00f3n del carrito de compras y el proceso de checkout, utilizando clases y objetos para organizar el c\u00f3digo de manera eficiente. Este enfoque pr\u00e1ctico te permitir\u00e1 experimentar con el dise\u00f1o y la implementaci\u00f3n de soluciones web, mejorando vuestras habilidades t\u00e9cnicas y prepar\u00e1ndote para futuros proyectos de desarrollo web.</p>"},{"location":"uutt/08_ProyectoII/Reto4.html#objetivo-del-reto","title":"Objetivo del reto","text":"<p>Desarrollar una aplicaci\u00f3n final funcional de una herramienta de comercio electr\u00f3nico desplegada en internet.</p>"},{"location":"uutt/08_ProyectoII/Reto4.html#requisitos-especificos","title":"Requisitos espec\u00edficos","text":"<ul> <li>Ser\u00e1 un trabajo en grupo de 4 participantes. Cada uno deber\u00e1 pasar al menos una vez por los puestos de CTO, desarrollador, tester y documentador.</li> <li>Se ha usar SCRUM y tener un repositorio remoto para poder trabajar.</li> <li> <p>Se han de realizar las siguientes fases en el reto:</p> <ul> <li>Documentar las fases en las que cada uno adquiere cada rol de manera semanal.</li> <li>Cumplimentar las co-evaluaciones y las autoevaluaciones al final de la semana.</li> </ul> </li> </ul>"},{"location":"uutt/08_ProyectoII/Reto4.html#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>Adem\u00e1s de los los criterios de evaluaci\u00f3n que se trabajan en las UT 08, UT 09 y UT 10, se valorar\u00e1:</p> <ul> <li>Funcionalidad: La aplicaci\u00f3n debe ser operativo.</li> <li>Adherencia a Est\u00e1ndares: El c\u00f3digo debe seguir buenas pr\u00e1cticas de programaci\u00f3n y estar bien organizado.</li> </ul>"},{"location":"uutt/08_ProyectoII/Reto4.html#recursos-disponibles","title":"Recursos disponibles","text":"<ul> <li>Apuntes del m\u00f3dulo.</li> <li>Acceso a recursos en l\u00ednea para investigaci\u00f3n y consulta.</li> </ul>"},{"location":"uutt/08_ProyectoII/Reto4.html#entrega","title":"Entrega","text":"<ul> <li>Trabajo en grupo.</li> <li>Repositorio remoto del proyecto.</li> <li>Documentaci\u00f3n y manual de usuario.</li> <li>Co-evaluaciones y autoevaluaciones.</li> </ul>"},{"location":"uutt/08_ProyectoII/Reto4.html#fecha-de-entrega","title":"Fecha de entrega","text":"<p>La entrega ser\u00e1 a trav\u00e9s de Aules al finalizar la UT 10</p>"},{"location":"uutt/09_ProyectoIII/091_Introduccion.html","title":"Introducci\u00f3n","text":"<p>Una API REST (tambi\u00e9n llamada API RESTful o API web RESTful) es una interfaz de programaci\u00f3n de aplicaciones (API) que se ajusta a los principios de dise\u00f1o del estilo arquitect\u00f3nico de transferencia de estado representacional (REST). Las API REST proporcionan una forma flexible y ligera de integrar aplicaciones y conectar componentes en arquitecturas de microservicios. A continuaci\u00f3n veremos una serie de conceptos que nos ayudar\u00e1n a entender este concepto.</p> <p> </p> Funcionamiento API REST"},{"location":"uutt/09_ProyectoIII/091_Introduccion.html#que-es-una-api-rest","title":"\u00bfQu\u00e9 es una API REST?","text":"<p>Como hemos dicho, una API REST, o API RESTful, es una interfaz de programaci\u00f3n de aplicaciones (API o API web) que se ajusta a los l\u00edmites de la arquitectura REST y permite la interacci\u00f3n con los servicios web de RESTful. El inform\u00e1tico Roy Fielding es el creador de la transferencia de estado representacional (REST).</p> <p>Las API son conjuntos de definiciones y protocolos que se utilizan para dise\u00f1ar e integrar el software de las aplicaciones. Suele considerarse como el contrato entre el proveedor de informaci\u00f3n y el usuario, donde se establece el contenido que se necesita por parte del consumidor (la llamada) y el que requiere el productor (la respuesta). Por ejemplo, el dise\u00f1o de una API de servicio meteorol\u00f3gico podr\u00eda requerir que el usuario escribiera un c\u00f3digo postal y que el productor diera una respuesta en dos partes: la primera ser\u00eda la temperatura m\u00e1xima y la segunda, la m\u00ednima.</p> <p>En otras palabras, las API le permiten interactuar con una computadora o un sistema para obtener datos o ejecutar una funci\u00f3n, de manera que el sistema comprenda la solicitud y la cumpla. Imag\u00ednatelas como si fueran los mediadores entre los usuarios o clientes y los recursos o servicios web que quieren obtener. Con ellas, las empresas pueden compartir recursos e informaci\u00f3n mientras conservan la seguridad, el control y la autenticaci\u00f3n, lo cual les permite determinar el contenido al que puede acceder cada usuario. </p> <p>Otra ventaja de las API es que no necesitas saber c\u00f3mo se recibe el recurso ni de d\u00f3nde proviene, s\u00f3lo que lo recibes.</p>"},{"location":"uutt/09_ProyectoIII/091_Introduccion.html#que-es-rest","title":"\u00bfQu\u00e9 es REST?","text":"<p>REST no es un protocolo ni un est\u00e1ndar, sino m\u00e1s bien un conjunto de l\u00edmites de arquitectura. Los desarrolladores de las API pueden implementarlo de distintas maneras.</p> <p>Cuando el cliente env\u00eda una solicitud a trav\u00e9s de una API de RESTful, esta transfiere una representaci\u00f3n del estado del recurso requerido a quien lo haya solicitado o al extremo. La informaci\u00f3n se entrega por medio de HTTP en uno de estos formatos: JSON (JavaScript Object Notation), HTML, XLT, Python, PHP o texto sin formato. JSON es el lenguaje de programaci\u00f3n m\u00e1s popular, ya que tanto las m\u00e1quinas como las personas lo pueden comprender y no depende de ning\u00fan lenguaje, a pesar de que su nombre indique lo contrario. </p> <p>Tambi\u00e9n es necesario tener en cuenta otros aspectos. Los encabezados y los par\u00e1metros tambi\u00e9n son importantes en los m\u00e9todos HTTP de una solicitud HTTP de la API de RESTful, ya que contienen informaci\u00f3n de identificaci\u00f3n importante con respecto a los metadatos, la autorizaci\u00f3n, el identificador uniforme de recursos (URI), el almacenamiento en cach\u00e9, las cookies y otros elementos de la solicitud. Hay encabezados de solicitud y de respuesta, pero cada uno tiene sus propios c\u00f3digos de estado e informaci\u00f3n de conexi\u00f3n HTTP.</p> <p>Para que una API se considere de RESTful, debe cumplir los siguientes criterios:</p> <ul> <li>Arquitectura cliente-servidor compuesta de clientes, servidores y recursos, con la gesti\u00f3n de solicitudes a trav\u00e9s de HTTP.</li> <li>Comunicaci\u00f3n entre el cliente y el servidor sin estado, lo cual implica que no se almacena la informaci\u00f3n del cliente entre las solicitudes de GET y que cada una de ellas es independiente y est\u00e1 desconectada del resto.</li> <li>Datos que pueden almacenarse en cach\u00e9 y optimizan las interacciones entre el cliente y el servidor.</li> <li>Una interfaz uniforme entre los elementos, para que la informaci\u00f3n se transfiera de forma estandarizada. Para ello deben cumplirse las siguientes condiciones:<ul> <li>Los recursos solicitados deben ser identificables e independientes de las representaciones enviadas al cliente.</li> <li>El cliente debe poder manipular los recursos a trav\u00e9s de la representaci\u00f3n que recibe, ya que esta contiene suficiente informaci\u00f3n para permitirlo.</li> <li>Los mensajes autodescriptivos que se env\u00eden al cliente deben contener la informaci\u00f3n necesaria para describir c\u00f3mo debe procesarla.</li> <li>Debe contener hipertexto o hipermedios, lo cual significa que cuando el cliente acceda a alg\u00fan recurso, debe poder utilizar hiperv\u00ednculos para buscar las dem\u00e1s acciones que se encuentren disponibles en ese momento.</li> </ul> </li> <li>Un sistema en capas que organiza en jerarqu\u00edas invisibles para el cliente cada uno de los servidores (los encargados de la seguridad, del equilibrio de carga, etc.) que participan en la recuperaci\u00f3n de la informaci\u00f3n solicitada.</li> <li>C\u00f3digo disponible seg\u00fan se solicite (opcional), es decir, la capacidad para enviar c\u00f3digos ejecutables del servidor al cliente cuando se requiera, lo cual ampl\u00eda las funciones del cliente. </li> </ul> <p>Si bien la API de REST debe cumplir todos estos par\u00e1metros, resulta m\u00e1s f\u00e1cil de usar que un protocolo definido previamente, como SOAP (protocolo simple de acceso a objetos), el cual tiene requisitos espec\u00edficos, como la mensajer\u00eda XML y la seguridad y el cumplimiento integrados de las operaciones, que lo hacen m\u00e1s lento y pesado. </p> <p>Por el contrario, REST es un conjunto de pautas que pueden implementarse seg\u00fan sea necesario. Por esta raz\u00f3n, las API de REST son m\u00e1s r\u00e1pidas y ligeras, cuentan con mayor capacidad de ajuste y, por ende, resultan ideales para el Internet de las cosas (IoT) y el desarrollo de aplicaciones para dispositivos m\u00f3viles. </p>"},{"location":"uutt/09_ProyectoIII/092_ArchivoAPI.html","title":"Archivo api.php","text":"<p>Una de las novedades de Laravel 11 es que el archivo <code>api.php</code> no se encuentra publicado, para publicarlo, debemos de ejecutar el siguiente comando de artisan:</p> <pre><code>php artisan install:api\n</code></pre> <p>A la hora de instalar y activar lo referente a la API nos instala paquetes muy interesantes como <code>sail</code>, <code>sanctum</code>, <code>tinker</code>, <code>pestphp</code> o <code>spatie</code> entre otros. De todos ellos, el que veremos nosotros en la siguiente UT es <code>sanctum</code> que se encarga de gestionar los accesos a la API, ya que de momento nuestra API es p\u00fablica.</p> <p>El archivo <code>api.php</code> contiene las rutas para la creaci\u00f3n de una API REST. Estas rutas est\u00e1n dise\u00f1adas para no tener estado, por lo que las solicitudes que ingresan a la aplicaci\u00f3n a trav\u00e9s de estas rutas deben autenticarse mediante tokens y no tendr\u00e1n acceso al estado de la sesi\u00f3n.</p> <p>Como puedes deducir el fichero <code>api.php</code>es el an\u00f3logo de <code>web.php</code>, es decir, todo lo que hemos trabajado sobre uno, lo podemos trabajar en el otro. </p>"},{"location":"uutt/09_ProyectoIII/092_ArchivoAPI.html#actividades","title":"Actividades","text":"<p>ver los paquetes, y cambios que se han realizado con la activacion.</p>"},{"location":"uutt/09_ProyectoIII/093_Controlador.html","title":"Crear el controlador de la API","text":"<p>Una vez que hemos entendido lo que es una API REST, podemos pasar a la parte t\u00e9cnica. Cuando comenzamos este bloque, justificamos el uso de Laravel 11, y aqu\u00ed es donde hay grandes cambios con versiones anteriores. Es por ello que si tienes experiencia con versiones anteriores vas a ver que hay cosas que cambian. Es por ello que gran parte de las configuraciones de Laravel 11 se han fusionado en el fichero <code>app.php</code>. Las rutas de las API las tenemos en el fichero <code>routes\\api.php</code></p>"},{"location":"uutt/09_ProyectoIII/093_Controlador.html#crear-el-controlador","title":"Crear el controlador","text":"<p>Como viene siendo habitual, mediante artisan creamos el controlador. Lo ideal es agrupar todos los controladores de la API en una carpeta. Adem\u00e1s, recuerda que si no tienes creado el modelo asociado al controlador puede ser un buen momento de hacerlo.</p> <p>El cambio que tendremos en este tipo de controladores es que los <code>return</code> o que devolvamos o mandemos se har\u00e1 en formato JSON, que se har\u00e1 con la funci\u00f3n <code>json()</code>.</p> Ejemplo de devoluci\u00f3n en formato JSON<pre><code>&lt;?php\nreturn response()-&gt;json(Category::get());\n</code></pre> <p>Una vez creado y programado nuestro controlador, deberemos modificar el fichero <code>api.php</code> para incluir la ruta:</p> <pre><code>Route::resource('category', CategoryController::class)-&gt;except(['create', 'edit']);\n</code></pre> <p>Tip</p> <p>En el <code>except</code> indicamos lo que no queremos que sea posible en nuestra API. Esto es interesante por si queremos generar una API de solo consulta o bien que pueda ser usada por personas con privilegios para la edici\u00f3n o creaci\u00f3n.</p>"},{"location":"uutt/09_ProyectoIII/093_Controlador.html#acceso-a-la-api","title":"Acceso a la API","text":"<p>A\u00fan es pronto para hacer algo m\u00e1s autom\u00e1tico, pero para ver que todo est\u00e1 correcto podemos acceder al uso de la API. Para ello, deberemos poner en la URL <code>/api/</code>, esto har\u00e1 que nuestra aplicaci\u00f3n entienda que es el uso de API, y no tengamos conflicto con las rutas de la propia aplicaci\u00f3n. </p> <p>Ejemplo</p> <p>Para la url https://miweb.com/api/category,  me devolver\u00e1 lo que tenga programado en la funci\u00f3n <code>index()</code> del controlador. M\u00e1s adelante veremos que podemos acceder a todas las posibilidades que nos da CRUD as\u00ed como a los m\u00e9todos que nosotros personalicemos.</p>"},{"location":"uutt/09_ProyectoIII/094_CRUDAPI.html","title":"CRUD utilizando la API","text":"<p>Para trabajar con la API y todo lo que tiene que ver con el CRUD, necesitaremos tener los modelos de lo que queramos consumir de nuestra API. Esto es importante tenerlo en cuenta, pues de otro modo no podremos hacer uso de estas funcionalidades. Adem\u00e1s, tendremos que tener presente los <code>requests</code> que ya tengamos en nuestra aplicaci\u00f3n. Lo que nos va a cambiar, como ya hemos comentado, es la manera en la que se entregan los datos pero en esencia es lo mismo.</p>"},{"location":"uutt/09_ProyectoIII/094_CRUDAPI.html#preparando-el-controlador","title":"Preparando el controlador","text":"<p>A la hora de tener nuestro controlador para consumir la API debemos hacer algo similar a lo que ya implementamos. Por eso aprovechando el ejemplo de las categor\u00edas de un blog, ser\u00eda algo parecido a lo siguiente:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Requests\\Category\\PutRequest;\nuse App\\Http\\Requests\\Category\\StoreRequest;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Category;\n\nclass CategoryController extends Controller\n{\n    public function all()\n    {\n        return response()-&gt;json(Category::get());\n    }\n\n    public function index()\n    {\n        return response()-&gt;json(Category::paginate(10));\n    }\n\n    public function store(StoreRequest $request)\n    {\n        return response()-&gt;json(Category::create($request-&gt;validated()));\n    }\n\n    public function show(Category $category)\n    {\n        return response()-&gt;json($category);\n    }\n\n    public function update(PutRequest $request, Category $category)\n    {\n        $category-&gt;update($request-&gt;validated());\n        return response()-&gt;json($category);\n    }\n\n    public function destroy(Category $category)\n    {\n        $category-&gt;delete();\n        return response()-&gt;json('ok');\n    }\n}\n</code></pre> <p>Si miras con atenci\u00f3n, ver\u00e1s que no es m\u00e1s que mandar la informaci\u00f3n en formato JSON. Puede que en alg\u00fan desarrollo quieras mostrar o editar parte de la informaci\u00f3n, este es el momento de programarlo.</p> <p>Consideraciones</p> <ul> <li>Vigila las importaciones y que tengas todas las dependencias creadas. Puede que te falte alg\u00fan <code>StoreRequest</code>o alg\u00fan fichero para que todo funcione correctamente. </li> <li>Los m\u00e9todos <code>index()</code> y <code>edit()</code> no tienen sentido que los implementemos en la API, al ser m\u00e9todos pensados para devolver una vista o un formulario.</li> </ul>"},{"location":"uutt/09_ProyectoIII/094_CRUDAPI.html#actividades","title":"Actividades","text":""},{"location":"uutt/09_ProyectoIII/095_ProbarAPI.html","title":"Probar la API","text":"<p>En este apartado no haremos un consumo como tal de la API, es m\u00e1s s\u00f3lo haremos pruebas para saber si lo que estamos programando va bien encaminado. El consumo de la API lo veremos en la siguiente UT donde le daremos sentido a los datos que nos devuelve nuestra API.</p>"},{"location":"uutt/09_ProyectoIII/095_ProbarAPI.html#probando-con-postman","title":"Probando con Postman","text":"<p>Postman es uno de los software m\u00e1s conocidos para realizar este tipo de pruebas. En los \u00faltimos tiempos ha perdido algo de peso por sus decisiones, pero sigue siendo una opci\u00f3n m\u00e1s que interesante para probar y comprobar lo que nos devuelve nuestra API.</p> <p>Las peticiones de tipo GET se pueden hacer por el navegador, pero el resto no. Es por esto que, como desarrolladores, necesitamos de este tipo de software cuando estamos trabajando con API.</p> Petici\u00f3n GETTipos de peticionesConfiguraci\u00f3n para aceptar y enviar JSONPetici\u00f3n POSTPetici\u00f3n PUT <p></p> <p></p> <p></p> <p></p> <p></p> <p>Lo que nos devuelve es lo que hayamos configurado en el controlador. Este tipo de software nos permite simular el comportamiento de nuestra API de una manera limpia y sencilla, s\u00f3lo debemos configurarlo correctamente.</p> <p>Adem\u00e1s, entendiendo las respuestas que nos da, podemos ver si hay fallos en nuestra API y poder depurarlos pues de otro modo no podr\u00edamos corregirlos o saber que existen.</p> <p>Tip</p> <p>Las consultas a la API son bastante sensible a fallos, si no est\u00e1 perfecto no se hace. Uno de los problemas que te puedes encontrar en la programaci\u00f3n de tus modelos es el uso que hace Laravel de los <code>$timestamps</code>, por lo que te recomiendo que si no los vas a usar y vas a usar la API los coloque como <code>false</code>.</p>"},{"location":"uutt/09_ProyectoIII/095_ProbarAPI.html#alternativas-a-postman","title":"Alternativas a Postman","text":"<p>Como se ha comentado, Postman ha sido el rey durante mucho tiempo, pero han surgido alternativas:</p> <ul> <li>Insomnia</li> <li>Firecamp</li> <li>Thunderclient</li> </ul> <p>Cada uno tiene sus ventajas e inconvenientes, pero te animo a que pruebes el que mejor se acomoda a tu flujo de trabajo.</p>"},{"location":"uutt/09_ProyectoIII/098_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Web: \u00bfQu\u00e9 es una API REST? por IBM</li> <li>Web: \u00bfQu\u00e9 es una API REST? por Red Hat</li> </ul>"},{"location":"uutt/09_ProyectoIII/098_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Roy T. Fielding</li> <li>Video: \u00bfQue es un API REST? \u2714\ufe0f \u00bfPara que sirve un API RESTful? \ud83d\udef0\ufe0f \u00bfEl futuro del Backend? por Victor Robles</li> <li>Video: 6 consejos para que DISE\u00d1ES BIEN tu API REST por Manuel Zapata</li> <li>Curso: Curso de POSTMAN COMPLETO Y DESDE CERO por dfbastidas</li> </ul>"},{"location":"uutt/09_ProyectoIII/099_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":""},{"location":"uutt/09_ProyectoIII/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/09_ProyectoIII/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<ul> <li> <p> RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul> </li> </ul>"},{"location":"uutt/09_ProyectoIII/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/09_ProyectoIII/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 01. Arquitectura Web y herramientas de programaci\u00f3n.</p> <p>Horas</p> <p>2 Sesiones - 4H</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor. </li> <li>OD3: Configurar entorno de trabajo en local.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Diferencias entre cliente y servidor</li> <li>CES2. Arquitectura de una web din\u00e1mica</li> <li>CES3. Modelo Vista Controlador (MVC)</li> <li>CES4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES5. Configuraci\u00f3n entorno local</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p>CE1a, CE1e, CE1g</p> <p>IE1</p> <p>IC1</p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</p> <p>CE1a, CE1b, CE1c, CE1f, CE1g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR102. Conocer contenido de variables en el fichero php.ini</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE1a, CE1b, CE1c, CE1d, CE1e, CE1f, CE1g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"},{"location":"uutt/10_ProyectoReactivo/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/10_ProyectoReactivo/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"<ul> <li> <p> RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul> </li> </ul>"},{"location":"uutt/10_ProyectoReactivo/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 11/09/2024 <p>Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 12/09/2024 <p>Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/10_ProyectoReactivo/ResumenUT.html","title":"Resumen UT","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad de Trabajo:</p> <p>Resumen Unidad de trabajo</p> <p>Unidad de Trabajo</p> <p>UT 01. Arquitectura Web y herramientas de programaci\u00f3n.</p> <p>Horas</p> <p>2 Sesiones - 4H</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor. </li> <li>OD3: Configurar entorno de trabajo en local.</li> </ul> <p>Competencias Personales y Sociales. Transversales</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul> <p>Contenidos Espec\u00edficos</p> <ul> <li>CES1. Diferencias entre cliente y servidor</li> <li>CES2. Arquitectura de una web din\u00e1mica</li> <li>CES3. Modelo Vista Controlador (MVC)</li> <li>CES4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES5. Configuraci\u00f3n entorno local</li> </ul> <p>Materiales y Recurso</p> <ul> <li>Apuntes aportados por el profesorado.</li> <li>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</li> </ul> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p>CE1a, CE1e, CE1g</p> <p>IE1</p> <p>IC1</p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</p> <p>CE1a, CE1b, CE1c, CE1f, CE1g</p> <p>IE1</p> <p>IC1</p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>PR102. Conocer contenido de variables en el fichero php.ini</p> <p>CE1c, CE1e</p> <p>IE1</p> <p>IC1</p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</p> <p>CE1a, CE1b, CE1c, CE1d, CE1e, CE1f, CE1g</p> <p>IE4, IE5</p> <p>IC1, IC5</p>"}]}