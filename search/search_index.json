{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Desarrollo Web en Entorno Servidor","text":"<p>Estos apuntes desarrollan los materiales did\u00e1cticos del m\u00f3dulo de Desarrollo Web en Entorno Servidor (DWES). Dicho m\u00f3dulo se desarrolla en el segundo curso del Ciclo Superior de Desarrollo de Aplicaciones Web (DAW), cuyas ense\u00f1anzas m\u00ednimas se definen en el RD 686/2010, el cual fue modificado por el RD 405/2023, y se concreta el curr\u00edculo en la Orden 50/2012 de 25 de septiembre.</p> <p>Informaci\u00f3n del m\u00f3dulo</p> <p>Cabe destacar las siguientes caracter\u00edsticas del m\u00f3dulo DWES:</p> <ul> <li>En la modalidad presencial la duraci\u00f3n del m\u00f3dulo es de 160 horas lectivas, a raz\u00f3n de 8 horas semanales.</li> <li>Se ha planificado bas\u00e1ndose en 4 sesiones lectivas por semana, con 2 horas de duraci\u00f3n cada una de ellas.</li> </ul>"},{"location":"index.html#competencias","title":"Competencias","text":"<p>El presente m\u00f3dulo contribuye a las siguiente competencias profesionales, personales y sociales:</p> <ul> <li>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue - de aplicaciones web.</li> <li>d. Gestionar bases de datos, interpretando su dise\u00f1o l\u00f3gico y verificando integridad, consistencia, seguridad y accesibilidad de los datos.</li> <li>f. Integrar contenidos en la l\u00f3gica de una aplicaci\u00f3n web, desarrollando componentes de acceso a datos adecuados a las especificaciones.</li> <li>g. Desarrollar interfaces en aplicaciones web de acuerdo con un manual de estilo, utilizando lenguajes de marcas y est\u00e1ndares web.</li> <li>h. Desarrollar componentes multimedia para su integraci\u00f3n en aplicaciones web, empleando herramientas espec\u00edficas y siguiendo las especificaciones establecidas.</li> <li>j. Desarrollar e integrar componentes software en el entorno del servidor web, empleando herramientas y lenguajes espec\u00edficos, para cumplir las especificaciones de la aplicaci\u00f3n.</li> <li>k. Desarrollar servicios para integrar sus funciones en otras aplicaciones web, asegurando su funcionalidad.</li> <li>l. Integrar servicios y contenidos distribuidos en aplicaciones web, asegurando su funcionalidad.</li> <li>m. Completar planes de pruebas verificando el funcionamiento de los componentes software desarrollados, seg\u00fan las especificaciones.</li> <li>n. Elaborar y mantener la documentaci\u00f3n de los procesos de desarrollo, utilizando herramientas de generaci\u00f3n de documentaci\u00f3n y control de versiones.</li> <li>\u00f1. Desplegar y distribuir aplicaciones web en distintos \u00e1mbitos de implantaci\u00f3n, verificando su comportamiento y realizando modificaciones.</li> <li>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</li> </ul>"},{"location":"index.html#resultados-de-aprendizaje","title":"Resultados  de Aprendizaje","text":"<p>Resultado de Aprendizaje (RA)</p> <p>Los resultados de aprendizaje son conocimientos, destrezas, habilidades y competencias que esperamos que el alumno adquiera. </p> <p>Es importante conocer los RAs ya que la evaluaci\u00f3n de la formaci\u00f3n profesional se basa en la valoraci\u00f3n dichos resultados de aprendizaje. Los Resultados de Aprendizaje de DWES son:</p> <ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> <li>Escribe sentencias ejecutables por un servidor web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</li> <li>Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</li> <li>Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</li> <li>Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</li> <li>Desarrolla aplicaciones web de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n.</li> <li>Desarrolla servicios web reutilizables y accesibles mediante protocolos web, verificando su funcionamiento.</li> <li>Genera p\u00e1ginas web din\u00e1micas analizando y utilizando tecnolog\u00edas y frameworks del servidor web que a\u00f1adan c\u00f3digo al lenguaje de marcas.</li> <li>Desarrolla aplicaciones web h\u00edbridas seleccionando y utilizando tecnolog\u00edas, frameworks servidor y repositorios heterog\u00e9neos de informaci\u00f3n.</li> </ol>"},{"location":"index.html#mapa-general-de-la-programacion-didactica","title":"Mapa General de la Programaci\u00f3n Did\u00e1ctica","text":"<p>A modo de resumen de la Programaci\u00f3n did\u00e1ctica (PD) de DWES, se muestra la secuenciaci\u00f3n de las Unidades de trabajo planificadas y los Resultados de aprendizaje (RAs) tratados en cada una de dichas unidades.</p> <p> </p> Mapa general de la programaci\u00f3n did\u00e1ctica."},{"location":"index.html#planificacion-unidades-de-trabajo","title":"Planificaci\u00f3n Unidades de Trabajo","text":"<p>Las unidades de trabajo (UT) se han planificado seg\u00fan el calendario escolar 2024/2025, es por ello que se distribuyen de la siguiente forma:</p>"},{"location":"index.html#primera-evaluacion","title":"Primera evaluaci\u00f3n","text":"<ul> <li>UT 01: Arquitectura Web y herramientas de programaci\u00f3n (4 horas)</li> <li>UT 02: PHP (24 horas)</li> <li>UT 03: POO (16 horas)</li> <li>UT 04: Programaci\u00f3n web (20 horas)</li> <li>UT 05: Herramientas programaci\u00f3n web (8 horas)</li> </ul>"},{"location":"index.html#segunda-evaluacion","title":"Segunda evaluaci\u00f3n","text":"<ul> <li>UT 06: Acceso a Datos (24 horas)</li> <li>UT 07: Proyecto I Estructura (20 horas)</li> <li>UT 08: Proyecto II L\u00f3gica de negocio (20 horas)</li> <li>UT 09: Proyecto III Servicios Rest (12 horas)</li> <li>UT 10: Proyecto IV Servicios Rest avanzados (12 horas)</li> </ul>"},{"location":"evaluacion.html","title":"Evaluaci\u00f3n","text":"<p>En la siguiente p\u00e1gina se especifica la manera en la que se eval\u00faa al alumno. </p> <p>Evaluaci\u00f3n</p> <p>El objetivo de la evaluaci\u00f3n del proceso de aprendizaje del alumnado es conocer si ha alcanzado, para esta unidad de trabajo, el/los resultado/s de aprendizaje seg\u00fan los diferentes criterios de evaluaci\u00f3n. La evaluaci\u00f3n del proceso de aprendizaje de la unidad de trabajo ser\u00e1 continua, formativa, integradora y criterial.</p> <p>A lo largo de este apartado se enunciar\u00e1n una serie de conceptos que permitir\u00e1n la explicaci\u00f3n de la manera de evaluaci\u00f3n del presente m\u00f3dulo.</p>"},{"location":"evaluacion.html#resultados-de-aprendizaje","title":"Resultados  de Aprendizaje","text":"<p>Resultado de Aprendizaje (RA)</p> <p>Los resultados de aprendizaje son conocimientos, destrezas, habilidades y competencias que esperamos que el alumno adquiera. </p> <p>Es importante conocer los RAs ya que la evaluaci\u00f3n de la formaci\u00f3n profesional se basa en la valoraci\u00f3n dichos resultados de aprendizaje. </p>"},{"location":"evaluacion.html#aportacion-a-la-calificacion-de-los-ras","title":"Aportaci\u00f3n a la calificaci\u00f3n de los RAs","text":"RA % de la calificaci\u00f3n RA 01: Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. 8% RA 02: Escribe sentencias ejecutables por un servidor web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. 8% RA 03: Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. 13% RA 04: Desarrolla aplicaciones web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. 8% RA 05: Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. 13% RA 06: Desarrolla aplicaciones web de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. 15% RA 07: Desarrolla servicios web reutilizables y accesibles mediante protocolos web, verificando su funcionamiento. 15% RA 08: Genera p\u00e1ginas web din\u00e1micas analizando y utilizando tecnolog\u00edas y frameworks del servidor web que a\u00f1adan c\u00f3digo al lenguaje de marcas. 13% RA 09: Desarrolla aplicaciones web h\u00edbridas seleccionando y utilizando tecnolog\u00edas, frameworks servidor y repositorios heterog\u00e9neos de informaci\u00f3n. 10%"},{"location":"evaluacion.html#procedimiento-de-evaluacion","title":"Procedimiento de Evaluaci\u00f3n","text":"<p>La calificaci\u00f3n de cada RA se obtendr\u00e1 de la media ponderada de las actividades formativas trabajadas. Para ello se utilizan los siguientes procedimientos de evaluaci\u00f3n:</p> <p> </p> Procedimientos de Evaluaci\u00f3n."},{"location":"evaluacion.html#calificacion","title":"Calificaci\u00f3n","text":"<p>La evaluaci\u00f3n es un proceso continuo y formativo basado en la calificaci\u00f3n de competencias a trav\u00e9s de los resultados de aprendizaje. En el caso de DWES se realiza la media de las calificaciones de cada RA.</p> <p>Importante</p> <p>LA CALIFICACI\u00d3N FINAL DEL M\u00d3DULO se obtendr\u00e1 de la media ponderada de las calificaciones de cada RA. Durante las evaluaciones, \u00e9sta ser\u00e1 la ponderaci\u00f3n de los RAs visto hasta ese momento del curso.</p>"},{"location":"evaluacion.html#evaluaciones-ordinaria-y-extraordinaria","title":"Evaluaciones Ordinaria y Extraordinaria","text":"<p>En el caso de no superar alg\u00fan resultado de aprendizaje durante la evaluaci\u00f3n continua:</p> <p>Importante</p> <ul> <li>En primera instancia se recupera el RA en el examen de convocatoria final Ordinaria.</li> <li>En segunda instancia si todav\u00eda no se ha superado el RA en la Ordinaria se debe aprobar en examen final de la convocatoria Extraordinaria.</li> </ul>"},{"location":"planificacionaula.html","title":"Programaci\u00f3n de Aula","text":"<p>A continuaci\u00f3n se muestra una estimaci\u00f3n temporal de la obtenci\u00f3n de las unidades did\u00e1cticas secuenciadas anteriormente. Se ha planificado bas\u00e1ndose en 4 sesiones lectivas por semana, con 2 horas de duraci\u00f3n cada una de ellas.</p> Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 xx/xx/xxxx <p>Se trabajar\u00e1 la teor\u00eda de Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <p>Se trabajar\u00e1n las siguientes actividades: </p> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 xx/xx/xxxx <p>Se trabajar\u00e1 la teor\u00eda de Herramientas</p> <ul> <li>Servidores</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <p>Se trabajar\u00e1n las siguientes actividades: </p> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/ut01.html","title":"UT 1: Arquitectura Web y herramientas de programaci\u00f3n","text":""},{"location":"uutt/ut01.html#resumen-ut","title":"Resumen UT","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 4 sesiones</p> <p>Resultado de aprendizaje:</p> <ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ol> <p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p>"},{"location":"uutt/ut01.html#11-modelo-clienteservidor","title":"1.1 Modelo Cliente/servidor","text":"Modelo Cliente-Servidor. <p>Hoy en d\u00eda, es frecuente que uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes. En las aplicaciones web, el cliente es el navegador web. El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"uutt/ut01.html#pagina-web-dinamica","title":"P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <ul> <li>Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</li> <li>Utilizar servicios REST de terceros invocados desde JS.</li> </ul> <p> </p> Web est\u00e1tica vs Web din\u00e1mica. <p>Las tecnolog\u00edas empleadadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp"},{"location":"uutt/ut01.html#single-page-application-spa","title":"Single Page Application (SPA)","text":"<p>A d\u00eda de hoy, gran parte del desarrollo web est\u00e1 transicionando de una arquitectura web cliente-servidor cl\u00e1sica donde el cliente realiza una llamada al backend, por una arquitectura SPA donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunicandose mediante JSON).</p> <p> </p> Arquitectura tradicional vs SPA."},{"location":"uutt/ut01.html#12-arquitectura-de-3-capas","title":"1.2 Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"uutt/ut01.html#tier","title":"Tier","text":"<p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> <p>Cluster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"uutt/ut01.html#layer","title":"Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n. Es la capa donde la aplicaci\u00f3n se muestra al usuario. B\u00e1sicamente es la GUI (Graphical User Interface, Interfaz Gr\u00e1fica de Usuario). En el caso de una aplicaci\u00f3n web ser\u00eda el c\u00f3digo HTML que se carga directamente en el navegador web. En cualquier caso, se ejecuta directamente en el equipo del cliente.</li> <li>Negocio / Aplicaci\u00f3n / Proceso. Es la capa intermedia donde se lleva a cabo toda la l\u00f3gica de la aplicaci\u00f3n. Siempre se ejecutar\u00e1 en el lado servidor. Esta capa, tras realizar todos los c\u00e1lculos y/o operaciones sobre los datos, genera el c\u00f3digo HTML que ser\u00e1 presentado al usuario en la capa siguiente.</li> <li>Datos / Persistencia. Es la capa que almacena los datos. B\u00e1sicamente, en condiciones normales, hace referencia al propio SGBD que es el encargado de almacenar los datos. Dependiendo de la arquitectura de la aplicaci\u00f3n, esta capa y la de negocio se pueden encontrar fisicamente en el mismo equipo, aunque tambi\u00e9n es posible que se tengan que separar por cuestiones de rendimiento. La capa de datos sirve todas la informaci\u00f3n necesaria a la capa de negocio para llevar a cabo sus operaciones.</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> <p> </p> Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas."},{"location":"uutt/ut01.html#13-mvc","title":"1.3 MVC","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interactura con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.</p>"},{"location":"uutt/ut01.html#14-decisiones-de-diseno","title":"1.4 Decisiones de dise\u00f1o","text":"<p>A la hora de desarrollar cualquier proyecto web debemos realizarnos una serie de preguntas como son:</p> <ul> <li>\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?</li> <li>\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?</li> <li>\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?</li> <li>\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?</li> <li>\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?</li> <li>\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?</li> </ul> <p>Una vez que las hemos respondido, estaremos listo para comenzar con \u00e9l.</p>"},{"location":"uutt/ut01.html#15-herramientas","title":"1.5 Herramientas","text":""},{"location":"uutt/ut01.html#servidor-web","title":"Servidor Web","text":"<p>Un servidor web es un software que forma parte del servidor y tiene como misi\u00f3n principal devolver informaci\u00f3n ((HTML, CSS, JS, JSON, im\u00e1genes, etc...)) cuando recibe peticiones  HTTP (GET, POST, DELETE, ...) por parte de los usuarios.</p> <p>El producto m\u00e1s implantando es Apache Web Server, creado en 1995.</p> <ul> <li>Software libre y multiplataforma</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx. Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>Para saber m\u00e1s...</p> <p>Comparativa servidores web</p>"},{"location":"uutt/ut01.html#servidor-de-aplicaciones","title":"Servidor de Aplicaciones","text":"<ul> <li>Software que ofrece servicios adicionales a los de un servidor web:<ul> <li>Clustering</li> <li>Balanceo de carga</li> <li>Tolerancia a fallos</li> </ul> </li> <li>Tomcat es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java.<ul> <li>Contiende un contenedor Web Java que interpreta Servlets y JSP.</li> </ul> </li> </ul> <p>Info</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"uutt/ut01.html#lenguajes-en-el-servidor","title":"Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"uutt/ut01.html#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones empresariales. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas.</p> <p> </p> JavaEE."},{"location":"uutt/ut01.html#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente en la versi\u00f3n 8.X . Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code> y <code>?&gt;</code><ul> <li>Para generar codigo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code></li> </ul> </li> <li>Multitud de librer\u00edas y frameworks:<ul> <li>Laravel, Symfony, Codeigniter, Zend</li> </ul> </li> </ul> <p>Su documentaci\u00f3n es bastante completa</p> <p>El siguiente mapa mental muestra un resumen de sus elementos:</p> <p> </p> PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p>"},{"location":"uutt/ut01.html#16-puesta-en-marcha","title":"1.6 Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A lo largo del curso vamos a utilizar la versi\u00f3n 8.X de PHP.</p>"},{"location":"uutt/ut01.html#xampp","title":"XAMPP","text":"<p>XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP o MAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>la \u00faltima P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>XAMPP en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"uutt/ut01.html#docker","title":"Docker","text":"<p>Docker es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Para ello es necesario tener instalado Docker Desktop en nuestros entornos de desarrollo (el cual ya incluye en nucleo de Docker y la herramienta docker compose).</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar PHP <code>8.X</code>. Respecto a Docker, para escribir los apuntes hemos utilizado la version <code>24</code> y la version <code>2.23.2</code> de docker compose. Finalmente, la versi\u00f3n de Docker Desktop que hemos utilizado es la <code>4.25.2</code>.</p>"},{"location":"uutt/ut01.html#plantilla-servidor-web-php","title":"Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arraque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos a rellenar el archivo <code>docker-compose.yaml</code> con:</p> Apache y PHP <pre><code># Services\nservices:\n  # Apache + PHP\n  apache_php:\n    image: php:8-apache\n    # Preparamos un volumen para almacenar nuestro c\u00f3digo\n    volumes:\n      - ./src/:/var/www/html\n    expose:\n      - 80\n    ports:\n      - 80:80\n</code></pre> Nginx y PHP <pre><code># Services\nservices:\n\n  nginx:\n    image: nginx:1.19\n    ports:\n      - 80:80\n    volumes:\n      - ./src:/var/www/php\n      - ./.docker/nginx/conf.d:/etc/nginx/conf.d # cargamos la configuraci\u00f3n de un fichero externo\n    depends_on:\n      - php   # enlazamos nginx con php\n\n  php:\n    image: php:8.0-fpm\n    working_dir: /var/www/php\n    volumes:\n      - ./src:/var/www/php\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente. Para facilitar la puesta en marcha, ten\u00e9is la plantilla de Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o Nginx/PHP disponible para su descarga.</p> <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp\n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./\n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash\n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando</li> <li><code>docker ps -a</code>: Ver todos los contenedores</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas</li> </ul> <p>Otra forma m\u00e1s sencilla para lanzar de nuevo los contenedores y gestionarlos una vez creados es utilizar el interfaz gr\u00e1fico que ofrece Docker Desktop.</p> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetas para todo el stack de desarrollo. En posteriores sesiones utilizaremos tanto Devilbox como Laradock</p> <p>Pero quiero saber c\u00f3mo funciona...</p> <p>En el m\u00f3dulo de Despliegue de Aplicaciones Web estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"uutt/ut01.html#entorno-de-desarrollo","title":"Entorno de desarrollo","text":"<p>En este curso vamos a emplear Visual Studio Code como entorno de desarrollo (IDE). Existen otras alternativas, siendo PhpStorm la m\u00e1s conocida pero siendo de pago. Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP Intelephense</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo.</p> <p> </p> Docker en VSCode."},{"location":"uutt/ut01.html#hola-mundo","title":"Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como <code>index.php</code>, al acceder a <code>http://localhost</code> autom\u00e1ticamente cargar\u00e1 el resultado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"uutt/ut01.html#17-referencias","title":"1.7 Referencias","text":"<ul> <li>Curso de introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/</li> <li>Art\u00edculo Arquitecturas Web y su evoluci\u00f3n</li> </ul>"},{"location":"uutt/ut01.html#18-autoevaluacion","title":"1.8 Autoevaluaci\u00f3n","text":""},{"location":"uutt/ut01.html#19-prueba-especifica","title":"1.9 Prueba espec\u00edfica","text":""},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html","title":"Modelo Cliente/servidor","text":"<p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p> <p> </p> Modelo Cliente-Servidor. <p>Hoy en d\u00eda, es frecuente que uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes. En las aplicaciones web, el cliente es el navegador web. El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html#pagina-web-dinamica","title":"P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <ul> <li>Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</li> <li>Utilizar servicios REST de terceros invocados desde JS.</li> </ul> <p> </p> Web est\u00e1tica vs Web din\u00e1mica. <p>Las tecnolog\u00edas empleadadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp"},{"location":"uutt/01_Arquitectura/011_ModeloClienteServidor.html#single-page-application-spa","title":"Single Page Application (SPA)","text":"<p>A d\u00eda de hoy, gran parte del desarrollo web est\u00e1 transicionando de una arquitectura web cliente-servidor cl\u00e1sica donde el cliente realiza una llamada al backend, por una arquitectura SPA donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunicandose mediante JSON).</p> <p> </p> Arquitectura tradicional vs SPA."},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html","title":"Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html#tier","title":"Tier","text":"<p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> <p>Cluster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"uutt/01_Arquitectura/012_Arquitectura3Capas.html#layer","title":"Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n. Es la capa donde la aplicaci\u00f3n se muestra al usuario. B\u00e1sicamente es la GUI (Graphical User Interface, Interfaz Gr\u00e1fica de Usuario). En el caso de una aplicaci\u00f3n web ser\u00eda el c\u00f3digo HTML que se carga directamente en el navegador web. En cualquier caso, se ejecuta directamente en el equipo del cliente.</li> <li>Negocio / Aplicaci\u00f3n / Proceso. Es la capa intermedia donde se lleva a cabo toda la l\u00f3gica de la aplicaci\u00f3n. Siempre se ejecutar\u00e1 en el lado servidor. Esta capa, tras realizar todos los c\u00e1lculos y/o operaciones sobre los datos, genera el c\u00f3digo HTML que ser\u00e1 presentado al usuario en la capa siguiente.</li> <li>Datos / Persistencia. Es la capa que almacena los datos. B\u00e1sicamente, en condiciones normales, hace referencia al propio SGBD que es el encargado de almacenar los datos. Dependiendo de la arquitectura de la aplicaci\u00f3n, esta capa y la de negocio se pueden encontrar fisicamente en el mismo equipo, aunque tambi\u00e9n es posible que se tengan que separar por cuestiones de rendimiento. La capa de datos sirve todas la informaci\u00f3n necesaria a la capa de negocio para llevar a cabo sus operaciones.</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> <p> </p> Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas."},{"location":"uutt/01_Arquitectura/013_MCV.html","title":"Modelo Vista Controlador (MVC)","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interactura con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.</p>"},{"location":"uutt/01_Arquitectura/013_MCV.html#131-aea-actividad-de-ensenanzaaprendizaje","title":"1.3.1 - AEA. (Actividad de Ense\u00f1anza/Aprendizaje)","text":"<p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> RA CEs IC Puntuaci\u00f3n RA1 CE1a, CE1e, CE1g IC1 3p"},{"location":"uutt/01_Arquitectura/014_Decisiones.html","title":"Decisiones de dise\u00f1o","text":"<p>A la hora de desarrollar cualquier proyecto web debemos realizarnos una serie de preguntas como son:</p> <ul> <li>\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?</li> <li>\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?</li> <li>\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?</li> <li>\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?</li> <li>\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?</li> <li>\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?</li> </ul> <p>Una vez que las hemos respondido, estaremos listo para comenzar con \u00e9l.</p> <p> </p> Decisiones de dise\u00f1o."},{"location":"uutt/01_Arquitectura/015_Herramientas.html","title":"Herramientas","text":""},{"location":"uutt/01_Arquitectura/015_Herramientas.html#servidor-web","title":"Servidor Web","text":"<p>Un servidor web es un software que forma parte del servidor y tiene como misi\u00f3n principal devolver informaci\u00f3n ((HTML, CSS, JS, JSON, im\u00e1genes, etc...)) cuando recibe peticiones  HTTP (GET, POST, DELETE, ...) por parte de los usuarios.</p> <p>El producto m\u00e1s implantando es Apache Web Server, creado en 1995.</p> <ul> <li>Software libre y multiplataforma</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx. Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>Para saber m\u00e1s...</p> <p>Comparativa servidores web</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#servidor-de-aplicaciones","title":"Servidor de Aplicaciones","text":"<ul> <li>Software que ofrece servicios adicionales a los de un servidor web:<ul> <li>Clustering</li> <li>Balanceo de carga</li> <li>Tolerancia a fallos</li> </ul> </li> <li>Tomcat es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java.<ul> <li>Contiende un contenedor Web Java que interpreta Servlets y JSP.</li> </ul> </li> </ul> <p>Info</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#lenguajes-en-el-servidor","title":"Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones empresariales. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas.</p> <p> </p> JavaEE."},{"location":"uutt/01_Arquitectura/015_Herramientas.html#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente en la versi\u00f3n 8.X . Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code> y <code>?&gt;</code><ul> <li>Para generar codigo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code></li> </ul> </li> <li>Multitud de librer\u00edas y frameworks:<ul> <li>Laravel, Symfony, Codeigniter, Zend</li> </ul> </li> </ul> <p>Su documentaci\u00f3n es bastante completa</p> <p>El siguiente mapa mental muestra un resumen de sus elementos:</p> <p> </p> PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p>"},{"location":"uutt/01_Arquitectura/015_Herramientas.html#161-ar-actividades-de-refuerzo","title":"1.6.1 AR. (Actividades de refuerzo)","text":"<p>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</p> RA CEs IC Puntuaci\u00f3n RA1 CE1a, CE1b, CE1c, CE1f, CE1g IC1 3p"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html","title":"Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. A lo largo del curso vamos a utilizar la versi\u00f3n 8.X de PHP.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#xampp","title":"XAMPP","text":"<p>XAMPP (https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP o MAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>la \u00faltima P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>XAMPP en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#docker","title":"Docker","text":"<p>Docker es un gestor de contenedores, considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Para ello es necesario tener instalado Docker Desktop en nuestros entornos de desarrollo (el cual ya incluye en nucleo de Docker y la herramienta docker compose).</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar PHP <code>8.X</code>. Respecto a Docker, para escribir los apuntes hemos utilizado la version <code>24</code> y la version <code>2.23.2</code> de docker compose. Finalmente, la versi\u00f3n de Docker Desktop que hemos utilizado es la <code>4.25.2</code>.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#plantilla-servidor-web-php","title":"Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arraque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos a rellenar el archivo <code>docker-compose.yaml</code> con:</p> Apache y PHP <pre><code># Services\nservices:\n  # Apache + PHP\n  apache_php:\n    image: php:8-apache\n    # Preparamos un volumen para almacenar nuestro c\u00f3digo\n    volumes:\n      - ./src/:/var/www/html\n    expose:\n      - 80\n    ports:\n      - 80:80\n</code></pre> Nginx y PHP <pre><code># Services\nservices:\n\n  nginx:\n    image: nginx:1.19\n    ports:\n      - 80:80\n    volumes:\n      - ./src:/var/www/php\n      - ./.docker/nginx/conf.d:/etc/nginx/conf.d # cargamos la configuraci\u00f3n de un fichero externo\n    depends_on:\n      - php   # enlazamos nginx con php\n\n  php:\n    image: php:8.0-fpm\n    working_dir: /var/www/php\n    volumes:\n      - ./src:/var/www/php\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente. Para facilitar la puesta en marcha, ten\u00e9is la plantilla de Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o Nginx/PHP disponible para su descarga.</p> <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp\n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./\n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash\n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando</li> <li><code>docker ps -a</code>: Ver todos los contenedores</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas</li> </ul> <p>Otra forma m\u00e1s sencilla para lanzar de nuevo los contenedores y gestionarlos una vez creados es utilizar el interfaz gr\u00e1fico que ofrece Docker Desktop.</p> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetas para todo el stack de desarrollo. En posteriores sesiones utilizaremos tanto Devilbox como Laradock</p> <p>Pero quiero saber c\u00f3mo funciona...</p> <p>En el m\u00f3dulo de Despliegue de Aplicaciones Web estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#entorno-de-desarrollo","title":"Entorno de desarrollo","text":"<p>En este curso vamos a emplear Visual Studio Code como entorno de desarrollo (IDE). Existen otras alternativas, siendo PhpStorm la m\u00e1s conocida pero siendo de pago. Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP Intelephense</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo.</p> <p> </p> Docker en VSCode."},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#hola-mundo","title":"Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como <code>index.php</code>, al acceder a <code>http://localhost</code> autom\u00e1ticamente cargar\u00e1 el resultado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#161-aea-actividad-de-ensenanzaaprendizaje","title":"1.6.1 AEA. (Actividad de Ense\u00f1anza/Aprendizaje)","text":"<p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> RA CEs IC Puntuaci\u00f3n RA1 CE1c, CE1e IC1 3p"},{"location":"uutt/01_Arquitectura/016_PuestaEnMarcha.html#162-ap-actividades-de-profundizacion","title":"1.6.2 AP. (Actividades de profundizaci\u00f3n)","text":"<p>PR102. Conocer contenido de variables en el fichero php.ini</p> RA CEs IC Puntuaci\u00f3n RA1 CE1c, CE1e IC1 3p"},{"location":"uutt/01_Arquitectura/017_ReferenciaLinks.html","title":"Referencias","text":"<ul> <li>Curso: Introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea</li> <li>Art\u00edculo: Arquitecturas Web y su evoluci\u00f3n</li> <li>Web: Desarrollo Web en Entorno Servidor, por Aitor Medrano</li> </ul>"},{"location":"uutt/01_Arquitectura/017_ReferenciaLinks.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Art\u00edculo: Full stack developer: \u00bfcu\u00e1les son sus funciones y qu\u00e9 formaci\u00f3n necesito?</li> </ul>"},{"location":"uutt/01_Arquitectura/018_Autoevaluacion.html","title":"Autoevaluaci\u00f3n","text":"<ol> <li>\u00bfQu\u00e9 define una arquitectura web?<ol> <li>El dise\u00f1o visual de una p\u00e1gina web.</li> <li>La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</li> <li>El tipo de contenido multimedia utilizado.</li> <li>La velocidad de carga de la p\u00e1gina web\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. La forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed.</p> <ol> <li>En una arquitectura cliente-servidor, \u00bfqu\u00e9 papel suele desempe\u00f1ar el cliente?<ol> <li>Servidor de base de datos.</li> <li>Balanceador de carga.</li> <li>Navegador web.</li> <li>Servidor de aplicaciones\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Navegador web.</p> <ol> <li>\u00bfQu\u00e9 se necesita para generar una p\u00e1gina web din\u00e1mica?<ol> <li>Solo HTML y CSS.</li> <li>Lenguaje de servidor y/o servicios REST.</li> <li>\u00danicamente JavaScript.</li> <li>Conexi\u00f3n a una red privada virtual (VPN)\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: b. Lenguaje de servidor y/o servicios REST.</p> <ol> <li>\u00bfQu\u00e9 perfiles de desarrollo se asocian con la generaci\u00f3n de p\u00e1ginas din\u00e1micas?<ol> <li>Analista de datos y cient\u00edfico de datos.</li> <li>Dise\u00f1ador gr\u00e1fico y desarrollador de juegos.</li> <li>Front-end/cliente y Back-end/servidor.</li> <li>Gestor de redes y administrador de sistemas\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. Front-end/cliente y Back-end/servidor.</p> <ol> <li>\u00bfQu\u00e9 representa el \"Modelo\" en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC)?<ol> <li>La interfaz de usuario.</li> <li>La l\u00f3gica de negocio y gesti\u00f3n de eventos.</li> <li>La informaci\u00f3n y gesti\u00f3n de accesos a esta.</li> <li>El componente que gestiona las comunicaciones y eventos\u200b</li> </ol> </li> </ol> Respuesta correcta <p>Respuesta correcta: c. La informaci\u00f3n y gesti\u00f3n de accesos a esta.</p>"},{"location":"uutt/01_Arquitectura/019_PruebaEspecifica.html","title":"Prueba espec\u00edfica","text":""},{"location":"uutt/01_Arquitectura/ProgramacionAula.html","title":"Programaci\u00f3n de aula","text":""},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje:","text":"<ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> </ol>"},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n:","text":"<ol> <li>a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>g. Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ol>"},{"location":"uutt/01_Arquitectura/ProgramacionAula.html#planificacion-temporal","title":"Planificaci\u00f3n temporal","text":"Sesi\u00f3n Fecha Conceptos Actividad UT 01 01 xx/xx/xxxx <p>Se trabajar\u00e1 la teor\u00eda de Arquitectura web</p> <ul> <li>Cliente/Servidor</li> <li>Arquitectura de una web din\u00e1mica</li> <li>MVC</li> </ul> <p>Se trabajar\u00e1n las siguientes actividades: </p> <ul> <li>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</li> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> 02 xx/xx/xxxx <p>Se trabajar\u00e1 la teor\u00eda de Herramientas</p> <ul> <li>Toma de decisiones</li> <li>Herramientas</li> <li>Puesta en marcha entorno de trabajo</li> </ul> <p>Se trabajar\u00e1n las siguientes actividades: </p> <ul> <li>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</li> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul>"},{"location":"uutt/01_Arquitectura/ResumenUD.html","title":"Resumen UD","text":"<p>A continuaci\u00f3n se muestra un resumen de la Unidad Did\u00e1ctica:</p>  RESUMEN UNIDAD DID\u00c1CTICA <p>Unidad Did\u00e1ctica</p> <p>UD1.- Arquitectura Web y herramientas de programaci\u00f3n..</p> <p>Horas</p> <p>2 Sesiones - 4 Horas</p> <p>Resultados de Aprendizaje</p> <p>RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</p> <p>Preconocimiento</p> <p>Conocer la estructura de una web y el uso de IDE.</p> <p>Objetivos Did\u00e1cticos</p> <p>Competencias Personales y Sociales. Transversales</p> <p> <ul> <li>OD1: Identificar los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor.</li> <li>OD2: Distinguir las herramientas de programaci\u00f3n en entorno servidor.</li> <li>OD3: Configurar entorno de trabajo en local</li> </ul> </p> <p>c. Gestionar servidores en distintos \u00e1mbitos de implantaci\u00f3n adaptando su configuraci\u00f3n en cada caso para permitir el despliegue de aplicaciones web.</p> <p>q. Resolver situaciones, problemas o contingencias con iniciativa y autonom\u00eda en el \u00e1mbito de su competencia, con creatividad, innovaci\u00f3n y esp\u00edritu de mejora en el trabajo personal y en el de los miembros del equipo.</p> <p>Contenidos Espec\u00edficos</p> <p>Materiales y Recursos</p> <p> <ul> <li>CES 1. Diferencias entre cliente y servidor</li> <li>CES 2. Arquitectura de una web din\u00e1mica</li> <li>CES 3. Modelo Vista Controlador (MVC)</li> <li>CES 4. Herramientas para programaci\u00f3n web en entorno servidor</li> <li>CES 5. Configuraci\u00f3n entorno local</li> </ul> </p> <p>Apuntes aportados por el profesorado.</p> <p>Aules como herramienta de difusi\u00f3n de los materiales y evaluaci\u00f3n de las actividades.</p> <p>Actividades Formativas</p> <p>Actividades de ense\u00f1anza y aprendizaje. AEA</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <p>AC101. Buscar los tres frameworks de PHP m\u00e1s utilizados</p> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>AC102. Configurar un servidor PHP y mostrar caracter\u00edsticas</p> <p> <ul> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de refuerzo. AR</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>PR101. Investigar las tecnolog\u00edas empleadas en cliente y servidor por tu red social favorita.</li> </ul> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas.</li> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Actividades de profundizaci\u00f3n. AP</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>PR102. Conocer contenido de variables en el fichero php.ini</li> </ul> <p> <ul> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> </ul> </p> <p> <ul> <li>IC1.</li> </ul> </p> <p>Prueba de Auditor\u00eda.</p> <p>Criterios Evaluaci\u00f3n</p> <p>Instrumento Calificaci\u00f3n</p> <ul> <li>Cuestionario multi-opci\u00f3n (test) de 20 preguntas sobre la teor\u00eda de la unidad.</li> </ul> <p> <ul> <li>CE1a. Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente web.</li> <li>CE1b. Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas.</li> <li>CE1c. Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores web.</li> <li>CE1d. Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores web.</li> <li>CE1e. Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n web en entorno servidor.</li> <li>CE1f. Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>CE1g. Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor.</li> </ul> </p> <p> <ul> <li>IC1 e IC2.</li> </ul> </p>"}]}